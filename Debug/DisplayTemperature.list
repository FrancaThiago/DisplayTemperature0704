
DisplayTemperature.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d40  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000067c  08007e50  08007e50  00017e50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080084cc  080084cc  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  080084cc  080084cc  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080084cc  080084cc  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080084cc  080084cc  000184cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080084d0  080084d0  000184d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080084d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ac  200001dc  080086b0  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000388  080086b0  00020388  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e75a  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002176  00000000  00000000  0002e95f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f50  00000000  00000000  00030ad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e70  00000000  00000000  00031a28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018e80  00000000  00000000  00032898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010a40  00000000  00000000  0004b718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e113  00000000  00000000  0005c158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ea26b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052d0  00000000  00000000  000ea2bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08007e38 	.word	0x08007e38

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08007e38 	.word	0x08007e38

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <ReadI2C>:
{
	return HAL_I2C_Mem_Write(i2cMAdd, dev_address, reg, 1, dado, bytes, 1000);
}

HAL_StatusTypeDef ReadI2C(uint8_t dev_address, uint8_t reg, uint8_t n_bytes, uint8_t* dado)
{
 8000fe4:	b590      	push	{r4, r7, lr}
 8000fe6:	b087      	sub	sp, #28
 8000fe8:	af04      	add	r7, sp, #16
 8000fea:	603b      	str	r3, [r7, #0]
 8000fec:	4603      	mov	r3, r0
 8000fee:	71fb      	strb	r3, [r7, #7]
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	71bb      	strb	r3, [r7, #6]
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	717b      	strb	r3, [r7, #5]
	return HAL_I2C_Mem_Read(i2cMAdd, dev_address, reg, 1, dado, n_bytes, 1000);
 8000ff8:	4b0a      	ldr	r3, [pc, #40]	; (8001024 <ReadI2C+0x40>)
 8000ffa:	6818      	ldr	r0, [r3, #0]
 8000ffc:	79fb      	ldrb	r3, [r7, #7]
 8000ffe:	b299      	uxth	r1, r3
 8001000:	79bb      	ldrb	r3, [r7, #6]
 8001002:	b29a      	uxth	r2, r3
 8001004:	797b      	ldrb	r3, [r7, #5]
 8001006:	b29b      	uxth	r3, r3
 8001008:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800100c:	9402      	str	r4, [sp, #8]
 800100e:	9301      	str	r3, [sp, #4]
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	9300      	str	r3, [sp, #0]
 8001014:	2301      	movs	r3, #1
 8001016:	f001 fca9 	bl	800296c <HAL_I2C_Mem_Read>
 800101a:	4603      	mov	r3, r0
}
 800101c:	4618      	mov	r0, r3
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	bd90      	pop	{r4, r7, pc}
 8001024:	20000214 	.word	0x20000214

08001028 <InitSensorTemperatureReading>:

HAL_StatusTypeDef InitSensorTemperatureReading(I2C_HandleTypeDef *i2cAdd)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
	i2cMAdd = i2cAdd;
 8001030:	4a35      	ldr	r2, [pc, #212]	; (8001108 <InitSensorTemperatureReading+0xe0>)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6013      	str	r3, [r2, #0]

	uint8_t device_id;
	ReadI2C(BMP_ADDRESS, ID_REG, 1, &device_id);
 8001036:	f107 030f 	add.w	r3, r7, #15
 800103a:	2201      	movs	r2, #1
 800103c:	21d0      	movs	r1, #208	; 0xd0
 800103e:	20ee      	movs	r0, #238	; 0xee
 8001040:	f7ff ffd0 	bl	8000fe4 <ReadI2C>

	// Calibration data read from the eprom


	uint8_t temp[2];
	ReadI2C(BMP_ADDRESS, AC5_H, 2, temp);
 8001044:	f107 030c 	add.w	r3, r7, #12
 8001048:	2202      	movs	r2, #2
 800104a:	21b2      	movs	r1, #178	; 0xb2
 800104c:	20ee      	movs	r0, #238	; 0xee
 800104e:	f7ff ffc9 	bl	8000fe4 <ReadI2C>
	AC5 = temp[0];
 8001052:	7b3b      	ldrb	r3, [r7, #12]
 8001054:	b29a      	uxth	r2, r3
 8001056:	4b2d      	ldr	r3, [pc, #180]	; (800110c <InitSensorTemperatureReading+0xe4>)
 8001058:	801a      	strh	r2, [r3, #0]
	AC5 = AC5 << 8 | temp[1];
 800105a:	4b2c      	ldr	r3, [pc, #176]	; (800110c <InitSensorTemperatureReading+0xe4>)
 800105c:	881b      	ldrh	r3, [r3, #0]
 800105e:	021b      	lsls	r3, r3, #8
 8001060:	b21a      	sxth	r2, r3
 8001062:	7b7b      	ldrb	r3, [r7, #13]
 8001064:	b21b      	sxth	r3, r3
 8001066:	4313      	orrs	r3, r2
 8001068:	b21b      	sxth	r3, r3
 800106a:	b29a      	uxth	r2, r3
 800106c:	4b27      	ldr	r3, [pc, #156]	; (800110c <InitSensorTemperatureReading+0xe4>)
 800106e:	801a      	strh	r2, [r3, #0]

	ReadI2C(BMP_ADDRESS, AC6_H, 2, temp);
 8001070:	f107 030c 	add.w	r3, r7, #12
 8001074:	2202      	movs	r2, #2
 8001076:	21b4      	movs	r1, #180	; 0xb4
 8001078:	20ee      	movs	r0, #238	; 0xee
 800107a:	f7ff ffb3 	bl	8000fe4 <ReadI2C>
	AC6 = temp[0];
 800107e:	7b3b      	ldrb	r3, [r7, #12]
 8001080:	b29a      	uxth	r2, r3
 8001082:	4b23      	ldr	r3, [pc, #140]	; (8001110 <InitSensorTemperatureReading+0xe8>)
 8001084:	801a      	strh	r2, [r3, #0]
	AC6 = AC6 << 8 | temp[1];
 8001086:	4b22      	ldr	r3, [pc, #136]	; (8001110 <InitSensorTemperatureReading+0xe8>)
 8001088:	881b      	ldrh	r3, [r3, #0]
 800108a:	021b      	lsls	r3, r3, #8
 800108c:	b21a      	sxth	r2, r3
 800108e:	7b7b      	ldrb	r3, [r7, #13]
 8001090:	b21b      	sxth	r3, r3
 8001092:	4313      	orrs	r3, r2
 8001094:	b21b      	sxth	r3, r3
 8001096:	b29a      	uxth	r2, r3
 8001098:	4b1d      	ldr	r3, [pc, #116]	; (8001110 <InitSensorTemperatureReading+0xe8>)
 800109a:	801a      	strh	r2, [r3, #0]

	ReadI2C(BMP_ADDRESS, MC_H, 2, temp);
 800109c:	f107 030c 	add.w	r3, r7, #12
 80010a0:	2202      	movs	r2, #2
 80010a2:	21bc      	movs	r1, #188	; 0xbc
 80010a4:	20ee      	movs	r0, #238	; 0xee
 80010a6:	f7ff ff9d 	bl	8000fe4 <ReadI2C>
	MC = temp[0];
 80010aa:	7b3b      	ldrb	r3, [r7, #12]
 80010ac:	b21a      	sxth	r2, r3
 80010ae:	4b19      	ldr	r3, [pc, #100]	; (8001114 <InitSensorTemperatureReading+0xec>)
 80010b0:	801a      	strh	r2, [r3, #0]
	MC = MC << 8 | temp[1];
 80010b2:	4b18      	ldr	r3, [pc, #96]	; (8001114 <InitSensorTemperatureReading+0xec>)
 80010b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010b8:	021b      	lsls	r3, r3, #8
 80010ba:	b21a      	sxth	r2, r3
 80010bc:	7b7b      	ldrb	r3, [r7, #13]
 80010be:	b21b      	sxth	r3, r3
 80010c0:	4313      	orrs	r3, r2
 80010c2:	b21a      	sxth	r2, r3
 80010c4:	4b13      	ldr	r3, [pc, #76]	; (8001114 <InitSensorTemperatureReading+0xec>)
 80010c6:	801a      	strh	r2, [r3, #0]

	ReadI2C(BMP_ADDRESS, MD_H, 2, temp);
 80010c8:	f107 030c 	add.w	r3, r7, #12
 80010cc:	2202      	movs	r2, #2
 80010ce:	21be      	movs	r1, #190	; 0xbe
 80010d0:	20ee      	movs	r0, #238	; 0xee
 80010d2:	f7ff ff87 	bl	8000fe4 <ReadI2C>
	MD = temp[0];
 80010d6:	7b3b      	ldrb	r3, [r7, #12]
 80010d8:	b21a      	sxth	r2, r3
 80010da:	4b0f      	ldr	r3, [pc, #60]	; (8001118 <InitSensorTemperatureReading+0xf0>)
 80010dc:	801a      	strh	r2, [r3, #0]
	MD = MD << 8 | temp[1];
 80010de:	4b0e      	ldr	r3, [pc, #56]	; (8001118 <InitSensorTemperatureReading+0xf0>)
 80010e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010e4:	021b      	lsls	r3, r3, #8
 80010e6:	b21a      	sxth	r2, r3
 80010e8:	7b7b      	ldrb	r3, [r7, #13]
 80010ea:	b21b      	sxth	r3, r3
 80010ec:	4313      	orrs	r3, r2
 80010ee:	b21a      	sxth	r2, r3
 80010f0:	4b09      	ldr	r3, [pc, #36]	; (8001118 <InitSensorTemperatureReading+0xf0>)
 80010f2:	801a      	strh	r2, [r3, #0]

	if(device_id == 0x55){
 80010f4:	7bfb      	ldrb	r3, [r7, #15]
 80010f6:	2b55      	cmp	r3, #85	; 0x55
 80010f8:	d101      	bne.n	80010fe <InitSensorTemperatureReading+0xd6>
		return HAL_OK;
 80010fa:	2300      	movs	r3, #0
 80010fc:	e7ff      	b.n	80010fe <InitSensorTemperatureReading+0xd6>
	}
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3710      	adds	r7, #16
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	20000214 	.word	0x20000214
 800110c:	200001f8 	.word	0x200001f8
 8001110:	200001fa 	.word	0x200001fa
 8001114:	200001fc 	.word	0x200001fc
 8001118:	200001fe 	.word	0x200001fe

0800111c <ReadUncTemperature>:

uint16_t ReadUncTemperature(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b086      	sub	sp, #24
 8001120:	af04      	add	r7, sp, #16
	uint8_t datatowrite = 0x2E; //Para ler sensor
 8001122:	232e      	movs	r3, #46	; 0x2e
 8001124:	71fb      	strb	r3, [r7, #7]
	uint8_t Temp_Buff[2] = {0}; //Vetor auxiliar
 8001126:	2300      	movs	r3, #0
 8001128:	80bb      	strh	r3, [r7, #4]
	uint8_t Temp_Buff2[2] = {0}; //Vetor auxiliar
 800112a:	2300      	movs	r3, #0
 800112c:	803b      	strh	r3, [r7, #0]

	//Escreve via I2C, no BMP, o valor para leitura 0x2E, no registrador 0xF4
	HAL_I2C_Mem_Write(i2cMAdd, BMP180_ADDRESS, 0xF4, 1, &datatowrite, 1, 1000);
 800112e:	4b15      	ldr	r3, [pc, #84]	; (8001184 <ReadUncTemperature+0x68>)
 8001130:	6818      	ldr	r0, [r3, #0]
 8001132:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001136:	9302      	str	r3, [sp, #8]
 8001138:	2301      	movs	r3, #1
 800113a:	9301      	str	r3, [sp, #4]
 800113c:	1dfb      	adds	r3, r7, #7
 800113e:	9300      	str	r3, [sp, #0]
 8001140:	2301      	movs	r3, #1
 8001142:	22f4      	movs	r2, #244	; 0xf4
 8001144:	21ee      	movs	r1, #238	; 0xee
 8001146:	f001 fb17 	bl	8002778 <HAL_I2C_Mem_Write>
	HAL_Delay (5);  // Espera 4.5 ms da leitura
 800114a:	2005      	movs	r0, #5
 800114c:	f000 fed2 	bl	8001ef4 <HAL_Delay>

	HAL_I2C_Mem_Read(i2cMAdd, BMP180_ADDRESS, 0xF6, 1, Temp_Buff, 2, 1000);
 8001150:	4b0c      	ldr	r3, [pc, #48]	; (8001184 <ReadUncTemperature+0x68>)
 8001152:	6818      	ldr	r0, [r3, #0]
 8001154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001158:	9302      	str	r3, [sp, #8]
 800115a:	2302      	movs	r3, #2
 800115c:	9301      	str	r3, [sp, #4]
 800115e:	1d3b      	adds	r3, r7, #4
 8001160:	9300      	str	r3, [sp, #0]
 8001162:	2301      	movs	r3, #1
 8001164:	22f6      	movs	r2, #246	; 0xf6
 8001166:	21ee      	movs	r1, #238	; 0xee
 8001168:	f001 fc00 	bl	800296c <HAL_I2C_Mem_Read>
	//HAL_I2C_Mem_Read(i2cMAdd, BMP180_ADDRESS, 0xF6, 1, Temp_Buff, 2, 1000);
	//HAL_I2C_Mem_Read(i2cMAdd, BMP180_ADDRESS, 0xF7, 1, Temp_Buff2, 2, 1000);
	return ((Temp_Buff[0]<<8) + Temp_Buff[1]);
 800116c:	793b      	ldrb	r3, [r7, #4]
 800116e:	b29b      	uxth	r3, r3
 8001170:	021b      	lsls	r3, r3, #8
 8001172:	b29a      	uxth	r2, r3
 8001174:	797b      	ldrb	r3, [r7, #5]
 8001176:	b29b      	uxth	r3, r3
 8001178:	4413      	add	r3, r2
 800117a:	b29b      	uxth	r3, r3
}
 800117c:	4618      	mov	r0, r3
 800117e:	3708      	adds	r7, #8
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	20000214 	.word	0x20000214

08001188 <ReadTemperature>:

float ReadTemperature (void)
{
 8001188:	b5b0      	push	{r4, r5, r7, lr}
 800118a:	af00      	add	r7, sp, #0
	UT = ReadUncTemperature();
 800118c:	f7ff ffc6 	bl	800111c <ReadUncTemperature>
 8001190:	4603      	mov	r3, r0
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff fd7e 	bl	8000c94 <__aeabi_ui2f>
 8001198:	4603      	mov	r3, r0
 800119a:	4a3f      	ldr	r2, [pc, #252]	; (8001298 <ReadTemperature+0x110>)
 800119c:	6013      	str	r3, [r2, #0]
	X1 = ((UT-AC6) * (AC5/(pow(2,15))));
 800119e:	4b3e      	ldr	r3, [pc, #248]	; (8001298 <ReadTemperature+0x110>)
 80011a0:	681c      	ldr	r4, [r3, #0]
 80011a2:	4b3e      	ldr	r3, [pc, #248]	; (800129c <ReadTemperature+0x114>)
 80011a4:	881b      	ldrh	r3, [r3, #0]
 80011a6:	4618      	mov	r0, r3
 80011a8:	f7ff fd78 	bl	8000c9c <__aeabi_i2f>
 80011ac:	4603      	mov	r3, r0
 80011ae:	4619      	mov	r1, r3
 80011b0:	4620      	mov	r0, r4
 80011b2:	f7ff fcbd 	bl	8000b30 <__aeabi_fsub>
 80011b6:	4603      	mov	r3, r0
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff f935 	bl	8000428 <__aeabi_f2d>
 80011be:	4604      	mov	r4, r0
 80011c0:	460d      	mov	r5, r1
 80011c2:	4b37      	ldr	r3, [pc, #220]	; (80012a0 <ReadTemperature+0x118>)
 80011c4:	881b      	ldrh	r3, [r3, #0]
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff f91c 	bl	8000404 <__aeabi_i2d>
 80011cc:	f04f 0200 	mov.w	r2, #0
 80011d0:	4b34      	ldr	r3, [pc, #208]	; (80012a4 <ReadTemperature+0x11c>)
 80011d2:	f7ff faab 	bl	800072c <__aeabi_ddiv>
 80011d6:	4602      	mov	r2, r0
 80011d8:	460b      	mov	r3, r1
 80011da:	4620      	mov	r0, r4
 80011dc:	4629      	mov	r1, r5
 80011de:	f7ff f97b 	bl	80004d8 <__aeabi_dmul>
 80011e2:	4602      	mov	r2, r0
 80011e4:	460b      	mov	r3, r1
 80011e6:	4610      	mov	r0, r2
 80011e8:	4619      	mov	r1, r3
 80011ea:	f7ff fc25 	bl	8000a38 <__aeabi_d2iz>
 80011ee:	4603      	mov	r3, r0
 80011f0:	4a2d      	ldr	r2, [pc, #180]	; (80012a8 <ReadTemperature+0x120>)
 80011f2:	6013      	str	r3, [r2, #0]
	X2 = ((MC*(pow(2,11))) / (X1+MD));
 80011f4:	4b2d      	ldr	r3, [pc, #180]	; (80012ac <ReadTemperature+0x124>)
 80011f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011fa:	4618      	mov	r0, r3
 80011fc:	f7ff f902 	bl	8000404 <__aeabi_i2d>
 8001200:	f04f 0200 	mov.w	r2, #0
 8001204:	4b2a      	ldr	r3, [pc, #168]	; (80012b0 <ReadTemperature+0x128>)
 8001206:	f7ff f967 	bl	80004d8 <__aeabi_dmul>
 800120a:	4602      	mov	r2, r0
 800120c:	460b      	mov	r3, r1
 800120e:	4614      	mov	r4, r2
 8001210:	461d      	mov	r5, r3
 8001212:	4b28      	ldr	r3, [pc, #160]	; (80012b4 <ReadTemperature+0x12c>)
 8001214:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001218:	461a      	mov	r2, r3
 800121a:	4b23      	ldr	r3, [pc, #140]	; (80012a8 <ReadTemperature+0x120>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4413      	add	r3, r2
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff f8ef 	bl	8000404 <__aeabi_i2d>
 8001226:	4602      	mov	r2, r0
 8001228:	460b      	mov	r3, r1
 800122a:	4620      	mov	r0, r4
 800122c:	4629      	mov	r1, r5
 800122e:	f7ff fa7d 	bl	800072c <__aeabi_ddiv>
 8001232:	4602      	mov	r2, r0
 8001234:	460b      	mov	r3, r1
 8001236:	4610      	mov	r0, r2
 8001238:	4619      	mov	r1, r3
 800123a:	f7ff fbfd 	bl	8000a38 <__aeabi_d2iz>
 800123e:	4603      	mov	r3, r0
 8001240:	4a1d      	ldr	r2, [pc, #116]	; (80012b8 <ReadTemperature+0x130>)
 8001242:	6013      	str	r3, [r2, #0]
	B5 = X1+X2;
 8001244:	4b18      	ldr	r3, [pc, #96]	; (80012a8 <ReadTemperature+0x120>)
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	4b1b      	ldr	r3, [pc, #108]	; (80012b8 <ReadTemperature+0x130>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4413      	add	r3, r2
 800124e:	4a1b      	ldr	r2, [pc, #108]	; (80012bc <ReadTemperature+0x134>)
 8001250:	6013      	str	r3, [r2, #0]
	Temp = (B5+8)/(pow(2,4));
 8001252:	4b1a      	ldr	r3, [pc, #104]	; (80012bc <ReadTemperature+0x134>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	3308      	adds	r3, #8
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff f8d3 	bl	8000404 <__aeabi_i2d>
 800125e:	f04f 0200 	mov.w	r2, #0
 8001262:	4b17      	ldr	r3, [pc, #92]	; (80012c0 <ReadTemperature+0x138>)
 8001264:	f7ff fa62 	bl	800072c <__aeabi_ddiv>
 8001268:	4602      	mov	r2, r0
 800126a:	460b      	mov	r3, r1
 800126c:	4610      	mov	r0, r2
 800126e:	4619      	mov	r1, r3
 8001270:	f7ff fc0a 	bl	8000a88 <__aeabi_d2f>
 8001274:	4603      	mov	r3, r0
 8001276:	4a13      	ldr	r2, [pc, #76]	; (80012c4 <ReadTemperature+0x13c>)
 8001278:	6013      	str	r3, [r2, #0]
	Temp = Temp/10;
 800127a:	4b12      	ldr	r3, [pc, #72]	; (80012c4 <ReadTemperature+0x13c>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4912      	ldr	r1, [pc, #72]	; (80012c8 <ReadTemperature+0x140>)
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff fe13 	bl	8000eac <__aeabi_fdiv>
 8001286:	4603      	mov	r3, r0
 8001288:	461a      	mov	r2, r3
 800128a:	4b0e      	ldr	r3, [pc, #56]	; (80012c4 <ReadTemperature+0x13c>)
 800128c:	601a      	str	r2, [r3, #0]
	return Temp;
 800128e:	4b0d      	ldr	r3, [pc, #52]	; (80012c4 <ReadTemperature+0x13c>)
 8001290:	681b      	ldr	r3, [r3, #0]
}
 8001292:	4618      	mov	r0, r3
 8001294:	bdb0      	pop	{r4, r5, r7, pc}
 8001296:	bf00      	nop
 8001298:	20000200 	.word	0x20000200
 800129c:	200001fa 	.word	0x200001fa
 80012a0:	200001f8 	.word	0x200001f8
 80012a4:	40e00000 	.word	0x40e00000
 80012a8:	20000204 	.word	0x20000204
 80012ac:	200001fc 	.word	0x200001fc
 80012b0:	40a00000 	.word	0x40a00000
 80012b4:	200001fe 	.word	0x200001fe
 80012b8:	20000208 	.word	0x20000208
 80012bc:	2000020c 	.word	0x2000020c
 80012c0:	40300000 	.word	0x40300000
 80012c4:	20000210 	.word	0x20000210
 80012c8:	41200000 	.word	0x41200000

080012cc <read_calliberation_data>:


void read_calliberation_data (void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0

}
 80012d0:	bf00      	nop
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bc80      	pop	{r7}
 80012d6:	4770      	bx	lr

080012d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012dc:	f000 fda8 	bl	8001e30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012e0:	f000 f8e6 	bl	80014b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012e4:	f000 f9d2 	bl	800168c <MX_GPIO_Init>
  MX_SPI1_Init();
 80012e8:	f000 f94c 	bl	8001584 <MX_SPI1_Init>
  MX_TIM3_Init();
 80012ec:	f000 f980 	bl	80015f0 <MX_TIM3_Init>
  MX_I2C1_Init();
 80012f0:	f000 f91a 	bl	8001528 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
	LCD_Init();
 80012f4:	f000 fc7c 	bl	8001bf0 <LCD_Init>
	LCD_Write_String(0, 0, "Temperatura");
 80012f8:	4a60      	ldr	r2, [pc, #384]	; (800147c <main+0x1a4>)
 80012fa:	2100      	movs	r1, #0
 80012fc:	2000      	movs	r0, #0
 80012fe:	f000 fd01 	bl	8001d04 <LCD_Write_String>

	HAL_GPIO_WritePin(GPIOA, BME_CS_Pin, GPIO_PIN_RESET);
 8001302:	2200      	movs	r2, #0
 8001304:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001308:	485d      	ldr	r0, [pc, #372]	; (8001480 <main+0x1a8>)
 800130a:	f001 f8c0 	bl	800248e <HAL_GPIO_WritePin>
	byte = 0xD0;
 800130e:	4b5d      	ldr	r3, [pc, #372]	; (8001484 <main+0x1ac>)
 8001310:	22d0      	movs	r2, #208	; 0xd0
 8001312:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1, &byte, 0x01, 1000);
 8001314:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001318:	2201      	movs	r2, #1
 800131a:	495a      	ldr	r1, [pc, #360]	; (8001484 <main+0x1ac>)
 800131c:	485a      	ldr	r0, [pc, #360]	; (8001488 <main+0x1b0>)
 800131e:	f002 fd71 	bl	8003e04 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, &byte, 0x01, 1000);
 8001322:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001326:	2201      	movs	r2, #1
 8001328:	4956      	ldr	r1, [pc, #344]	; (8001484 <main+0x1ac>)
 800132a:	4857      	ldr	r0, [pc, #348]	; (8001488 <main+0x1b0>)
 800132c:	f002 fea6 	bl	800407c <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA, BME_CS_Pin, GPIO_PIN_SET);
 8001330:	2201      	movs	r2, #1
 8001332:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001336:	4852      	ldr	r0, [pc, #328]	; (8001480 <main+0x1a8>)
 8001338:	f001 f8a9 	bl	800248e <HAL_GPIO_WritePin>

//	sprintf(buffer, "Id Lido %x ", byte);
//	LCD_Write_String(0,1, buffer);

	HAL_GPIO_WritePin(GPIOA, BME_CS_Pin, GPIO_PIN_RESET);
 800133c:	2200      	movs	r2, #0
 800133e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001342:	484f      	ldr	r0, [pc, #316]	; (8001480 <main+0x1a8>)
 8001344:	f001 f8a3 	bl	800248e <HAL_GPIO_WritePin>
	bytes[0] = (0xF2 & 0x7F);
 8001348:	4b50      	ldr	r3, [pc, #320]	; (800148c <main+0x1b4>)
 800134a:	2272      	movs	r2, #114	; 0x72
 800134c:	701a      	strb	r2, [r3, #0]
	bytes[1] = 0x04;
 800134e:	4b4f      	ldr	r3, [pc, #316]	; (800148c <main+0x1b4>)
 8001350:	2204      	movs	r2, #4
 8001352:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi1, bytes, 0x02, 1000);
 8001354:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001358:	2202      	movs	r2, #2
 800135a:	494c      	ldr	r1, [pc, #304]	; (800148c <main+0x1b4>)
 800135c:	484a      	ldr	r0, [pc, #296]	; (8001488 <main+0x1b0>)
 800135e:	f002 fd51 	bl	8003e04 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, BME_CS_Pin, GPIO_PIN_SET);
 8001362:	2201      	movs	r2, #1
 8001364:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001368:	4845      	ldr	r0, [pc, #276]	; (8001480 <main+0x1a8>)
 800136a:	f001 f890 	bl	800248e <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOA, BME_CS_Pin, GPIO_PIN_RESET);
 800136e:	2200      	movs	r2, #0
 8001370:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001374:	4842      	ldr	r0, [pc, #264]	; (8001480 <main+0x1a8>)
 8001376:	f001 f88a 	bl	800248e <HAL_GPIO_WritePin>
	bytes[0] = (0xF4 & 0x7F);
 800137a:	4b44      	ldr	r3, [pc, #272]	; (800148c <main+0x1b4>)
 800137c:	2274      	movs	r2, #116	; 0x74
 800137e:	701a      	strb	r2, [r3, #0]
	bytes[1] = ((4<<5)|(4<<2)|3);
 8001380:	4b42      	ldr	r3, [pc, #264]	; (800148c <main+0x1b4>)
 8001382:	2293      	movs	r2, #147	; 0x93
 8001384:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi1, bytes, 0x02, 1000);
 8001386:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800138a:	2202      	movs	r2, #2
 800138c:	493f      	ldr	r1, [pc, #252]	; (800148c <main+0x1b4>)
 800138e:	483e      	ldr	r0, [pc, #248]	; (8001488 <main+0x1b0>)
 8001390:	f002 fd38 	bl	8003e04 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, BME_CS_Pin, GPIO_PIN_SET);
 8001394:	2201      	movs	r2, #1
 8001396:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800139a:	4839      	ldr	r0, [pc, #228]	; (8001480 <main+0x1a8>)
 800139c:	f001 f877 	bl	800248e <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOA, BME_CS_Pin, GPIO_PIN_RESET);
 80013a0:	2200      	movs	r2, #0
 80013a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013a6:	4836      	ldr	r0, [pc, #216]	; (8001480 <main+0x1a8>)
 80013a8:	f001 f871 	bl	800248e <HAL_GPIO_WritePin>
	bytes[0] = (0xF5 & 0x7F);
 80013ac:	4b37      	ldr	r3, [pc, #220]	; (800148c <main+0x1b4>)
 80013ae:	2275      	movs	r2, #117	; 0x75
 80013b0:	701a      	strb	r2, [r3, #0]
	bytes[1] = 0xa0;
 80013b2:	4b36      	ldr	r3, [pc, #216]	; (800148c <main+0x1b4>)
 80013b4:	22a0      	movs	r2, #160	; 0xa0
 80013b6:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi1, bytes, 0x02, 1000);
 80013b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013bc:	2202      	movs	r2, #2
 80013be:	4933      	ldr	r1, [pc, #204]	; (800148c <main+0x1b4>)
 80013c0:	4831      	ldr	r0, [pc, #196]	; (8001488 <main+0x1b0>)
 80013c2:	f002 fd1f 	bl	8003e04 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, BME_CS_Pin, GPIO_PIN_SET);
 80013c6:	2201      	movs	r2, #1
 80013c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013cc:	482c      	ldr	r0, [pc, #176]	; (8001480 <main+0x1a8>)
 80013ce:	f001 f85e 	bl	800248e <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOA, BME_CS_Pin, GPIO_PIN_RESET);
 80013d2:	2200      	movs	r2, #0
 80013d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013d8:	4829      	ldr	r0, [pc, #164]	; (8001480 <main+0x1a8>)
 80013da:	f001 f858 	bl	800248e <HAL_GPIO_WritePin>
	byte = 0x88;
 80013de:	4b29      	ldr	r3, [pc, #164]	; (8001484 <main+0x1ac>)
 80013e0:	2288      	movs	r2, #136	; 0x88
 80013e2:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1, &byte, 0x01, 1000);
 80013e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013e8:	2201      	movs	r2, #1
 80013ea:	4926      	ldr	r1, [pc, #152]	; (8001484 <main+0x1ac>)
 80013ec:	4826      	ldr	r0, [pc, #152]	; (8001488 <main+0x1b0>)
 80013ee:	f002 fd09 	bl	8003e04 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, cmd, 0x06, 1000);
 80013f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013f6:	2206      	movs	r2, #6
 80013f8:	4925      	ldr	r1, [pc, #148]	; (8001490 <main+0x1b8>)
 80013fa:	4823      	ldr	r0, [pc, #140]	; (8001488 <main+0x1b0>)
 80013fc:	f002 fe3e 	bl	800407c <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA, BME_CS_Pin, GPIO_PIN_SET);
 8001400:	2201      	movs	r2, #1
 8001402:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001406:	481e      	ldr	r0, [pc, #120]	; (8001480 <main+0x1a8>)
 8001408:	f001 f841 	bl	800248e <HAL_GPIO_WritePin>


	dig_T1 = (cmd[1] << 8) | cmd[0];
 800140c:	4b20      	ldr	r3, [pc, #128]	; (8001490 <main+0x1b8>)
 800140e:	785b      	ldrb	r3, [r3, #1]
 8001410:	021b      	lsls	r3, r3, #8
 8001412:	b21a      	sxth	r2, r3
 8001414:	4b1e      	ldr	r3, [pc, #120]	; (8001490 <main+0x1b8>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	b21b      	sxth	r3, r3
 800141a:	4313      	orrs	r3, r2
 800141c:	b21b      	sxth	r3, r3
 800141e:	b29a      	uxth	r2, r3
 8001420:	4b1c      	ldr	r3, [pc, #112]	; (8001494 <main+0x1bc>)
 8001422:	801a      	strh	r2, [r3, #0]
	dig_T2 = (cmd[3] << 8) | cmd[2];
 8001424:	4b1a      	ldr	r3, [pc, #104]	; (8001490 <main+0x1b8>)
 8001426:	78db      	ldrb	r3, [r3, #3]
 8001428:	021b      	lsls	r3, r3, #8
 800142a:	b21a      	sxth	r2, r3
 800142c:	4b18      	ldr	r3, [pc, #96]	; (8001490 <main+0x1b8>)
 800142e:	789b      	ldrb	r3, [r3, #2]
 8001430:	b21b      	sxth	r3, r3
 8001432:	4313      	orrs	r3, r2
 8001434:	b21a      	sxth	r2, r3
 8001436:	4b18      	ldr	r3, [pc, #96]	; (8001498 <main+0x1c0>)
 8001438:	801a      	strh	r2, [r3, #0]
	dig_T3 = (cmd[5] << 8) | cmd[4];
 800143a:	4b15      	ldr	r3, [pc, #84]	; (8001490 <main+0x1b8>)
 800143c:	795b      	ldrb	r3, [r3, #5]
 800143e:	021b      	lsls	r3, r3, #8
 8001440:	b21a      	sxth	r2, r3
 8001442:	4b13      	ldr	r3, [pc, #76]	; (8001490 <main+0x1b8>)
 8001444:	791b      	ldrb	r3, [r3, #4]
 8001446:	b21b      	sxth	r3, r3
 8001448:	4313      	orrs	r3, r2
 800144a:	b21a      	sxth	r2, r3
 800144c:	4b13      	ldr	r3, [pc, #76]	; (800149c <main+0x1c4>)
 800144e:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	InitSensorTemperatureReading(&hi2c1);
 8001450:	4813      	ldr	r0, [pc, #76]	; (80014a0 <main+0x1c8>)
 8001452:	f7ff fde9 	bl	8001028 <InitSensorTemperatureReading>
	read_calliberation_data();
 8001456:	f7ff ff39 	bl	80012cc <read_calliberation_data>
	HAL_TIM_Base_Start_IT(&htim3);
 800145a:	4812      	ldr	r0, [pc, #72]	; (80014a4 <main+0x1cc>)
 800145c:	f003 fa0a 	bl	8004874 <HAL_TIM_Base_Start_IT>
//
//		HAL_SPI_Receive(&hspi1, temperatura, 0x03, 1000);
//
//		HAL_GPIO_WritePin(GPIOA, BME_CS_Pin, GPIO_PIN_SET);

		temp = ReadTemperature();
 8001460:	f7ff fe92 	bl	8001188 <ReadTemperature>
 8001464:	4603      	mov	r3, r0
 8001466:	4a10      	ldr	r2, [pc, #64]	; (80014a8 <main+0x1d0>)
 8001468:	6013      	str	r3, [r2, #0]
		aux=temp;
 800146a:	4b0f      	ldr	r3, [pc, #60]	; (80014a8 <main+0x1d0>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a0f      	ldr	r2, [pc, #60]	; (80014ac <main+0x1d4>)
 8001470:	6013      	str	r3, [r2, #0]
//				((((((temp_final >> 4) - dig_T1) * ((temp_final >> 4) - dig_T1)) >> 12) * dig_T3) >> 14);
//
//		temp = (temp * 5 + 128) >> 8;


		HAL_Delay(4000);
 8001472:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8001476:	f000 fd3d 	bl	8001ef4 <HAL_Delay>
		temp = ReadTemperature();
 800147a:	e7f1      	b.n	8001460 <main+0x188>
 800147c:	08007e50 	.word	0x08007e50
 8001480:	40010800 	.word	0x40010800
 8001484:	20000348 	.word	0x20000348
 8001488:	2000026c 	.word	0x2000026c
 800148c:	2000034c 	.word	0x2000034c
 8001490:	20000358 	.word	0x20000358
 8001494:	2000036a 	.word	0x2000036a
 8001498:	2000036c 	.word	0x2000036c
 800149c:	2000036e 	.word	0x2000036e
 80014a0:	20000218 	.word	0x20000218
 80014a4:	200002c4 	.word	0x200002c4
 80014a8:	20000340 	.word	0x20000340
 80014ac:	20000344 	.word	0x20000344

080014b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b090      	sub	sp, #64	; 0x40
 80014b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014b6:	f107 0318 	add.w	r3, r7, #24
 80014ba:	2228      	movs	r2, #40	; 0x28
 80014bc:	2100      	movs	r1, #0
 80014be:	4618      	mov	r0, r3
 80014c0:	f003 fdda 	bl	8005078 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014c4:	1d3b      	adds	r3, r7, #4
 80014c6:	2200      	movs	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]
 80014ca:	605a      	str	r2, [r3, #4]
 80014cc:	609a      	str	r2, [r3, #8]
 80014ce:	60da      	str	r2, [r3, #12]
 80014d0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014d2:	2302      	movs	r3, #2
 80014d4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014d6:	2301      	movs	r3, #1
 80014d8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014da:	2310      	movs	r3, #16
 80014dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80014de:	2300      	movs	r3, #0
 80014e0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014e2:	f107 0318 	add.w	r3, r7, #24
 80014e6:	4618      	mov	r0, r3
 80014e8:	f002 f802 	bl	80034f0 <HAL_RCC_OscConfig>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80014f2:	f000 f997 	bl	8001824 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014f6:	230f      	movs	r3, #15
 80014f8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80014fa:	2300      	movs	r3, #0
 80014fc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014fe:	2300      	movs	r3, #0
 8001500:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001502:	2300      	movs	r3, #0
 8001504:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001506:	2300      	movs	r3, #0
 8001508:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800150a:	1d3b      	adds	r3, r7, #4
 800150c:	2100      	movs	r1, #0
 800150e:	4618      	mov	r0, r3
 8001510:	f002 fa70 	bl	80039f4 <HAL_RCC_ClockConfig>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800151a:	f000 f983 	bl	8001824 <Error_Handler>
  }
}
 800151e:	bf00      	nop
 8001520:	3740      	adds	r7, #64	; 0x40
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
	...

08001528 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800152c:	4b12      	ldr	r3, [pc, #72]	; (8001578 <MX_I2C1_Init+0x50>)
 800152e:	4a13      	ldr	r2, [pc, #76]	; (800157c <MX_I2C1_Init+0x54>)
 8001530:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001532:	4b11      	ldr	r3, [pc, #68]	; (8001578 <MX_I2C1_Init+0x50>)
 8001534:	4a12      	ldr	r2, [pc, #72]	; (8001580 <MX_I2C1_Init+0x58>)
 8001536:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001538:	4b0f      	ldr	r3, [pc, #60]	; (8001578 <MX_I2C1_Init+0x50>)
 800153a:	2200      	movs	r2, #0
 800153c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800153e:	4b0e      	ldr	r3, [pc, #56]	; (8001578 <MX_I2C1_Init+0x50>)
 8001540:	2200      	movs	r2, #0
 8001542:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001544:	4b0c      	ldr	r3, [pc, #48]	; (8001578 <MX_I2C1_Init+0x50>)
 8001546:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800154a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800154c:	4b0a      	ldr	r3, [pc, #40]	; (8001578 <MX_I2C1_Init+0x50>)
 800154e:	2200      	movs	r2, #0
 8001550:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001552:	4b09      	ldr	r3, [pc, #36]	; (8001578 <MX_I2C1_Init+0x50>)
 8001554:	2200      	movs	r2, #0
 8001556:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001558:	4b07      	ldr	r3, [pc, #28]	; (8001578 <MX_I2C1_Init+0x50>)
 800155a:	2200      	movs	r2, #0
 800155c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800155e:	4b06      	ldr	r3, [pc, #24]	; (8001578 <MX_I2C1_Init+0x50>)
 8001560:	2200      	movs	r2, #0
 8001562:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001564:	4804      	ldr	r0, [pc, #16]	; (8001578 <MX_I2C1_Init+0x50>)
 8001566:	f000 ffc3 	bl	80024f0 <HAL_I2C_Init>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001570:	f000 f958 	bl	8001824 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001574:	bf00      	nop
 8001576:	bd80      	pop	{r7, pc}
 8001578:	20000218 	.word	0x20000218
 800157c:	40005400 	.word	0x40005400
 8001580:	000186a0 	.word	0x000186a0

08001584 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001588:	4b17      	ldr	r3, [pc, #92]	; (80015e8 <MX_SPI1_Init+0x64>)
 800158a:	4a18      	ldr	r2, [pc, #96]	; (80015ec <MX_SPI1_Init+0x68>)
 800158c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800158e:	4b16      	ldr	r3, [pc, #88]	; (80015e8 <MX_SPI1_Init+0x64>)
 8001590:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001594:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001596:	4b14      	ldr	r3, [pc, #80]	; (80015e8 <MX_SPI1_Init+0x64>)
 8001598:	2200      	movs	r2, #0
 800159a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800159c:	4b12      	ldr	r3, [pc, #72]	; (80015e8 <MX_SPI1_Init+0x64>)
 800159e:	2200      	movs	r2, #0
 80015a0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015a2:	4b11      	ldr	r3, [pc, #68]	; (80015e8 <MX_SPI1_Init+0x64>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015a8:	4b0f      	ldr	r3, [pc, #60]	; (80015e8 <MX_SPI1_Init+0x64>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80015ae:	4b0e      	ldr	r3, [pc, #56]	; (80015e8 <MX_SPI1_Init+0x64>)
 80015b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015b4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80015b6:	4b0c      	ldr	r3, [pc, #48]	; (80015e8 <MX_SPI1_Init+0x64>)
 80015b8:	2218      	movs	r2, #24
 80015ba:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015bc:	4b0a      	ldr	r3, [pc, #40]	; (80015e8 <MX_SPI1_Init+0x64>)
 80015be:	2200      	movs	r2, #0
 80015c0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015c2:	4b09      	ldr	r3, [pc, #36]	; (80015e8 <MX_SPI1_Init+0x64>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015c8:	4b07      	ldr	r3, [pc, #28]	; (80015e8 <MX_SPI1_Init+0x64>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80015ce:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <MX_SPI1_Init+0x64>)
 80015d0:	220a      	movs	r2, #10
 80015d2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80015d4:	4804      	ldr	r0, [pc, #16]	; (80015e8 <MX_SPI1_Init+0x64>)
 80015d6:	f002 fb91 	bl	8003cfc <HAL_SPI_Init>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80015e0:	f000 f920 	bl	8001824 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80015e4:	bf00      	nop
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	2000026c 	.word	0x2000026c
 80015ec:	40013000 	.word	0x40013000

080015f0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b086      	sub	sp, #24
 80015f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015f6:	f107 0308 	add.w	r3, r7, #8
 80015fa:	2200      	movs	r2, #0
 80015fc:	601a      	str	r2, [r3, #0]
 80015fe:	605a      	str	r2, [r3, #4]
 8001600:	609a      	str	r2, [r3, #8]
 8001602:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001604:	463b      	mov	r3, r7
 8001606:	2200      	movs	r2, #0
 8001608:	601a      	str	r2, [r3, #0]
 800160a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800160c:	4b1d      	ldr	r3, [pc, #116]	; (8001684 <MX_TIM3_Init+0x94>)
 800160e:	4a1e      	ldr	r2, [pc, #120]	; (8001688 <MX_TIM3_Init+0x98>)
 8001610:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7999;
 8001612:	4b1c      	ldr	r3, [pc, #112]	; (8001684 <MX_TIM3_Init+0x94>)
 8001614:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001618:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800161a:	4b1a      	ldr	r3, [pc, #104]	; (8001684 <MX_TIM3_Init+0x94>)
 800161c:	2200      	movs	r2, #0
 800161e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8001620:	4b18      	ldr	r3, [pc, #96]	; (8001684 <MX_TIM3_Init+0x94>)
 8001622:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001626:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001628:	4b16      	ldr	r3, [pc, #88]	; (8001684 <MX_TIM3_Init+0x94>)
 800162a:	2200      	movs	r2, #0
 800162c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800162e:	4b15      	ldr	r3, [pc, #84]	; (8001684 <MX_TIM3_Init+0x94>)
 8001630:	2200      	movs	r2, #0
 8001632:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001634:	4813      	ldr	r0, [pc, #76]	; (8001684 <MX_TIM3_Init+0x94>)
 8001636:	f003 f8cd 	bl	80047d4 <HAL_TIM_Base_Init>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001640:	f000 f8f0 	bl	8001824 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001644:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001648:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800164a:	f107 0308 	add.w	r3, r7, #8
 800164e:	4619      	mov	r1, r3
 8001650:	480c      	ldr	r0, [pc, #48]	; (8001684 <MX_TIM3_Init+0x94>)
 8001652:	f003 fa97 	bl	8004b84 <HAL_TIM_ConfigClockSource>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800165c:	f000 f8e2 	bl	8001824 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001660:	2300      	movs	r3, #0
 8001662:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001664:	2300      	movs	r3, #0
 8001666:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001668:	463b      	mov	r3, r7
 800166a:	4619      	mov	r1, r3
 800166c:	4805      	ldr	r0, [pc, #20]	; (8001684 <MX_TIM3_Init+0x94>)
 800166e:	f003 fc69 	bl	8004f44 <HAL_TIMEx_MasterConfigSynchronization>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001678:	f000 f8d4 	bl	8001824 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800167c:	bf00      	nop
 800167e:	3718      	adds	r7, #24
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	200002c4 	.word	0x200002c4
 8001688:	40000400 	.word	0x40000400

0800168c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b086      	sub	sp, #24
 8001690:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001692:	f107 0308 	add.w	r3, r7, #8
 8001696:	2200      	movs	r2, #0
 8001698:	601a      	str	r2, [r3, #0]
 800169a:	605a      	str	r2, [r3, #4]
 800169c:	609a      	str	r2, [r3, #8]
 800169e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a0:	4b22      	ldr	r3, [pc, #136]	; (800172c <MX_GPIO_Init+0xa0>)
 80016a2:	699b      	ldr	r3, [r3, #24]
 80016a4:	4a21      	ldr	r2, [pc, #132]	; (800172c <MX_GPIO_Init+0xa0>)
 80016a6:	f043 0304 	orr.w	r3, r3, #4
 80016aa:	6193      	str	r3, [r2, #24]
 80016ac:	4b1f      	ldr	r3, [pc, #124]	; (800172c <MX_GPIO_Init+0xa0>)
 80016ae:	699b      	ldr	r3, [r3, #24]
 80016b0:	f003 0304 	and.w	r3, r3, #4
 80016b4:	607b      	str	r3, [r7, #4]
 80016b6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016b8:	4b1c      	ldr	r3, [pc, #112]	; (800172c <MX_GPIO_Init+0xa0>)
 80016ba:	699b      	ldr	r3, [r3, #24]
 80016bc:	4a1b      	ldr	r2, [pc, #108]	; (800172c <MX_GPIO_Init+0xa0>)
 80016be:	f043 0308 	orr.w	r3, r3, #8
 80016c2:	6193      	str	r3, [r2, #24]
 80016c4:	4b19      	ldr	r3, [pc, #100]	; (800172c <MX_GPIO_Init+0xa0>)
 80016c6:	699b      	ldr	r3, [r3, #24]
 80016c8:	f003 0308 	and.w	r3, r3, #8
 80016cc:	603b      	str	r3, [r7, #0]
 80016ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RST_Pin|LCD_CE_Pin|LCD_DC_Pin|BME_CS_Pin, GPIO_PIN_RESET);
 80016d0:	2200      	movs	r2, #0
 80016d2:	f240 4119 	movw	r1, #1049	; 0x419
 80016d6:	4816      	ldr	r0, [pc, #88]	; (8001730 <MX_GPIO_Init+0xa4>)
 80016d8:	f000 fed9 	bl	800248e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_RST_Pin LCD_CE_Pin LCD_DC_Pin BME_CS_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_CE_Pin|LCD_DC_Pin|BME_CS_Pin;
 80016dc:	f240 4319 	movw	r3, #1049	; 0x419
 80016e0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e2:	2301      	movs	r3, #1
 80016e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e6:	2300      	movs	r3, #0
 80016e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ea:	2302      	movs	r3, #2
 80016ec:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ee:	f107 0308 	add.w	r3, r7, #8
 80016f2:	4619      	mov	r1, r3
 80016f4:	480e      	ldr	r0, [pc, #56]	; (8001730 <MX_GPIO_Init+0xa4>)
 80016f6:	f000 fd2f 	bl	8002158 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 80016fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016fe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001700:	4b0c      	ldr	r3, [pc, #48]	; (8001734 <MX_GPIO_Init+0xa8>)
 8001702:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001704:	2300      	movs	r3, #0
 8001706:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001708:	f107 0308 	add.w	r3, r7, #8
 800170c:	4619      	mov	r1, r3
 800170e:	480a      	ldr	r0, [pc, #40]	; (8001738 <MX_GPIO_Init+0xac>)
 8001710:	f000 fd22 	bl	8002158 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001714:	2200      	movs	r2, #0
 8001716:	2100      	movs	r1, #0
 8001718:	2028      	movs	r0, #40	; 0x28
 800171a:	f000 fce6 	bl	80020ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800171e:	2028      	movs	r0, #40	; 0x28
 8001720:	f000 fcff 	bl	8002122 <HAL_NVIC_EnableIRQ>

}
 8001724:	bf00      	nop
 8001726:	3718      	adds	r7, #24
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	40021000 	.word	0x40021000
 8001730:	40010800 	.word	0x40010800
 8001734:	10310000 	.word	0x10310000
 8001738:	40010c00 	.word	0x40010c00

0800173c <HAL_TIM_PeriodElapsedCallback>:
//	LCD_Write_String(0,2, buffer);
//}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
	sprintf(buffer, "temp. %.2f ", temp);
 8001744:	4b09      	ldr	r3, [pc, #36]	; (800176c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4618      	mov	r0, r3
 800174a:	f7fe fe6d 	bl	8000428 <__aeabi_f2d>
 800174e:	4602      	mov	r2, r0
 8001750:	460b      	mov	r3, r1
 8001752:	4907      	ldr	r1, [pc, #28]	; (8001770 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001754:	4807      	ldr	r0, [pc, #28]	; (8001774 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001756:	f004 f8f7 	bl	8005948 <siprintf>
	LCD_Write_String(0,2, buffer);
 800175a:	4a06      	ldr	r2, [pc, #24]	; (8001774 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800175c:	2102      	movs	r1, #2
 800175e:	2000      	movs	r0, #0
 8001760:	f000 fad0 	bl	8001d04 <LCD_Write_String>
}
 8001764:	bf00      	nop
 8001766:	3708      	adds	r7, #8
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	20000340 	.word	0x20000340
 8001770:	08007e5c 	.word	0x08007e5c
 8001774:	2000030c 	.word	0x2000030c

08001778 <HAL_GPIO_EXTI_Callback>:



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	4603      	mov	r3, r0
 8001780:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == BUTTON_Pin){
 8001782:	88fb      	ldrh	r3, [r7, #6]
 8001784:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001788:	d135      	bne.n	80017f6 <HAL_GPIO_EXTI_Callback+0x7e>
		if(HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin) == GPIO_PIN_RESET){
 800178a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800178e:	481c      	ldr	r0, [pc, #112]	; (8001800 <HAL_GPIO_EXTI_Callback+0x88>)
 8001790:	f000 fe66 	bl	8002460 <HAL_GPIO_ReadPin>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d123      	bne.n	80017e2 <HAL_GPIO_EXTI_Callback+0x6a>
			// Button pressed
			HAL_TIM_Base_Stop_IT(&htim3);
 800179a:	481a      	ldr	r0, [pc, #104]	; (8001804 <HAL_GPIO_EXTI_Callback+0x8c>)
 800179c:	f003 f8bc 	bl	8004918 <HAL_TIM_Base_Stop_IT>
			LCD_Clear();
 80017a0:	f000 fa68 	bl	8001c74 <LCD_Clear>
			LCD_Write_String(0, 0, "Sistemas");
 80017a4:	4a18      	ldr	r2, [pc, #96]	; (8001808 <HAL_GPIO_EXTI_Callback+0x90>)
 80017a6:	2100      	movs	r1, #0
 80017a8:	2000      	movs	r0, #0
 80017aa:	f000 faab 	bl	8001d04 <LCD_Write_String>
			LCD_Write_String(10, 1, "Embarcados");
 80017ae:	4a17      	ldr	r2, [pc, #92]	; (800180c <HAL_GPIO_EXTI_Callback+0x94>)
 80017b0:	2101      	movs	r1, #1
 80017b2:	200a      	movs	r0, #10
 80017b4:	f000 faa6 	bl	8001d04 <LCD_Write_String>
			LCD_Write_String(0, 2, "Carolina");
 80017b8:	4a15      	ldr	r2, [pc, #84]	; (8001810 <HAL_GPIO_EXTI_Callback+0x98>)
 80017ba:	2102      	movs	r1, #2
 80017bc:	2000      	movs	r0, #0
 80017be:	f000 faa1 	bl	8001d04 <LCD_Write_String>
			LCD_Write_String(15, 3, "Kelsch");
 80017c2:	4a14      	ldr	r2, [pc, #80]	; (8001814 <HAL_GPIO_EXTI_Callback+0x9c>)
 80017c4:	2103      	movs	r1, #3
 80017c6:	200f      	movs	r0, #15
 80017c8:	f000 fa9c 	bl	8001d04 <LCD_Write_String>
			LCD_Write_String(0, 4, "Thiago");
 80017cc:	4a12      	ldr	r2, [pc, #72]	; (8001818 <HAL_GPIO_EXTI_Callback+0xa0>)
 80017ce:	2104      	movs	r1, #4
 80017d0:	2000      	movs	r0, #0
 80017d2:	f000 fa97 	bl	8001d04 <LCD_Write_String>
			LCD_Write_String(15, 5, "Franca");
 80017d6:	4a11      	ldr	r2, [pc, #68]	; (800181c <HAL_GPIO_EXTI_Callback+0xa4>)
 80017d8:	2105      	movs	r1, #5
 80017da:	200f      	movs	r0, #15
 80017dc:	f000 fa92 	bl	8001d04 <LCD_Write_String>
			HAL_TIM_Base_Start_IT(&htim3);
			LCD_Clear();
			LCD_Write_String(0, 0, "Temperatura");
		}
	}
}
 80017e0:	e009      	b.n	80017f6 <HAL_GPIO_EXTI_Callback+0x7e>
			HAL_TIM_Base_Start_IT(&htim3);
 80017e2:	4808      	ldr	r0, [pc, #32]	; (8001804 <HAL_GPIO_EXTI_Callback+0x8c>)
 80017e4:	f003 f846 	bl	8004874 <HAL_TIM_Base_Start_IT>
			LCD_Clear();
 80017e8:	f000 fa44 	bl	8001c74 <LCD_Clear>
			LCD_Write_String(0, 0, "Temperatura");
 80017ec:	4a0c      	ldr	r2, [pc, #48]	; (8001820 <HAL_GPIO_EXTI_Callback+0xa8>)
 80017ee:	2100      	movs	r1, #0
 80017f0:	2000      	movs	r0, #0
 80017f2:	f000 fa87 	bl	8001d04 <LCD_Write_String>
}
 80017f6:	bf00      	nop
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	40010c00 	.word	0x40010c00
 8001804:	200002c4 	.word	0x200002c4
 8001808:	08007e68 	.word	0x08007e68
 800180c:	08007e74 	.word	0x08007e74
 8001810:	08007e80 	.word	0x08007e80
 8001814:	08007e8c 	.word	0x08007e8c
 8001818:	08007e94 	.word	0x08007e94
 800181c:	08007e9c 	.word	0x08007e9c
 8001820:	08007e50 	.word	0x08007e50

08001824 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001828:	b672      	cpsid	i
}
 800182a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800182c:	e7fe      	b.n	800182c <Error_Handler+0x8>
	...

08001830 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001830:	b480      	push	{r7}
 8001832:	b085      	sub	sp, #20
 8001834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001836:	4b15      	ldr	r3, [pc, #84]	; (800188c <HAL_MspInit+0x5c>)
 8001838:	699b      	ldr	r3, [r3, #24]
 800183a:	4a14      	ldr	r2, [pc, #80]	; (800188c <HAL_MspInit+0x5c>)
 800183c:	f043 0301 	orr.w	r3, r3, #1
 8001840:	6193      	str	r3, [r2, #24]
 8001842:	4b12      	ldr	r3, [pc, #72]	; (800188c <HAL_MspInit+0x5c>)
 8001844:	699b      	ldr	r3, [r3, #24]
 8001846:	f003 0301 	and.w	r3, r3, #1
 800184a:	60bb      	str	r3, [r7, #8]
 800184c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800184e:	4b0f      	ldr	r3, [pc, #60]	; (800188c <HAL_MspInit+0x5c>)
 8001850:	69db      	ldr	r3, [r3, #28]
 8001852:	4a0e      	ldr	r2, [pc, #56]	; (800188c <HAL_MspInit+0x5c>)
 8001854:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001858:	61d3      	str	r3, [r2, #28]
 800185a:	4b0c      	ldr	r3, [pc, #48]	; (800188c <HAL_MspInit+0x5c>)
 800185c:	69db      	ldr	r3, [r3, #28]
 800185e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001862:	607b      	str	r3, [r7, #4]
 8001864:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001866:	4b0a      	ldr	r3, [pc, #40]	; (8001890 <HAL_MspInit+0x60>)
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	60fb      	str	r3, [r7, #12]
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001872:	60fb      	str	r3, [r7, #12]
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800187a:	60fb      	str	r3, [r7, #12]
 800187c:	4a04      	ldr	r2, [pc, #16]	; (8001890 <HAL_MspInit+0x60>)
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001882:	bf00      	nop
 8001884:	3714      	adds	r7, #20
 8001886:	46bd      	mov	sp, r7
 8001888:	bc80      	pop	{r7}
 800188a:	4770      	bx	lr
 800188c:	40021000 	.word	0x40021000
 8001890:	40010000 	.word	0x40010000

08001894 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b088      	sub	sp, #32
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800189c:	f107 0310 	add.w	r3, r7, #16
 80018a0:	2200      	movs	r2, #0
 80018a2:	601a      	str	r2, [r3, #0]
 80018a4:	605a      	str	r2, [r3, #4]
 80018a6:	609a      	str	r2, [r3, #8]
 80018a8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a15      	ldr	r2, [pc, #84]	; (8001904 <HAL_I2C_MspInit+0x70>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d123      	bne.n	80018fc <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018b4:	4b14      	ldr	r3, [pc, #80]	; (8001908 <HAL_I2C_MspInit+0x74>)
 80018b6:	699b      	ldr	r3, [r3, #24]
 80018b8:	4a13      	ldr	r2, [pc, #76]	; (8001908 <HAL_I2C_MspInit+0x74>)
 80018ba:	f043 0308 	orr.w	r3, r3, #8
 80018be:	6193      	str	r3, [r2, #24]
 80018c0:	4b11      	ldr	r3, [pc, #68]	; (8001908 <HAL_I2C_MspInit+0x74>)
 80018c2:	699b      	ldr	r3, [r3, #24]
 80018c4:	f003 0308 	and.w	r3, r3, #8
 80018c8:	60fb      	str	r3, [r7, #12]
 80018ca:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80018cc:	23c0      	movs	r3, #192	; 0xc0
 80018ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018d0:	2312      	movs	r3, #18
 80018d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018d4:	2303      	movs	r3, #3
 80018d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018d8:	f107 0310 	add.w	r3, r7, #16
 80018dc:	4619      	mov	r1, r3
 80018de:	480b      	ldr	r0, [pc, #44]	; (800190c <HAL_I2C_MspInit+0x78>)
 80018e0:	f000 fc3a 	bl	8002158 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018e4:	4b08      	ldr	r3, [pc, #32]	; (8001908 <HAL_I2C_MspInit+0x74>)
 80018e6:	69db      	ldr	r3, [r3, #28]
 80018e8:	4a07      	ldr	r2, [pc, #28]	; (8001908 <HAL_I2C_MspInit+0x74>)
 80018ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018ee:	61d3      	str	r3, [r2, #28]
 80018f0:	4b05      	ldr	r3, [pc, #20]	; (8001908 <HAL_I2C_MspInit+0x74>)
 80018f2:	69db      	ldr	r3, [r3, #28]
 80018f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018f8:	60bb      	str	r3, [r7, #8]
 80018fa:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80018fc:	bf00      	nop
 80018fe:	3720      	adds	r7, #32
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	40005400 	.word	0x40005400
 8001908:	40021000 	.word	0x40021000
 800190c:	40010c00 	.word	0x40010c00

08001910 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b088      	sub	sp, #32
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001918:	f107 0310 	add.w	r3, r7, #16
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	605a      	str	r2, [r3, #4]
 8001922:	609a      	str	r2, [r3, #8]
 8001924:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a1b      	ldr	r2, [pc, #108]	; (8001998 <HAL_SPI_MspInit+0x88>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d12f      	bne.n	8001990 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001930:	4b1a      	ldr	r3, [pc, #104]	; (800199c <HAL_SPI_MspInit+0x8c>)
 8001932:	699b      	ldr	r3, [r3, #24]
 8001934:	4a19      	ldr	r2, [pc, #100]	; (800199c <HAL_SPI_MspInit+0x8c>)
 8001936:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800193a:	6193      	str	r3, [r2, #24]
 800193c:	4b17      	ldr	r3, [pc, #92]	; (800199c <HAL_SPI_MspInit+0x8c>)
 800193e:	699b      	ldr	r3, [r3, #24]
 8001940:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001944:	60fb      	str	r3, [r7, #12]
 8001946:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001948:	4b14      	ldr	r3, [pc, #80]	; (800199c <HAL_SPI_MspInit+0x8c>)
 800194a:	699b      	ldr	r3, [r3, #24]
 800194c:	4a13      	ldr	r2, [pc, #76]	; (800199c <HAL_SPI_MspInit+0x8c>)
 800194e:	f043 0304 	orr.w	r3, r3, #4
 8001952:	6193      	str	r3, [r2, #24]
 8001954:	4b11      	ldr	r3, [pc, #68]	; (800199c <HAL_SPI_MspInit+0x8c>)
 8001956:	699b      	ldr	r3, [r3, #24]
 8001958:	f003 0304 	and.w	r3, r3, #4
 800195c:	60bb      	str	r3, [r7, #8]
 800195e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001960:	23a0      	movs	r3, #160	; 0xa0
 8001962:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001964:	2302      	movs	r3, #2
 8001966:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001968:	2303      	movs	r3, #3
 800196a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800196c:	f107 0310 	add.w	r3, r7, #16
 8001970:	4619      	mov	r1, r3
 8001972:	480b      	ldr	r0, [pc, #44]	; (80019a0 <HAL_SPI_MspInit+0x90>)
 8001974:	f000 fbf0 	bl	8002158 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001978:	2340      	movs	r3, #64	; 0x40
 800197a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800197c:	2300      	movs	r3, #0
 800197e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001980:	2300      	movs	r3, #0
 8001982:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001984:	f107 0310 	add.w	r3, r7, #16
 8001988:	4619      	mov	r1, r3
 800198a:	4805      	ldr	r0, [pc, #20]	; (80019a0 <HAL_SPI_MspInit+0x90>)
 800198c:	f000 fbe4 	bl	8002158 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001990:	bf00      	nop
 8001992:	3720      	adds	r7, #32
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	40013000 	.word	0x40013000
 800199c:	40021000 	.word	0x40021000
 80019a0:	40010800 	.word	0x40010800

080019a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a0d      	ldr	r2, [pc, #52]	; (80019e8 <HAL_TIM_Base_MspInit+0x44>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d113      	bne.n	80019de <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019b6:	4b0d      	ldr	r3, [pc, #52]	; (80019ec <HAL_TIM_Base_MspInit+0x48>)
 80019b8:	69db      	ldr	r3, [r3, #28]
 80019ba:	4a0c      	ldr	r2, [pc, #48]	; (80019ec <HAL_TIM_Base_MspInit+0x48>)
 80019bc:	f043 0302 	orr.w	r3, r3, #2
 80019c0:	61d3      	str	r3, [r2, #28]
 80019c2:	4b0a      	ldr	r3, [pc, #40]	; (80019ec <HAL_TIM_Base_MspInit+0x48>)
 80019c4:	69db      	ldr	r3, [r3, #28]
 80019c6:	f003 0302 	and.w	r3, r3, #2
 80019ca:	60fb      	str	r3, [r7, #12]
 80019cc:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80019ce:	2200      	movs	r2, #0
 80019d0:	2100      	movs	r1, #0
 80019d2:	201d      	movs	r0, #29
 80019d4:	f000 fb89 	bl	80020ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80019d8:	201d      	movs	r0, #29
 80019da:	f000 fba2 	bl	8002122 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80019de:	bf00      	nop
 80019e0:	3710      	adds	r7, #16
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	40000400 	.word	0x40000400
 80019ec:	40021000 	.word	0x40021000

080019f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019f4:	e7fe      	b.n	80019f4 <NMI_Handler+0x4>

080019f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019f6:	b480      	push	{r7}
 80019f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019fa:	e7fe      	b.n	80019fa <HardFault_Handler+0x4>

080019fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a00:	e7fe      	b.n	8001a00 <MemManage_Handler+0x4>

08001a02 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a02:	b480      	push	{r7}
 8001a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a06:	e7fe      	b.n	8001a06 <BusFault_Handler+0x4>

08001a08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a0c:	e7fe      	b.n	8001a0c <UsageFault_Handler+0x4>

08001a0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a12:	bf00      	nop
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bc80      	pop	{r7}
 8001a18:	4770      	bx	lr

08001a1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a1a:	b480      	push	{r7}
 8001a1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a1e:	bf00      	nop
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bc80      	pop	{r7}
 8001a24:	4770      	bx	lr

08001a26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a26:	b480      	push	{r7}
 8001a28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a2a:	bf00      	nop
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bc80      	pop	{r7}
 8001a30:	4770      	bx	lr

08001a32 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a32:	b580      	push	{r7, lr}
 8001a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a36:	f000 fa41 	bl	8001ebc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a3a:	bf00      	nop
 8001a3c:	bd80      	pop	{r7, pc}
	...

08001a40 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001a44:	4802      	ldr	r0, [pc, #8]	; (8001a50 <TIM3_IRQHandler+0x10>)
 8001a46:	f002 ff95 	bl	8004974 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001a4a:	bf00      	nop
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	200002c4 	.word	0x200002c4

08001a54 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8001a58:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001a5c:	f000 fd30 	bl	80024c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001a60:	bf00      	nop
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
	return 1;
 8001a68:	2301      	movs	r3, #1
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bc80      	pop	{r7}
 8001a70:	4770      	bx	lr

08001a72 <_kill>:

int _kill(int pid, int sig)
{
 8001a72:	b580      	push	{r7, lr}
 8001a74:	b082      	sub	sp, #8
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]
 8001a7a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001a7c:	f003 fad2 	bl	8005024 <__errno>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2216      	movs	r2, #22
 8001a84:	601a      	str	r2, [r3, #0]
	return -1;
 8001a86:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <_exit>:

void _exit (int status)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b082      	sub	sp, #8
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001a9a:	f04f 31ff 	mov.w	r1, #4294967295
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f7ff ffe7 	bl	8001a72 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001aa4:	e7fe      	b.n	8001aa4 <_exit+0x12>

08001aa6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	b086      	sub	sp, #24
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	60f8      	str	r0, [r7, #12]
 8001aae:	60b9      	str	r1, [r7, #8]
 8001ab0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	617b      	str	r3, [r7, #20]
 8001ab6:	e00a      	b.n	8001ace <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001ab8:	f3af 8000 	nop.w
 8001abc:	4601      	mov	r1, r0
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	1c5a      	adds	r2, r3, #1
 8001ac2:	60ba      	str	r2, [r7, #8]
 8001ac4:	b2ca      	uxtb	r2, r1
 8001ac6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	3301      	adds	r3, #1
 8001acc:	617b      	str	r3, [r7, #20]
 8001ace:	697a      	ldr	r2, [r7, #20]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	dbf0      	blt.n	8001ab8 <_read+0x12>
	}

return len;
 8001ad6:	687b      	ldr	r3, [r7, #4]
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3718      	adds	r7, #24
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}

08001ae0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b086      	sub	sp, #24
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	60f8      	str	r0, [r7, #12]
 8001ae8:	60b9      	str	r1, [r7, #8]
 8001aea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aec:	2300      	movs	r3, #0
 8001aee:	617b      	str	r3, [r7, #20]
 8001af0:	e009      	b.n	8001b06 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	1c5a      	adds	r2, r3, #1
 8001af6:	60ba      	str	r2, [r7, #8]
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	3301      	adds	r3, #1
 8001b04:	617b      	str	r3, [r7, #20]
 8001b06:	697a      	ldr	r2, [r7, #20]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	dbf1      	blt.n	8001af2 <_write+0x12>
	}
	return len;
 8001b0e:	687b      	ldr	r3, [r7, #4]
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3718      	adds	r7, #24
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}

08001b18 <_close>:

int _close(int file)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
	return -1;
 8001b20:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	370c      	adds	r7, #12
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bc80      	pop	{r7}
 8001b2c:	4770      	bx	lr

08001b2e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	b083      	sub	sp, #12
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	6078      	str	r0, [r7, #4]
 8001b36:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b3e:	605a      	str	r2, [r3, #4]
	return 0;
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bc80      	pop	{r7}
 8001b4a:	4770      	bx	lr

08001b4c <_isatty>:

int _isatty(int file)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
	return 1;
 8001b54:	2301      	movs	r3, #1
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	370c      	adds	r7, #12
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bc80      	pop	{r7}
 8001b5e:	4770      	bx	lr

08001b60 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b085      	sub	sp, #20
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	60f8      	str	r0, [r7, #12]
 8001b68:	60b9      	str	r1, [r7, #8]
 8001b6a:	607a      	str	r2, [r7, #4]
	return 0;
 8001b6c:	2300      	movs	r3, #0
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3714      	adds	r7, #20
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bc80      	pop	{r7}
 8001b76:	4770      	bx	lr

08001b78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b086      	sub	sp, #24
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b80:	4a14      	ldr	r2, [pc, #80]	; (8001bd4 <_sbrk+0x5c>)
 8001b82:	4b15      	ldr	r3, [pc, #84]	; (8001bd8 <_sbrk+0x60>)
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b8c:	4b13      	ldr	r3, [pc, #76]	; (8001bdc <_sbrk+0x64>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d102      	bne.n	8001b9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b94:	4b11      	ldr	r3, [pc, #68]	; (8001bdc <_sbrk+0x64>)
 8001b96:	4a12      	ldr	r2, [pc, #72]	; (8001be0 <_sbrk+0x68>)
 8001b98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b9a:	4b10      	ldr	r3, [pc, #64]	; (8001bdc <_sbrk+0x64>)
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4413      	add	r3, r2
 8001ba2:	693a      	ldr	r2, [r7, #16]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d207      	bcs.n	8001bb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ba8:	f003 fa3c 	bl	8005024 <__errno>
 8001bac:	4603      	mov	r3, r0
 8001bae:	220c      	movs	r2, #12
 8001bb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8001bb6:	e009      	b.n	8001bcc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bb8:	4b08      	ldr	r3, [pc, #32]	; (8001bdc <_sbrk+0x64>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bbe:	4b07      	ldr	r3, [pc, #28]	; (8001bdc <_sbrk+0x64>)
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4413      	add	r3, r2
 8001bc6:	4a05      	ldr	r2, [pc, #20]	; (8001bdc <_sbrk+0x64>)
 8001bc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bca:	68fb      	ldr	r3, [r7, #12]
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3718      	adds	r7, #24
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	20005000 	.word	0x20005000
 8001bd8:	00000400 	.word	0x00000400
 8001bdc:	20000370 	.word	0x20000370
 8001be0:	20000388 	.word	0x20000388

08001be4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001be8:	bf00      	nop
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bc80      	pop	{r7}
 8001bee:	4770      	bx	lr

08001bf0 <LCD_Init>:
uint8_t spiOK = 0U;

/**
 * Initialize LCD.
 */
void LCD_Init(void) {
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
	LCD_Reset();
 8001bf4:	f000 f810 	bl	8001c18 <LCD_Reset>
	LCD_Write_Command(0x21);
 8001bf8:	2021      	movs	r0, #33	; 0x21
 8001bfa:	f000 f8a3 	bl	8001d44 <LCD_Write_Command>
	LCD_Write_Command(0xD0);
 8001bfe:	20d0      	movs	r0, #208	; 0xd0
 8001c00:	f000 f8a0 	bl	8001d44 <LCD_Write_Command>
	LCD_Write_Command(0x20);
 8001c04:	2020      	movs	r0, #32
 8001c06:	f000 f89d 	bl	8001d44 <LCD_Write_Command>
	LCD_Write_Command(0x0C);
 8001c0a:	200c      	movs	r0, #12
 8001c0c:	f000 f89a 	bl	8001d44 <LCD_Write_Command>
	LCD_Clear();
 8001c10:	f000 f830 	bl	8001c74 <LCD_Clear>
}
 8001c14:	bf00      	nop
 8001c16:	bd80      	pop	{r7, pc}

08001c18 <LCD_Reset>:

/**
 * Reset LCD.
 */
void LCD_Reset(void) {
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RESET_PORT, LCD_RESET_PIN, GPIO_PIN_RESET);
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	2101      	movs	r1, #1
 8001c20:	4806      	ldr	r0, [pc, #24]	; (8001c3c <LCD_Reset+0x24>)
 8001c22:	f000 fc34 	bl	800248e <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001c26:	2032      	movs	r0, #50	; 0x32
 8001c28:	f000 f964 	bl	8001ef4 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RESET_PORT, LCD_RESET_PIN, GPIO_PIN_SET);
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	2101      	movs	r1, #1
 8001c30:	4802      	ldr	r0, [pc, #8]	; (8001c3c <LCD_Reset+0x24>)
 8001c32:	f000 fc2c 	bl	800248e <HAL_GPIO_WritePin>
}
 8001c36:	bf00      	nop
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	40010800 	.word	0x40010800

08001c40 <LCD_Set_Postion>:
/**
 * Set LCD cursor position.
 * @param PosX X Position
 * @param PosY Y Position
 */
void LCD_Set_Postion(uint8_t PosX, uint8_t PosY) {
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	4603      	mov	r3, r0
 8001c48:	460a      	mov	r2, r1
 8001c4a:	71fb      	strb	r3, [r7, #7]
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	71bb      	strb	r3, [r7, #6]
	LCD_Write_Command(0x40 | PosY);
 8001c50:	79bb      	ldrb	r3, [r7, #6]
 8001c52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f000 f873 	bl	8001d44 <LCD_Write_Command>
	LCD_Write_Command(0x80 | PosX);
 8001c5e:	79fb      	ldrb	r3, [r7, #7]
 8001c60:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	4618      	mov	r0, r3
 8001c68:	f000 f86c 	bl	8001d44 <LCD_Write_Command>
}
 8001c6c:	bf00      	nop
 8001c6e:	3708      	adds	r7, #8
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}

08001c74 <LCD_Clear>:

/**
 * Clear all contents on LCD.
 */
void LCD_Clear(void) {
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
	uint8_t t;
	uint8_t k;
	LCD_Set_Postion(0, 0);
 8001c7a:	2100      	movs	r1, #0
 8001c7c:	2000      	movs	r0, #0
 8001c7e:	f7ff ffdf 	bl	8001c40 <LCD_Set_Postion>
	for (t = 0; t < 6; t++) {
 8001c82:	2300      	movs	r3, #0
 8001c84:	71fb      	strb	r3, [r7, #7]
 8001c86:	e00e      	b.n	8001ca6 <LCD_Clear+0x32>
		for (k = 0; k < 84; k++) {
 8001c88:	2300      	movs	r3, #0
 8001c8a:	71bb      	strb	r3, [r7, #6]
 8001c8c:	e005      	b.n	8001c9a <LCD_Clear+0x26>
			LCD_Write_Data(0x00);
 8001c8e:	2000      	movs	r0, #0
 8001c90:	f000 f880 	bl	8001d94 <LCD_Write_Data>
		for (k = 0; k < 84; k++) {
 8001c94:	79bb      	ldrb	r3, [r7, #6]
 8001c96:	3301      	adds	r3, #1
 8001c98:	71bb      	strb	r3, [r7, #6]
 8001c9a:	79bb      	ldrb	r3, [r7, #6]
 8001c9c:	2b53      	cmp	r3, #83	; 0x53
 8001c9e:	d9f6      	bls.n	8001c8e <LCD_Clear+0x1a>
	for (t = 0; t < 6; t++) {
 8001ca0:	79fb      	ldrb	r3, [r7, #7]
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	71fb      	strb	r3, [r7, #7]
 8001ca6:	79fb      	ldrb	r3, [r7, #7]
 8001ca8:	2b05      	cmp	r3, #5
 8001caa:	d9ed      	bls.n	8001c88 <LCD_Clear+0x14>
		}
	}
}
 8001cac:	bf00      	nop
 8001cae:	bf00      	nop
 8001cb0:	3708      	adds	r7, #8
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
	...

08001cb8 <LCD_Write_Char>:

/**
 * Write a single char to LCD.
 * @param ch char to write.
 */
void LCD_Write_Char(uint8_t ch) {
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	71fb      	strb	r3, [r7, #7]
	uint8_t line;
	ch -= 32;
 8001cc2:	79fb      	ldrb	r3, [r7, #7]
 8001cc4:	3b20      	subs	r3, #32
 8001cc6:	71fb      	strb	r3, [r7, #7]
	for (line = 0; line < 6; line++)
 8001cc8:	2300      	movs	r3, #0
 8001cca:	73fb      	strb	r3, [r7, #15]
 8001ccc:	e00f      	b.n	8001cee <LCD_Write_Char+0x36>
		LCD_Write_Data(font6x8[ch][line]);
 8001cce:	79fa      	ldrb	r2, [r7, #7]
 8001cd0:	7bf9      	ldrb	r1, [r7, #15]
 8001cd2:	480b      	ldr	r0, [pc, #44]	; (8001d00 <LCD_Write_Char+0x48>)
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	4413      	add	r3, r2
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	4403      	add	r3, r0
 8001cde:	440b      	add	r3, r1
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f000 f856 	bl	8001d94 <LCD_Write_Data>
	for (line = 0; line < 6; line++)
 8001ce8:	7bfb      	ldrb	r3, [r7, #15]
 8001cea:	3301      	adds	r3, #1
 8001cec:	73fb      	strb	r3, [r7, #15]
 8001cee:	7bfb      	ldrb	r3, [r7, #15]
 8001cf0:	2b05      	cmp	r3, #5
 8001cf2:	d9ec      	bls.n	8001cce <LCD_Write_Char+0x16>
}
 8001cf4:	bf00      	nop
 8001cf6:	bf00      	nop
 8001cf8:	3710      	adds	r7, #16
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	08007ecc 	.word	0x08007ecc

08001d04 <LCD_Write_String>:
 * Write a string to LCD.
 * @param PosX X start point
 * @param PosY Y start point
 * @param str  string to write.
 */
void LCD_Write_String(uint8_t PosX, uint8_t PosY, char *str) {
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	603a      	str	r2, [r7, #0]
 8001d0e:	71fb      	strb	r3, [r7, #7]
 8001d10:	460b      	mov	r3, r1
 8001d12:	71bb      	strb	r3, [r7, #6]
	LCD_Set_Postion(PosX, PosY);
 8001d14:	79ba      	ldrb	r2, [r7, #6]
 8001d16:	79fb      	ldrb	r3, [r7, #7]
 8001d18:	4611      	mov	r1, r2
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7ff ff90 	bl	8001c40 <LCD_Set_Postion>
	while (*str) {
 8001d20:	e007      	b.n	8001d32 <LCD_Write_String+0x2e>
		LCD_Write_Char(*str);
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7ff ffc6 	bl	8001cb8 <LCD_Write_Char>
		str++;
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	3301      	adds	r3, #1
 8001d30:	603b      	str	r3, [r7, #0]
	while (*str) {
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d1f3      	bne.n	8001d22 <LCD_Write_String+0x1e>
	}
}
 8001d3a:	bf00      	nop
 8001d3c:	bf00      	nop
 8001d3e:	3708      	adds	r7, #8
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}

08001d44 <LCD_Write_Command>:

/**
 * Write LCD command to SPI
 * @param cmd command to write.
 */
void LCD_Write_Command(uint8_t cmd) {
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_CE_PORT, LCD_CE_PIN, GPIO_PIN_RESET);
 8001d4e:	2200      	movs	r2, #0
 8001d50:	2108      	movs	r1, #8
 8001d52:	480e      	ldr	r0, [pc, #56]	; (8001d8c <LCD_Write_Command+0x48>)
 8001d54:	f000 fb9b 	bl	800248e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 8001d58:	2200      	movs	r2, #0
 8001d5a:	2110      	movs	r1, #16
 8001d5c:	480b      	ldr	r0, [pc, #44]	; (8001d8c <LCD_Write_Command+0x48>)
 8001d5e:	f000 fb96 	bl	800248e <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&LCD_SPI_INTERFACE, &cmd, 0x01, 1000);
 8001d62:	1df9      	adds	r1, r7, #7
 8001d64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d68:	2201      	movs	r2, #1
 8001d6a:	4809      	ldr	r0, [pc, #36]	; (8001d90 <LCD_Write_Command+0x4c>)
 8001d6c:	f002 f84a 	bl	8003e04 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CE_PORT, LCD_CE_PIN, GPIO_PIN_SET);
 8001d70:	2201      	movs	r2, #1
 8001d72:	2108      	movs	r1, #8
 8001d74:	4805      	ldr	r0, [pc, #20]	; (8001d8c <LCD_Write_Command+0x48>)
 8001d76:	f000 fb8a 	bl	800248e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	2110      	movs	r1, #16
 8001d7e:	4803      	ldr	r0, [pc, #12]	; (8001d8c <LCD_Write_Command+0x48>)
 8001d80:	f000 fb85 	bl	800248e <HAL_GPIO_WritePin>
}
 8001d84:	bf00      	nop
 8001d86:	3708      	adds	r7, #8
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	40010800 	.word	0x40010800
 8001d90:	2000026c 	.word	0x2000026c

08001d94 <LCD_Write_Data>:

/**
 * Write LCD data to SPI
 * @param data data to write.
 */
void LCD_Write_Data(uint8_t data) {
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_CE_PORT, LCD_CE_PIN, GPIO_PIN_RESET);
 8001d9e:	2200      	movs	r2, #0
 8001da0:	2108      	movs	r1, #8
 8001da2:	480e      	ldr	r0, [pc, #56]	; (8001ddc <LCD_Write_Data+0x48>)
 8001da4:	f000 fb73 	bl	800248e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8001da8:	2201      	movs	r2, #1
 8001daa:	2110      	movs	r1, #16
 8001dac:	480b      	ldr	r0, [pc, #44]	; (8001ddc <LCD_Write_Data+0x48>)
 8001dae:	f000 fb6e 	bl	800248e <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&LCD_SPI_INTERFACE, &data, 0x01, 1000);
 8001db2:	1df9      	adds	r1, r7, #7
 8001db4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001db8:	2201      	movs	r2, #1
 8001dba:	4809      	ldr	r0, [pc, #36]	; (8001de0 <LCD_Write_Data+0x4c>)
 8001dbc:	f002 f822 	bl	8003e04 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CE_PORT, LCD_CE_PIN, GPIO_PIN_SET);
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	2108      	movs	r1, #8
 8001dc4:	4805      	ldr	r0, [pc, #20]	; (8001ddc <LCD_Write_Data+0x48>)
 8001dc6:	f000 fb62 	bl	800248e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 8001dca:	2200      	movs	r2, #0
 8001dcc:	2110      	movs	r1, #16
 8001dce:	4803      	ldr	r0, [pc, #12]	; (8001ddc <LCD_Write_Data+0x48>)
 8001dd0:	f000 fb5d 	bl	800248e <HAL_GPIO_WritePin>
}
 8001dd4:	bf00      	nop
 8001dd6:	3708      	adds	r7, #8
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	40010800 	.word	0x40010800
 8001de0:	2000026c 	.word	0x2000026c

08001de4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001de4:	480c      	ldr	r0, [pc, #48]	; (8001e18 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001de6:	490d      	ldr	r1, [pc, #52]	; (8001e1c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001de8:	4a0d      	ldr	r2, [pc, #52]	; (8001e20 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001dea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dec:	e002      	b.n	8001df4 <LoopCopyDataInit>

08001dee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001df0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001df2:	3304      	adds	r3, #4

08001df4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001df4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001df6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001df8:	d3f9      	bcc.n	8001dee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dfa:	4a0a      	ldr	r2, [pc, #40]	; (8001e24 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001dfc:	4c0a      	ldr	r4, [pc, #40]	; (8001e28 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001dfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e00:	e001      	b.n	8001e06 <LoopFillZerobss>

08001e02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e04:	3204      	adds	r2, #4

08001e06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e08:	d3fb      	bcc.n	8001e02 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001e0a:	f7ff feeb 	bl	8001be4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e0e:	f003 f90f 	bl	8005030 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e12:	f7ff fa61 	bl	80012d8 <main>
  bx lr
 8001e16:	4770      	bx	lr
  ldr r0, =_sdata
 8001e18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e1c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001e20:	080084d4 	.word	0x080084d4
  ldr r2, =_sbss
 8001e24:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001e28:	20000388 	.word	0x20000388

08001e2c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e2c:	e7fe      	b.n	8001e2c <ADC1_2_IRQHandler>
	...

08001e30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e34:	4b08      	ldr	r3, [pc, #32]	; (8001e58 <HAL_Init+0x28>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a07      	ldr	r2, [pc, #28]	; (8001e58 <HAL_Init+0x28>)
 8001e3a:	f043 0310 	orr.w	r3, r3, #16
 8001e3e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e40:	2003      	movs	r0, #3
 8001e42:	f000 f947 	bl	80020d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e46:	2000      	movs	r0, #0
 8001e48:	f000 f808 	bl	8001e5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e4c:	f7ff fcf0 	bl	8001830 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e50:	2300      	movs	r3, #0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	40022000 	.word	0x40022000

08001e5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e64:	4b12      	ldr	r3, [pc, #72]	; (8001eb0 <HAL_InitTick+0x54>)
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	4b12      	ldr	r3, [pc, #72]	; (8001eb4 <HAL_InitTick+0x58>)
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e72:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f000 f95f 	bl	800213e <HAL_SYSTICK_Config>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e00e      	b.n	8001ea8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2b0f      	cmp	r3, #15
 8001e8e:	d80a      	bhi.n	8001ea6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e90:	2200      	movs	r2, #0
 8001e92:	6879      	ldr	r1, [r7, #4]
 8001e94:	f04f 30ff 	mov.w	r0, #4294967295
 8001e98:	f000 f927 	bl	80020ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e9c:	4a06      	ldr	r2, [pc, #24]	; (8001eb8 <HAL_InitTick+0x5c>)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	e000      	b.n	8001ea8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3708      	adds	r7, #8
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	20000000 	.word	0x20000000
 8001eb4:	20000008 	.word	0x20000008
 8001eb8:	20000004 	.word	0x20000004

08001ebc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ec0:	4b05      	ldr	r3, [pc, #20]	; (8001ed8 <HAL_IncTick+0x1c>)
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	4b05      	ldr	r3, [pc, #20]	; (8001edc <HAL_IncTick+0x20>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4413      	add	r3, r2
 8001ecc:	4a03      	ldr	r2, [pc, #12]	; (8001edc <HAL_IncTick+0x20>)
 8001ece:	6013      	str	r3, [r2, #0]
}
 8001ed0:	bf00      	nop
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bc80      	pop	{r7}
 8001ed6:	4770      	bx	lr
 8001ed8:	20000008 	.word	0x20000008
 8001edc:	20000374 	.word	0x20000374

08001ee0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ee4:	4b02      	ldr	r3, [pc, #8]	; (8001ef0 <HAL_GetTick+0x10>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bc80      	pop	{r7}
 8001eee:	4770      	bx	lr
 8001ef0:	20000374 	.word	0x20000374

08001ef4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b084      	sub	sp, #16
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001efc:	f7ff fff0 	bl	8001ee0 <HAL_GetTick>
 8001f00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f0c:	d005      	beq.n	8001f1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f0e:	4b0a      	ldr	r3, [pc, #40]	; (8001f38 <HAL_Delay+0x44>)
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	461a      	mov	r2, r3
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	4413      	add	r3, r2
 8001f18:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f1a:	bf00      	nop
 8001f1c:	f7ff ffe0 	bl	8001ee0 <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	68fa      	ldr	r2, [r7, #12]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d8f7      	bhi.n	8001f1c <HAL_Delay+0x28>
  {
  }
}
 8001f2c:	bf00      	nop
 8001f2e:	bf00      	nop
 8001f30:	3710      	adds	r7, #16
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	20000008 	.word	0x20000008

08001f3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b085      	sub	sp, #20
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f003 0307 	and.w	r3, r3, #7
 8001f4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f4c:	4b0c      	ldr	r3, [pc, #48]	; (8001f80 <__NVIC_SetPriorityGrouping+0x44>)
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f52:	68ba      	ldr	r2, [r7, #8]
 8001f54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f58:	4013      	ands	r3, r2
 8001f5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f6e:	4a04      	ldr	r2, [pc, #16]	; (8001f80 <__NVIC_SetPriorityGrouping+0x44>)
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	60d3      	str	r3, [r2, #12]
}
 8001f74:	bf00      	nop
 8001f76:	3714      	adds	r7, #20
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bc80      	pop	{r7}
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	e000ed00 	.word	0xe000ed00

08001f84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f88:	4b04      	ldr	r3, [pc, #16]	; (8001f9c <__NVIC_GetPriorityGrouping+0x18>)
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	0a1b      	lsrs	r3, r3, #8
 8001f8e:	f003 0307 	and.w	r3, r3, #7
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bc80      	pop	{r7}
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	e000ed00 	.word	0xe000ed00

08001fa0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	db0b      	blt.n	8001fca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fb2:	79fb      	ldrb	r3, [r7, #7]
 8001fb4:	f003 021f 	and.w	r2, r3, #31
 8001fb8:	4906      	ldr	r1, [pc, #24]	; (8001fd4 <__NVIC_EnableIRQ+0x34>)
 8001fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fbe:	095b      	lsrs	r3, r3, #5
 8001fc0:	2001      	movs	r0, #1
 8001fc2:	fa00 f202 	lsl.w	r2, r0, r2
 8001fc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fca:	bf00      	nop
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bc80      	pop	{r7}
 8001fd2:	4770      	bx	lr
 8001fd4:	e000e100 	.word	0xe000e100

08001fd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	4603      	mov	r3, r0
 8001fe0:	6039      	str	r1, [r7, #0]
 8001fe2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fe4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	db0a      	blt.n	8002002 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	b2da      	uxtb	r2, r3
 8001ff0:	490c      	ldr	r1, [pc, #48]	; (8002024 <__NVIC_SetPriority+0x4c>)
 8001ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff6:	0112      	lsls	r2, r2, #4
 8001ff8:	b2d2      	uxtb	r2, r2
 8001ffa:	440b      	add	r3, r1
 8001ffc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002000:	e00a      	b.n	8002018 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	b2da      	uxtb	r2, r3
 8002006:	4908      	ldr	r1, [pc, #32]	; (8002028 <__NVIC_SetPriority+0x50>)
 8002008:	79fb      	ldrb	r3, [r7, #7]
 800200a:	f003 030f 	and.w	r3, r3, #15
 800200e:	3b04      	subs	r3, #4
 8002010:	0112      	lsls	r2, r2, #4
 8002012:	b2d2      	uxtb	r2, r2
 8002014:	440b      	add	r3, r1
 8002016:	761a      	strb	r2, [r3, #24]
}
 8002018:	bf00      	nop
 800201a:	370c      	adds	r7, #12
 800201c:	46bd      	mov	sp, r7
 800201e:	bc80      	pop	{r7}
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	e000e100 	.word	0xe000e100
 8002028:	e000ed00 	.word	0xe000ed00

0800202c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800202c:	b480      	push	{r7}
 800202e:	b089      	sub	sp, #36	; 0x24
 8002030:	af00      	add	r7, sp, #0
 8002032:	60f8      	str	r0, [r7, #12]
 8002034:	60b9      	str	r1, [r7, #8]
 8002036:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	f003 0307 	and.w	r3, r3, #7
 800203e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	f1c3 0307 	rsb	r3, r3, #7
 8002046:	2b04      	cmp	r3, #4
 8002048:	bf28      	it	cs
 800204a:	2304      	movcs	r3, #4
 800204c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	3304      	adds	r3, #4
 8002052:	2b06      	cmp	r3, #6
 8002054:	d902      	bls.n	800205c <NVIC_EncodePriority+0x30>
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	3b03      	subs	r3, #3
 800205a:	e000      	b.n	800205e <NVIC_EncodePriority+0x32>
 800205c:	2300      	movs	r3, #0
 800205e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002060:	f04f 32ff 	mov.w	r2, #4294967295
 8002064:	69bb      	ldr	r3, [r7, #24]
 8002066:	fa02 f303 	lsl.w	r3, r2, r3
 800206a:	43da      	mvns	r2, r3
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	401a      	ands	r2, r3
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002074:	f04f 31ff 	mov.w	r1, #4294967295
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	fa01 f303 	lsl.w	r3, r1, r3
 800207e:	43d9      	mvns	r1, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002084:	4313      	orrs	r3, r2
         );
}
 8002086:	4618      	mov	r0, r3
 8002088:	3724      	adds	r7, #36	; 0x24
 800208a:	46bd      	mov	sp, r7
 800208c:	bc80      	pop	{r7}
 800208e:	4770      	bx	lr

08002090 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	3b01      	subs	r3, #1
 800209c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020a0:	d301      	bcc.n	80020a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020a2:	2301      	movs	r3, #1
 80020a4:	e00f      	b.n	80020c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020a6:	4a0a      	ldr	r2, [pc, #40]	; (80020d0 <SysTick_Config+0x40>)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	3b01      	subs	r3, #1
 80020ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020ae:	210f      	movs	r1, #15
 80020b0:	f04f 30ff 	mov.w	r0, #4294967295
 80020b4:	f7ff ff90 	bl	8001fd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020b8:	4b05      	ldr	r3, [pc, #20]	; (80020d0 <SysTick_Config+0x40>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020be:	4b04      	ldr	r3, [pc, #16]	; (80020d0 <SysTick_Config+0x40>)
 80020c0:	2207      	movs	r2, #7
 80020c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	e000e010 	.word	0xe000e010

080020d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f7ff ff2d 	bl	8001f3c <__NVIC_SetPriorityGrouping>
}
 80020e2:	bf00      	nop
 80020e4:	3708      	adds	r7, #8
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}

080020ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020ea:	b580      	push	{r7, lr}
 80020ec:	b086      	sub	sp, #24
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	4603      	mov	r3, r0
 80020f2:	60b9      	str	r1, [r7, #8]
 80020f4:	607a      	str	r2, [r7, #4]
 80020f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020f8:	2300      	movs	r3, #0
 80020fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020fc:	f7ff ff42 	bl	8001f84 <__NVIC_GetPriorityGrouping>
 8002100:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	68b9      	ldr	r1, [r7, #8]
 8002106:	6978      	ldr	r0, [r7, #20]
 8002108:	f7ff ff90 	bl	800202c <NVIC_EncodePriority>
 800210c:	4602      	mov	r2, r0
 800210e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002112:	4611      	mov	r1, r2
 8002114:	4618      	mov	r0, r3
 8002116:	f7ff ff5f 	bl	8001fd8 <__NVIC_SetPriority>
}
 800211a:	bf00      	nop
 800211c:	3718      	adds	r7, #24
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}

08002122 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002122:	b580      	push	{r7, lr}
 8002124:	b082      	sub	sp, #8
 8002126:	af00      	add	r7, sp, #0
 8002128:	4603      	mov	r3, r0
 800212a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800212c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002130:	4618      	mov	r0, r3
 8002132:	f7ff ff35 	bl	8001fa0 <__NVIC_EnableIRQ>
}
 8002136:	bf00      	nop
 8002138:	3708      	adds	r7, #8
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}

0800213e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800213e:	b580      	push	{r7, lr}
 8002140:	b082      	sub	sp, #8
 8002142:	af00      	add	r7, sp, #0
 8002144:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f7ff ffa2 	bl	8002090 <SysTick_Config>
 800214c:	4603      	mov	r3, r0
}
 800214e:	4618      	mov	r0, r3
 8002150:	3708      	adds	r7, #8
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
	...

08002158 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002158:	b480      	push	{r7}
 800215a:	b08b      	sub	sp, #44	; 0x2c
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002162:	2300      	movs	r3, #0
 8002164:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002166:	2300      	movs	r3, #0
 8002168:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800216a:	e169      	b.n	8002440 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800216c:	2201      	movs	r2, #1
 800216e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	69fa      	ldr	r2, [r7, #28]
 800217c:	4013      	ands	r3, r2
 800217e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	429a      	cmp	r2, r3
 8002186:	f040 8158 	bne.w	800243a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	4a9a      	ldr	r2, [pc, #616]	; (80023f8 <HAL_GPIO_Init+0x2a0>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d05e      	beq.n	8002252 <HAL_GPIO_Init+0xfa>
 8002194:	4a98      	ldr	r2, [pc, #608]	; (80023f8 <HAL_GPIO_Init+0x2a0>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d875      	bhi.n	8002286 <HAL_GPIO_Init+0x12e>
 800219a:	4a98      	ldr	r2, [pc, #608]	; (80023fc <HAL_GPIO_Init+0x2a4>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d058      	beq.n	8002252 <HAL_GPIO_Init+0xfa>
 80021a0:	4a96      	ldr	r2, [pc, #600]	; (80023fc <HAL_GPIO_Init+0x2a4>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d86f      	bhi.n	8002286 <HAL_GPIO_Init+0x12e>
 80021a6:	4a96      	ldr	r2, [pc, #600]	; (8002400 <HAL_GPIO_Init+0x2a8>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d052      	beq.n	8002252 <HAL_GPIO_Init+0xfa>
 80021ac:	4a94      	ldr	r2, [pc, #592]	; (8002400 <HAL_GPIO_Init+0x2a8>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d869      	bhi.n	8002286 <HAL_GPIO_Init+0x12e>
 80021b2:	4a94      	ldr	r2, [pc, #592]	; (8002404 <HAL_GPIO_Init+0x2ac>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d04c      	beq.n	8002252 <HAL_GPIO_Init+0xfa>
 80021b8:	4a92      	ldr	r2, [pc, #584]	; (8002404 <HAL_GPIO_Init+0x2ac>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d863      	bhi.n	8002286 <HAL_GPIO_Init+0x12e>
 80021be:	4a92      	ldr	r2, [pc, #584]	; (8002408 <HAL_GPIO_Init+0x2b0>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d046      	beq.n	8002252 <HAL_GPIO_Init+0xfa>
 80021c4:	4a90      	ldr	r2, [pc, #576]	; (8002408 <HAL_GPIO_Init+0x2b0>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d85d      	bhi.n	8002286 <HAL_GPIO_Init+0x12e>
 80021ca:	2b12      	cmp	r3, #18
 80021cc:	d82a      	bhi.n	8002224 <HAL_GPIO_Init+0xcc>
 80021ce:	2b12      	cmp	r3, #18
 80021d0:	d859      	bhi.n	8002286 <HAL_GPIO_Init+0x12e>
 80021d2:	a201      	add	r2, pc, #4	; (adr r2, 80021d8 <HAL_GPIO_Init+0x80>)
 80021d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021d8:	08002253 	.word	0x08002253
 80021dc:	0800222d 	.word	0x0800222d
 80021e0:	0800223f 	.word	0x0800223f
 80021e4:	08002281 	.word	0x08002281
 80021e8:	08002287 	.word	0x08002287
 80021ec:	08002287 	.word	0x08002287
 80021f0:	08002287 	.word	0x08002287
 80021f4:	08002287 	.word	0x08002287
 80021f8:	08002287 	.word	0x08002287
 80021fc:	08002287 	.word	0x08002287
 8002200:	08002287 	.word	0x08002287
 8002204:	08002287 	.word	0x08002287
 8002208:	08002287 	.word	0x08002287
 800220c:	08002287 	.word	0x08002287
 8002210:	08002287 	.word	0x08002287
 8002214:	08002287 	.word	0x08002287
 8002218:	08002287 	.word	0x08002287
 800221c:	08002235 	.word	0x08002235
 8002220:	08002249 	.word	0x08002249
 8002224:	4a79      	ldr	r2, [pc, #484]	; (800240c <HAL_GPIO_Init+0x2b4>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d013      	beq.n	8002252 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800222a:	e02c      	b.n	8002286 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	623b      	str	r3, [r7, #32]
          break;
 8002232:	e029      	b.n	8002288 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	3304      	adds	r3, #4
 800223a:	623b      	str	r3, [r7, #32]
          break;
 800223c:	e024      	b.n	8002288 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	3308      	adds	r3, #8
 8002244:	623b      	str	r3, [r7, #32]
          break;
 8002246:	e01f      	b.n	8002288 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	330c      	adds	r3, #12
 800224e:	623b      	str	r3, [r7, #32]
          break;
 8002250:	e01a      	b.n	8002288 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d102      	bne.n	8002260 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800225a:	2304      	movs	r3, #4
 800225c:	623b      	str	r3, [r7, #32]
          break;
 800225e:	e013      	b.n	8002288 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	2b01      	cmp	r3, #1
 8002266:	d105      	bne.n	8002274 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002268:	2308      	movs	r3, #8
 800226a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	69fa      	ldr	r2, [r7, #28]
 8002270:	611a      	str	r2, [r3, #16]
          break;
 8002272:	e009      	b.n	8002288 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002274:	2308      	movs	r3, #8
 8002276:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	69fa      	ldr	r2, [r7, #28]
 800227c:	615a      	str	r2, [r3, #20]
          break;
 800227e:	e003      	b.n	8002288 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002280:	2300      	movs	r3, #0
 8002282:	623b      	str	r3, [r7, #32]
          break;
 8002284:	e000      	b.n	8002288 <HAL_GPIO_Init+0x130>
          break;
 8002286:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002288:	69bb      	ldr	r3, [r7, #24]
 800228a:	2bff      	cmp	r3, #255	; 0xff
 800228c:	d801      	bhi.n	8002292 <HAL_GPIO_Init+0x13a>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	e001      	b.n	8002296 <HAL_GPIO_Init+0x13e>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	3304      	adds	r3, #4
 8002296:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	2bff      	cmp	r3, #255	; 0xff
 800229c:	d802      	bhi.n	80022a4 <HAL_GPIO_Init+0x14c>
 800229e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	e002      	b.n	80022aa <HAL_GPIO_Init+0x152>
 80022a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a6:	3b08      	subs	r3, #8
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	210f      	movs	r1, #15
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	fa01 f303 	lsl.w	r3, r1, r3
 80022b8:	43db      	mvns	r3, r3
 80022ba:	401a      	ands	r2, r3
 80022bc:	6a39      	ldr	r1, [r7, #32]
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	fa01 f303 	lsl.w	r3, r1, r3
 80022c4:	431a      	orrs	r2, r3
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	f000 80b1 	beq.w	800243a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80022d8:	4b4d      	ldr	r3, [pc, #308]	; (8002410 <HAL_GPIO_Init+0x2b8>)
 80022da:	699b      	ldr	r3, [r3, #24]
 80022dc:	4a4c      	ldr	r2, [pc, #304]	; (8002410 <HAL_GPIO_Init+0x2b8>)
 80022de:	f043 0301 	orr.w	r3, r3, #1
 80022e2:	6193      	str	r3, [r2, #24]
 80022e4:	4b4a      	ldr	r3, [pc, #296]	; (8002410 <HAL_GPIO_Init+0x2b8>)
 80022e6:	699b      	ldr	r3, [r3, #24]
 80022e8:	f003 0301 	and.w	r3, r3, #1
 80022ec:	60bb      	str	r3, [r7, #8]
 80022ee:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80022f0:	4a48      	ldr	r2, [pc, #288]	; (8002414 <HAL_GPIO_Init+0x2bc>)
 80022f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f4:	089b      	lsrs	r3, r3, #2
 80022f6:	3302      	adds	r3, #2
 80022f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022fc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80022fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002300:	f003 0303 	and.w	r3, r3, #3
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	220f      	movs	r2, #15
 8002308:	fa02 f303 	lsl.w	r3, r2, r3
 800230c:	43db      	mvns	r3, r3
 800230e:	68fa      	ldr	r2, [r7, #12]
 8002310:	4013      	ands	r3, r2
 8002312:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	4a40      	ldr	r2, [pc, #256]	; (8002418 <HAL_GPIO_Init+0x2c0>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d013      	beq.n	8002344 <HAL_GPIO_Init+0x1ec>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	4a3f      	ldr	r2, [pc, #252]	; (800241c <HAL_GPIO_Init+0x2c4>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d00d      	beq.n	8002340 <HAL_GPIO_Init+0x1e8>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	4a3e      	ldr	r2, [pc, #248]	; (8002420 <HAL_GPIO_Init+0x2c8>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d007      	beq.n	800233c <HAL_GPIO_Init+0x1e4>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	4a3d      	ldr	r2, [pc, #244]	; (8002424 <HAL_GPIO_Init+0x2cc>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d101      	bne.n	8002338 <HAL_GPIO_Init+0x1e0>
 8002334:	2303      	movs	r3, #3
 8002336:	e006      	b.n	8002346 <HAL_GPIO_Init+0x1ee>
 8002338:	2304      	movs	r3, #4
 800233a:	e004      	b.n	8002346 <HAL_GPIO_Init+0x1ee>
 800233c:	2302      	movs	r3, #2
 800233e:	e002      	b.n	8002346 <HAL_GPIO_Init+0x1ee>
 8002340:	2301      	movs	r3, #1
 8002342:	e000      	b.n	8002346 <HAL_GPIO_Init+0x1ee>
 8002344:	2300      	movs	r3, #0
 8002346:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002348:	f002 0203 	and.w	r2, r2, #3
 800234c:	0092      	lsls	r2, r2, #2
 800234e:	4093      	lsls	r3, r2
 8002350:	68fa      	ldr	r2, [r7, #12]
 8002352:	4313      	orrs	r3, r2
 8002354:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002356:	492f      	ldr	r1, [pc, #188]	; (8002414 <HAL_GPIO_Init+0x2bc>)
 8002358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235a:	089b      	lsrs	r3, r3, #2
 800235c:	3302      	adds	r3, #2
 800235e:	68fa      	ldr	r2, [r7, #12]
 8002360:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d006      	beq.n	800237e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002370:	4b2d      	ldr	r3, [pc, #180]	; (8002428 <HAL_GPIO_Init+0x2d0>)
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	492c      	ldr	r1, [pc, #176]	; (8002428 <HAL_GPIO_Init+0x2d0>)
 8002376:	69bb      	ldr	r3, [r7, #24]
 8002378:	4313      	orrs	r3, r2
 800237a:	600b      	str	r3, [r1, #0]
 800237c:	e006      	b.n	800238c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800237e:	4b2a      	ldr	r3, [pc, #168]	; (8002428 <HAL_GPIO_Init+0x2d0>)
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	69bb      	ldr	r3, [r7, #24]
 8002384:	43db      	mvns	r3, r3
 8002386:	4928      	ldr	r1, [pc, #160]	; (8002428 <HAL_GPIO_Init+0x2d0>)
 8002388:	4013      	ands	r3, r2
 800238a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002394:	2b00      	cmp	r3, #0
 8002396:	d006      	beq.n	80023a6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002398:	4b23      	ldr	r3, [pc, #140]	; (8002428 <HAL_GPIO_Init+0x2d0>)
 800239a:	685a      	ldr	r2, [r3, #4]
 800239c:	4922      	ldr	r1, [pc, #136]	; (8002428 <HAL_GPIO_Init+0x2d0>)
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	604b      	str	r3, [r1, #4]
 80023a4:	e006      	b.n	80023b4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80023a6:	4b20      	ldr	r3, [pc, #128]	; (8002428 <HAL_GPIO_Init+0x2d0>)
 80023a8:	685a      	ldr	r2, [r3, #4]
 80023aa:	69bb      	ldr	r3, [r7, #24]
 80023ac:	43db      	mvns	r3, r3
 80023ae:	491e      	ldr	r1, [pc, #120]	; (8002428 <HAL_GPIO_Init+0x2d0>)
 80023b0:	4013      	ands	r3, r2
 80023b2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d006      	beq.n	80023ce <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80023c0:	4b19      	ldr	r3, [pc, #100]	; (8002428 <HAL_GPIO_Init+0x2d0>)
 80023c2:	689a      	ldr	r2, [r3, #8]
 80023c4:	4918      	ldr	r1, [pc, #96]	; (8002428 <HAL_GPIO_Init+0x2d0>)
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	608b      	str	r3, [r1, #8]
 80023cc:	e006      	b.n	80023dc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80023ce:	4b16      	ldr	r3, [pc, #88]	; (8002428 <HAL_GPIO_Init+0x2d0>)
 80023d0:	689a      	ldr	r2, [r3, #8]
 80023d2:	69bb      	ldr	r3, [r7, #24]
 80023d4:	43db      	mvns	r3, r3
 80023d6:	4914      	ldr	r1, [pc, #80]	; (8002428 <HAL_GPIO_Init+0x2d0>)
 80023d8:	4013      	ands	r3, r2
 80023da:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d021      	beq.n	800242c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80023e8:	4b0f      	ldr	r3, [pc, #60]	; (8002428 <HAL_GPIO_Init+0x2d0>)
 80023ea:	68da      	ldr	r2, [r3, #12]
 80023ec:	490e      	ldr	r1, [pc, #56]	; (8002428 <HAL_GPIO_Init+0x2d0>)
 80023ee:	69bb      	ldr	r3, [r7, #24]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	60cb      	str	r3, [r1, #12]
 80023f4:	e021      	b.n	800243a <HAL_GPIO_Init+0x2e2>
 80023f6:	bf00      	nop
 80023f8:	10320000 	.word	0x10320000
 80023fc:	10310000 	.word	0x10310000
 8002400:	10220000 	.word	0x10220000
 8002404:	10210000 	.word	0x10210000
 8002408:	10120000 	.word	0x10120000
 800240c:	10110000 	.word	0x10110000
 8002410:	40021000 	.word	0x40021000
 8002414:	40010000 	.word	0x40010000
 8002418:	40010800 	.word	0x40010800
 800241c:	40010c00 	.word	0x40010c00
 8002420:	40011000 	.word	0x40011000
 8002424:	40011400 	.word	0x40011400
 8002428:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800242c:	4b0b      	ldr	r3, [pc, #44]	; (800245c <HAL_GPIO_Init+0x304>)
 800242e:	68da      	ldr	r2, [r3, #12]
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	43db      	mvns	r3, r3
 8002434:	4909      	ldr	r1, [pc, #36]	; (800245c <HAL_GPIO_Init+0x304>)
 8002436:	4013      	ands	r3, r2
 8002438:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800243a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243c:	3301      	adds	r3, #1
 800243e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002446:	fa22 f303 	lsr.w	r3, r2, r3
 800244a:	2b00      	cmp	r3, #0
 800244c:	f47f ae8e 	bne.w	800216c <HAL_GPIO_Init+0x14>
  }
}
 8002450:	bf00      	nop
 8002452:	bf00      	nop
 8002454:	372c      	adds	r7, #44	; 0x2c
 8002456:	46bd      	mov	sp, r7
 8002458:	bc80      	pop	{r7}
 800245a:	4770      	bx	lr
 800245c:	40010400 	.word	0x40010400

08002460 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002460:	b480      	push	{r7}
 8002462:	b085      	sub	sp, #20
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	460b      	mov	r3, r1
 800246a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	689a      	ldr	r2, [r3, #8]
 8002470:	887b      	ldrh	r3, [r7, #2]
 8002472:	4013      	ands	r3, r2
 8002474:	2b00      	cmp	r3, #0
 8002476:	d002      	beq.n	800247e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002478:	2301      	movs	r3, #1
 800247a:	73fb      	strb	r3, [r7, #15]
 800247c:	e001      	b.n	8002482 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800247e:	2300      	movs	r3, #0
 8002480:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002482:	7bfb      	ldrb	r3, [r7, #15]
}
 8002484:	4618      	mov	r0, r3
 8002486:	3714      	adds	r7, #20
 8002488:	46bd      	mov	sp, r7
 800248a:	bc80      	pop	{r7}
 800248c:	4770      	bx	lr

0800248e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800248e:	b480      	push	{r7}
 8002490:	b083      	sub	sp, #12
 8002492:	af00      	add	r7, sp, #0
 8002494:	6078      	str	r0, [r7, #4]
 8002496:	460b      	mov	r3, r1
 8002498:	807b      	strh	r3, [r7, #2]
 800249a:	4613      	mov	r3, r2
 800249c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800249e:	787b      	ldrb	r3, [r7, #1]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d003      	beq.n	80024ac <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024a4:	887a      	ldrh	r2, [r7, #2]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80024aa:	e003      	b.n	80024b4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80024ac:	887b      	ldrh	r3, [r7, #2]
 80024ae:	041a      	lsls	r2, r3, #16
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	611a      	str	r2, [r3, #16]
}
 80024b4:	bf00      	nop
 80024b6:	370c      	adds	r7, #12
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bc80      	pop	{r7}
 80024bc:	4770      	bx	lr
	...

080024c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	4603      	mov	r3, r0
 80024c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80024ca:	4b08      	ldr	r3, [pc, #32]	; (80024ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024cc:	695a      	ldr	r2, [r3, #20]
 80024ce:	88fb      	ldrh	r3, [r7, #6]
 80024d0:	4013      	ands	r3, r2
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d006      	beq.n	80024e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80024d6:	4a05      	ldr	r2, [pc, #20]	; (80024ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024d8:	88fb      	ldrh	r3, [r7, #6]
 80024da:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80024dc:	88fb      	ldrh	r3, [r7, #6]
 80024de:	4618      	mov	r0, r3
 80024e0:	f7ff f94a 	bl	8001778 <HAL_GPIO_EXTI_Callback>
  }
}
 80024e4:	bf00      	nop
 80024e6:	3708      	adds	r7, #8
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	40010400 	.word	0x40010400

080024f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d101      	bne.n	8002502 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e12b      	b.n	800275a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002508:	b2db      	uxtb	r3, r3
 800250a:	2b00      	cmp	r3, #0
 800250c:	d106      	bne.n	800251c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2200      	movs	r2, #0
 8002512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f7ff f9bc 	bl	8001894 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2224      	movs	r2, #36	; 0x24
 8002520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f022 0201 	bic.w	r2, r2, #1
 8002532:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002542:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002552:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002554:	f001 fba0 	bl	8003c98 <HAL_RCC_GetPCLK1Freq>
 8002558:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	4a81      	ldr	r2, [pc, #516]	; (8002764 <HAL_I2C_Init+0x274>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d807      	bhi.n	8002574 <HAL_I2C_Init+0x84>
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	4a80      	ldr	r2, [pc, #512]	; (8002768 <HAL_I2C_Init+0x278>)
 8002568:	4293      	cmp	r3, r2
 800256a:	bf94      	ite	ls
 800256c:	2301      	movls	r3, #1
 800256e:	2300      	movhi	r3, #0
 8002570:	b2db      	uxtb	r3, r3
 8002572:	e006      	b.n	8002582 <HAL_I2C_Init+0x92>
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	4a7d      	ldr	r2, [pc, #500]	; (800276c <HAL_I2C_Init+0x27c>)
 8002578:	4293      	cmp	r3, r2
 800257a:	bf94      	ite	ls
 800257c:	2301      	movls	r3, #1
 800257e:	2300      	movhi	r3, #0
 8002580:	b2db      	uxtb	r3, r3
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e0e7      	b.n	800275a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	4a78      	ldr	r2, [pc, #480]	; (8002770 <HAL_I2C_Init+0x280>)
 800258e:	fba2 2303 	umull	r2, r3, r2, r3
 8002592:	0c9b      	lsrs	r3, r3, #18
 8002594:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	68ba      	ldr	r2, [r7, #8]
 80025a6:	430a      	orrs	r2, r1
 80025a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	6a1b      	ldr	r3, [r3, #32]
 80025b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	4a6a      	ldr	r2, [pc, #424]	; (8002764 <HAL_I2C_Init+0x274>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d802      	bhi.n	80025c4 <HAL_I2C_Init+0xd4>
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	3301      	adds	r3, #1
 80025c2:	e009      	b.n	80025d8 <HAL_I2C_Init+0xe8>
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80025ca:	fb02 f303 	mul.w	r3, r2, r3
 80025ce:	4a69      	ldr	r2, [pc, #420]	; (8002774 <HAL_I2C_Init+0x284>)
 80025d0:	fba2 2303 	umull	r2, r3, r2, r3
 80025d4:	099b      	lsrs	r3, r3, #6
 80025d6:	3301      	adds	r3, #1
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	6812      	ldr	r2, [r2, #0]
 80025dc:	430b      	orrs	r3, r1
 80025de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	69db      	ldr	r3, [r3, #28]
 80025e6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80025ea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	495c      	ldr	r1, [pc, #368]	; (8002764 <HAL_I2C_Init+0x274>)
 80025f4:	428b      	cmp	r3, r1
 80025f6:	d819      	bhi.n	800262c <HAL_I2C_Init+0x13c>
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	1e59      	subs	r1, r3, #1
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	fbb1 f3f3 	udiv	r3, r1, r3
 8002606:	1c59      	adds	r1, r3, #1
 8002608:	f640 73fc 	movw	r3, #4092	; 0xffc
 800260c:	400b      	ands	r3, r1
 800260e:	2b00      	cmp	r3, #0
 8002610:	d00a      	beq.n	8002628 <HAL_I2C_Init+0x138>
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	1e59      	subs	r1, r3, #1
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	005b      	lsls	r3, r3, #1
 800261c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002620:	3301      	adds	r3, #1
 8002622:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002626:	e051      	b.n	80026cc <HAL_I2C_Init+0x1dc>
 8002628:	2304      	movs	r3, #4
 800262a:	e04f      	b.n	80026cc <HAL_I2C_Init+0x1dc>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d111      	bne.n	8002658 <HAL_I2C_Init+0x168>
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	1e58      	subs	r0, r3, #1
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6859      	ldr	r1, [r3, #4]
 800263c:	460b      	mov	r3, r1
 800263e:	005b      	lsls	r3, r3, #1
 8002640:	440b      	add	r3, r1
 8002642:	fbb0 f3f3 	udiv	r3, r0, r3
 8002646:	3301      	adds	r3, #1
 8002648:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800264c:	2b00      	cmp	r3, #0
 800264e:	bf0c      	ite	eq
 8002650:	2301      	moveq	r3, #1
 8002652:	2300      	movne	r3, #0
 8002654:	b2db      	uxtb	r3, r3
 8002656:	e012      	b.n	800267e <HAL_I2C_Init+0x18e>
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	1e58      	subs	r0, r3, #1
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6859      	ldr	r1, [r3, #4]
 8002660:	460b      	mov	r3, r1
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	440b      	add	r3, r1
 8002666:	0099      	lsls	r1, r3, #2
 8002668:	440b      	add	r3, r1
 800266a:	fbb0 f3f3 	udiv	r3, r0, r3
 800266e:	3301      	adds	r3, #1
 8002670:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002674:	2b00      	cmp	r3, #0
 8002676:	bf0c      	ite	eq
 8002678:	2301      	moveq	r3, #1
 800267a:	2300      	movne	r3, #0
 800267c:	b2db      	uxtb	r3, r3
 800267e:	2b00      	cmp	r3, #0
 8002680:	d001      	beq.n	8002686 <HAL_I2C_Init+0x196>
 8002682:	2301      	movs	r3, #1
 8002684:	e022      	b.n	80026cc <HAL_I2C_Init+0x1dc>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d10e      	bne.n	80026ac <HAL_I2C_Init+0x1bc>
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	1e58      	subs	r0, r3, #1
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6859      	ldr	r1, [r3, #4]
 8002696:	460b      	mov	r3, r1
 8002698:	005b      	lsls	r3, r3, #1
 800269a:	440b      	add	r3, r1
 800269c:	fbb0 f3f3 	udiv	r3, r0, r3
 80026a0:	3301      	adds	r3, #1
 80026a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026aa:	e00f      	b.n	80026cc <HAL_I2C_Init+0x1dc>
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	1e58      	subs	r0, r3, #1
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6859      	ldr	r1, [r3, #4]
 80026b4:	460b      	mov	r3, r1
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	440b      	add	r3, r1
 80026ba:	0099      	lsls	r1, r3, #2
 80026bc:	440b      	add	r3, r1
 80026be:	fbb0 f3f3 	udiv	r3, r0, r3
 80026c2:	3301      	adds	r3, #1
 80026c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026cc:	6879      	ldr	r1, [r7, #4]
 80026ce:	6809      	ldr	r1, [r1, #0]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	69da      	ldr	r2, [r3, #28]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6a1b      	ldr	r3, [r3, #32]
 80026e6:	431a      	orrs	r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	430a      	orrs	r2, r1
 80026ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80026fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	6911      	ldr	r1, [r2, #16]
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	68d2      	ldr	r2, [r2, #12]
 8002706:	4311      	orrs	r1, r2
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	6812      	ldr	r2, [r2, #0]
 800270c:	430b      	orrs	r3, r1
 800270e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	695a      	ldr	r2, [r3, #20]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	699b      	ldr	r3, [r3, #24]
 8002722:	431a      	orrs	r2, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	430a      	orrs	r2, r1
 800272a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f042 0201 	orr.w	r2, r2, #1
 800273a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2200      	movs	r2, #0
 8002740:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2220      	movs	r2, #32
 8002746:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2200      	movs	r2, #0
 800274e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2200      	movs	r2, #0
 8002754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002758:	2300      	movs	r3, #0
}
 800275a:	4618      	mov	r0, r3
 800275c:	3710      	adds	r7, #16
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	000186a0 	.word	0x000186a0
 8002768:	001e847f 	.word	0x001e847f
 800276c:	003d08ff 	.word	0x003d08ff
 8002770:	431bde83 	.word	0x431bde83
 8002774:	10624dd3 	.word	0x10624dd3

08002778 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b088      	sub	sp, #32
 800277c:	af02      	add	r7, sp, #8
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	4608      	mov	r0, r1
 8002782:	4611      	mov	r1, r2
 8002784:	461a      	mov	r2, r3
 8002786:	4603      	mov	r3, r0
 8002788:	817b      	strh	r3, [r7, #10]
 800278a:	460b      	mov	r3, r1
 800278c:	813b      	strh	r3, [r7, #8]
 800278e:	4613      	mov	r3, r2
 8002790:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002792:	f7ff fba5 	bl	8001ee0 <HAL_GetTick>
 8002796:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	2b20      	cmp	r3, #32
 80027a2:	f040 80d9 	bne.w	8002958 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	9300      	str	r3, [sp, #0]
 80027aa:	2319      	movs	r3, #25
 80027ac:	2201      	movs	r2, #1
 80027ae:	496d      	ldr	r1, [pc, #436]	; (8002964 <HAL_I2C_Mem_Write+0x1ec>)
 80027b0:	68f8      	ldr	r0, [r7, #12]
 80027b2:	f000 fcc1 	bl	8003138 <I2C_WaitOnFlagUntilTimeout>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d001      	beq.n	80027c0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80027bc:	2302      	movs	r3, #2
 80027be:	e0cc      	b.n	800295a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d101      	bne.n	80027ce <HAL_I2C_Mem_Write+0x56>
 80027ca:	2302      	movs	r3, #2
 80027cc:	e0c5      	b.n	800295a <HAL_I2C_Mem_Write+0x1e2>
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2201      	movs	r2, #1
 80027d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0301 	and.w	r3, r3, #1
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d007      	beq.n	80027f4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f042 0201 	orr.w	r2, r2, #1
 80027f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002802:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2221      	movs	r2, #33	; 0x21
 8002808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2240      	movs	r2, #64	; 0x40
 8002810:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2200      	movs	r2, #0
 8002818:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	6a3a      	ldr	r2, [r7, #32]
 800281e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002824:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800282a:	b29a      	uxth	r2, r3
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	4a4d      	ldr	r2, [pc, #308]	; (8002968 <HAL_I2C_Mem_Write+0x1f0>)
 8002834:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002836:	88f8      	ldrh	r0, [r7, #6]
 8002838:	893a      	ldrh	r2, [r7, #8]
 800283a:	8979      	ldrh	r1, [r7, #10]
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	9301      	str	r3, [sp, #4]
 8002840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002842:	9300      	str	r3, [sp, #0]
 8002844:	4603      	mov	r3, r0
 8002846:	68f8      	ldr	r0, [r7, #12]
 8002848:	f000 faf8 	bl	8002e3c <I2C_RequestMemoryWrite>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d052      	beq.n	80028f8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e081      	b.n	800295a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002856:	697a      	ldr	r2, [r7, #20]
 8002858:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800285a:	68f8      	ldr	r0, [r7, #12]
 800285c:	f000 fd42 	bl	80032e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d00d      	beq.n	8002882 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286a:	2b04      	cmp	r3, #4
 800286c:	d107      	bne.n	800287e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800287c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e06b      	b.n	800295a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002886:	781a      	ldrb	r2, [r3, #0]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002892:	1c5a      	adds	r2, r3, #1
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800289c:	3b01      	subs	r3, #1
 800289e:	b29a      	uxth	r2, r3
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	3b01      	subs	r3, #1
 80028ac:	b29a      	uxth	r2, r3
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	695b      	ldr	r3, [r3, #20]
 80028b8:	f003 0304 	and.w	r3, r3, #4
 80028bc:	2b04      	cmp	r3, #4
 80028be:	d11b      	bne.n	80028f8 <HAL_I2C_Mem_Write+0x180>
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d017      	beq.n	80028f8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028cc:	781a      	ldrb	r2, [r3, #0]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d8:	1c5a      	adds	r2, r3, #1
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028e2:	3b01      	subs	r3, #1
 80028e4:	b29a      	uxth	r2, r3
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	3b01      	subs	r3, #1
 80028f2:	b29a      	uxth	r2, r3
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d1aa      	bne.n	8002856 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002900:	697a      	ldr	r2, [r7, #20]
 8002902:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002904:	68f8      	ldr	r0, [r7, #12]
 8002906:	f000 fd2e 	bl	8003366 <I2C_WaitOnBTFFlagUntilTimeout>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d00d      	beq.n	800292c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002914:	2b04      	cmp	r3, #4
 8002916:	d107      	bne.n	8002928 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002926:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e016      	b.n	800295a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800293a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2220      	movs	r2, #32
 8002940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2200      	movs	r2, #0
 8002948:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2200      	movs	r2, #0
 8002950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002954:	2300      	movs	r3, #0
 8002956:	e000      	b.n	800295a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002958:	2302      	movs	r3, #2
  }
}
 800295a:	4618      	mov	r0, r3
 800295c:	3718      	adds	r7, #24
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	00100002 	.word	0x00100002
 8002968:	ffff0000 	.word	0xffff0000

0800296c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b08c      	sub	sp, #48	; 0x30
 8002970:	af02      	add	r7, sp, #8
 8002972:	60f8      	str	r0, [r7, #12]
 8002974:	4608      	mov	r0, r1
 8002976:	4611      	mov	r1, r2
 8002978:	461a      	mov	r2, r3
 800297a:	4603      	mov	r3, r0
 800297c:	817b      	strh	r3, [r7, #10]
 800297e:	460b      	mov	r3, r1
 8002980:	813b      	strh	r3, [r7, #8]
 8002982:	4613      	mov	r3, r2
 8002984:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002986:	2300      	movs	r3, #0
 8002988:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800298a:	f7ff faa9 	bl	8001ee0 <HAL_GetTick>
 800298e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002996:	b2db      	uxtb	r3, r3
 8002998:	2b20      	cmp	r3, #32
 800299a:	f040 8244 	bne.w	8002e26 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800299e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a0:	9300      	str	r3, [sp, #0]
 80029a2:	2319      	movs	r3, #25
 80029a4:	2201      	movs	r2, #1
 80029a6:	4982      	ldr	r1, [pc, #520]	; (8002bb0 <HAL_I2C_Mem_Read+0x244>)
 80029a8:	68f8      	ldr	r0, [r7, #12]
 80029aa:	f000 fbc5 	bl	8003138 <I2C_WaitOnFlagUntilTimeout>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d001      	beq.n	80029b8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80029b4:	2302      	movs	r3, #2
 80029b6:	e237      	b.n	8002e28 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d101      	bne.n	80029c6 <HAL_I2C_Mem_Read+0x5a>
 80029c2:	2302      	movs	r3, #2
 80029c4:	e230      	b.n	8002e28 <HAL_I2C_Mem_Read+0x4bc>
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2201      	movs	r2, #1
 80029ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0301 	and.w	r3, r3, #1
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d007      	beq.n	80029ec <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f042 0201 	orr.w	r2, r2, #1
 80029ea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029fa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2222      	movs	r2, #34	; 0x22
 8002a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2240      	movs	r2, #64	; 0x40
 8002a08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a16:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002a1c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a22:	b29a      	uxth	r2, r3
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	4a62      	ldr	r2, [pc, #392]	; (8002bb4 <HAL_I2C_Mem_Read+0x248>)
 8002a2c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a2e:	88f8      	ldrh	r0, [r7, #6]
 8002a30:	893a      	ldrh	r2, [r7, #8]
 8002a32:	8979      	ldrh	r1, [r7, #10]
 8002a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a36:	9301      	str	r3, [sp, #4]
 8002a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a3a:	9300      	str	r3, [sp, #0]
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	68f8      	ldr	r0, [r7, #12]
 8002a40:	f000 fa92 	bl	8002f68 <I2C_RequestMemoryRead>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d001      	beq.n	8002a4e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e1ec      	b.n	8002e28 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d113      	bne.n	8002a7e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a56:	2300      	movs	r3, #0
 8002a58:	61fb      	str	r3, [r7, #28]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	695b      	ldr	r3, [r3, #20]
 8002a60:	61fb      	str	r3, [r7, #28]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	699b      	ldr	r3, [r3, #24]
 8002a68:	61fb      	str	r3, [r7, #28]
 8002a6a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a7a:	601a      	str	r2, [r3, #0]
 8002a7c:	e1c0      	b.n	8002e00 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d11e      	bne.n	8002ac4 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a94:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002a96:	b672      	cpsid	i
}
 8002a98:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	61bb      	str	r3, [r7, #24]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	695b      	ldr	r3, [r3, #20]
 8002aa4:	61bb      	str	r3, [r7, #24]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	699b      	ldr	r3, [r3, #24]
 8002aac:	61bb      	str	r3, [r7, #24]
 8002aae:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002abe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002ac0:	b662      	cpsie	i
}
 8002ac2:	e035      	b.n	8002b30 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ac8:	2b02      	cmp	r3, #2
 8002aca:	d11e      	bne.n	8002b0a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ada:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002adc:	b672      	cpsid	i
}
 8002ade:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	617b      	str	r3, [r7, #20]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	695b      	ldr	r3, [r3, #20]
 8002aea:	617b      	str	r3, [r7, #20]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	699b      	ldr	r3, [r3, #24]
 8002af2:	617b      	str	r3, [r7, #20]
 8002af4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b04:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002b06:	b662      	cpsie	i
}
 8002b08:	e012      	b.n	8002b30 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b18:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	613b      	str	r3, [r7, #16]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	695b      	ldr	r3, [r3, #20]
 8002b24:	613b      	str	r3, [r7, #16]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	699b      	ldr	r3, [r3, #24]
 8002b2c:	613b      	str	r3, [r7, #16]
 8002b2e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002b30:	e166      	b.n	8002e00 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b36:	2b03      	cmp	r3, #3
 8002b38:	f200 811f 	bhi.w	8002d7a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d123      	bne.n	8002b8c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b46:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002b48:	68f8      	ldr	r0, [r7, #12]
 8002b4a:	f000 fc4d 	bl	80033e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d001      	beq.n	8002b58 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e167      	b.n	8002e28 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	691a      	ldr	r2, [r3, #16]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b62:	b2d2      	uxtb	r2, r2
 8002b64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6a:	1c5a      	adds	r2, r3, #1
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b74:	3b01      	subs	r3, #1
 8002b76:	b29a      	uxth	r2, r3
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	3b01      	subs	r3, #1
 8002b84:	b29a      	uxth	r2, r3
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b8a:	e139      	b.n	8002e00 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d152      	bne.n	8002c3a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b96:	9300      	str	r3, [sp, #0]
 8002b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	4906      	ldr	r1, [pc, #24]	; (8002bb8 <HAL_I2C_Mem_Read+0x24c>)
 8002b9e:	68f8      	ldr	r0, [r7, #12]
 8002ba0:	f000 faca 	bl	8003138 <I2C_WaitOnFlagUntilTimeout>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d008      	beq.n	8002bbc <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e13c      	b.n	8002e28 <HAL_I2C_Mem_Read+0x4bc>
 8002bae:	bf00      	nop
 8002bb0:	00100002 	.word	0x00100002
 8002bb4:	ffff0000 	.word	0xffff0000
 8002bb8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002bbc:	b672      	cpsid	i
}
 8002bbe:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	691a      	ldr	r2, [r3, #16]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bda:	b2d2      	uxtb	r2, r2
 8002bdc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be2:	1c5a      	adds	r2, r3, #1
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bec:	3b01      	subs	r3, #1
 8002bee:	b29a      	uxth	r2, r3
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	3b01      	subs	r3, #1
 8002bfc:	b29a      	uxth	r2, r3
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002c02:	b662      	cpsie	i
}
 8002c04:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	691a      	ldr	r2, [r3, #16]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c10:	b2d2      	uxtb	r2, r2
 8002c12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c18:	1c5a      	adds	r2, r3, #1
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c22:	3b01      	subs	r3, #1
 8002c24:	b29a      	uxth	r2, r3
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	3b01      	subs	r3, #1
 8002c32:	b29a      	uxth	r2, r3
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c38:	e0e2      	b.n	8002e00 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3c:	9300      	str	r3, [sp, #0]
 8002c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c40:	2200      	movs	r2, #0
 8002c42:	497b      	ldr	r1, [pc, #492]	; (8002e30 <HAL_I2C_Mem_Read+0x4c4>)
 8002c44:	68f8      	ldr	r0, [r7, #12]
 8002c46:	f000 fa77 	bl	8003138 <I2C_WaitOnFlagUntilTimeout>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d001      	beq.n	8002c54 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e0e9      	b.n	8002e28 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c62:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002c64:	b672      	cpsid	i
}
 8002c66:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	691a      	ldr	r2, [r3, #16]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c72:	b2d2      	uxtb	r2, r2
 8002c74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7a:	1c5a      	adds	r2, r3, #1
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c84:	3b01      	subs	r3, #1
 8002c86:	b29a      	uxth	r2, r3
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	3b01      	subs	r3, #1
 8002c94:	b29a      	uxth	r2, r3
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002c9a:	4b66      	ldr	r3, [pc, #408]	; (8002e34 <HAL_I2C_Mem_Read+0x4c8>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	08db      	lsrs	r3, r3, #3
 8002ca0:	4a65      	ldr	r2, [pc, #404]	; (8002e38 <HAL_I2C_Mem_Read+0x4cc>)
 8002ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ca6:	0a1a      	lsrs	r2, r3, #8
 8002ca8:	4613      	mov	r3, r2
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	4413      	add	r3, r2
 8002cae:	00da      	lsls	r2, r3, #3
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002cb4:	6a3b      	ldr	r3, [r7, #32]
 8002cb6:	3b01      	subs	r3, #1
 8002cb8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002cba:	6a3b      	ldr	r3, [r7, #32]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d118      	bne.n	8002cf2 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2220      	movs	r2, #32
 8002cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cda:	f043 0220 	orr.w	r2, r3, #32
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002ce2:	b662      	cpsie	i
}
 8002ce4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e09a      	b.n	8002e28 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	695b      	ldr	r3, [r3, #20]
 8002cf8:	f003 0304 	and.w	r3, r3, #4
 8002cfc:	2b04      	cmp	r3, #4
 8002cfe:	d1d9      	bne.n	8002cb4 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	691a      	ldr	r2, [r3, #16]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1a:	b2d2      	uxtb	r2, r2
 8002d1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d22:	1c5a      	adds	r2, r3, #1
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d2c:	3b01      	subs	r3, #1
 8002d2e:	b29a      	uxth	r2, r3
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	3b01      	subs	r3, #1
 8002d3c:	b29a      	uxth	r2, r3
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002d42:	b662      	cpsie	i
}
 8002d44:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	691a      	ldr	r2, [r3, #16]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d50:	b2d2      	uxtb	r2, r2
 8002d52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d58:	1c5a      	adds	r2, r3, #1
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d62:	3b01      	subs	r3, #1
 8002d64:	b29a      	uxth	r2, r3
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	3b01      	subs	r3, #1
 8002d72:	b29a      	uxth	r2, r3
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d78:	e042      	b.n	8002e00 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d7c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002d7e:	68f8      	ldr	r0, [r7, #12]
 8002d80:	f000 fb32 	bl	80033e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d001      	beq.n	8002d8e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e04c      	b.n	8002e28 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	691a      	ldr	r2, [r3, #16]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d98:	b2d2      	uxtb	r2, r2
 8002d9a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da0:	1c5a      	adds	r2, r3, #1
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002daa:	3b01      	subs	r3, #1
 8002dac:	b29a      	uxth	r2, r3
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	3b01      	subs	r3, #1
 8002dba:	b29a      	uxth	r2, r3
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	695b      	ldr	r3, [r3, #20]
 8002dc6:	f003 0304 	and.w	r3, r3, #4
 8002dca:	2b04      	cmp	r3, #4
 8002dcc:	d118      	bne.n	8002e00 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	691a      	ldr	r2, [r3, #16]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd8:	b2d2      	uxtb	r2, r2
 8002dda:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de0:	1c5a      	adds	r2, r3, #1
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dea:	3b01      	subs	r3, #1
 8002dec:	b29a      	uxth	r2, r3
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	3b01      	subs	r3, #1
 8002dfa:	b29a      	uxth	r2, r3
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	f47f ae94 	bne.w	8002b32 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2220      	movs	r2, #32
 8002e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2200      	movs	r2, #0
 8002e16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002e22:	2300      	movs	r3, #0
 8002e24:	e000      	b.n	8002e28 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8002e26:	2302      	movs	r3, #2
  }
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3728      	adds	r7, #40	; 0x28
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	00010004 	.word	0x00010004
 8002e34:	20000000 	.word	0x20000000
 8002e38:	14f8b589 	.word	0x14f8b589

08002e3c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b088      	sub	sp, #32
 8002e40:	af02      	add	r7, sp, #8
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	4608      	mov	r0, r1
 8002e46:	4611      	mov	r1, r2
 8002e48:	461a      	mov	r2, r3
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	817b      	strh	r3, [r7, #10]
 8002e4e:	460b      	mov	r3, r1
 8002e50:	813b      	strh	r3, [r7, #8]
 8002e52:	4613      	mov	r3, r2
 8002e54:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e64:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e68:	9300      	str	r3, [sp, #0]
 8002e6a:	6a3b      	ldr	r3, [r7, #32]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e72:	68f8      	ldr	r0, [r7, #12]
 8002e74:	f000 f960 	bl	8003138 <I2C_WaitOnFlagUntilTimeout>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d00d      	beq.n	8002e9a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e8c:	d103      	bne.n	8002e96 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e94:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e05f      	b.n	8002f5a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e9a:	897b      	ldrh	r3, [r7, #10]
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002ea8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eac:	6a3a      	ldr	r2, [r7, #32]
 8002eae:	492d      	ldr	r1, [pc, #180]	; (8002f64 <I2C_RequestMemoryWrite+0x128>)
 8002eb0:	68f8      	ldr	r0, [r7, #12]
 8002eb2:	f000 f998 	bl	80031e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d001      	beq.n	8002ec0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e04c      	b.n	8002f5a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	617b      	str	r3, [r7, #20]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	695b      	ldr	r3, [r3, #20]
 8002eca:	617b      	str	r3, [r7, #20]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	699b      	ldr	r3, [r3, #24]
 8002ed2:	617b      	str	r3, [r7, #20]
 8002ed4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ed6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ed8:	6a39      	ldr	r1, [r7, #32]
 8002eda:	68f8      	ldr	r0, [r7, #12]
 8002edc:	f000 fa02 	bl	80032e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d00d      	beq.n	8002f02 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eea:	2b04      	cmp	r3, #4
 8002eec:	d107      	bne.n	8002efe <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002efc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e02b      	b.n	8002f5a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f02:	88fb      	ldrh	r3, [r7, #6]
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d105      	bne.n	8002f14 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f08:	893b      	ldrh	r3, [r7, #8]
 8002f0a:	b2da      	uxtb	r2, r3
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	611a      	str	r2, [r3, #16]
 8002f12:	e021      	b.n	8002f58 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002f14:	893b      	ldrh	r3, [r7, #8]
 8002f16:	0a1b      	lsrs	r3, r3, #8
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	b2da      	uxtb	r2, r3
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f24:	6a39      	ldr	r1, [r7, #32]
 8002f26:	68f8      	ldr	r0, [r7, #12]
 8002f28:	f000 f9dc 	bl	80032e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d00d      	beq.n	8002f4e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f36:	2b04      	cmp	r3, #4
 8002f38:	d107      	bne.n	8002f4a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f48:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e005      	b.n	8002f5a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f4e:	893b      	ldrh	r3, [r7, #8]
 8002f50:	b2da      	uxtb	r2, r3
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3718      	adds	r7, #24
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	00010002 	.word	0x00010002

08002f68 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b088      	sub	sp, #32
 8002f6c:	af02      	add	r7, sp, #8
 8002f6e:	60f8      	str	r0, [r7, #12]
 8002f70:	4608      	mov	r0, r1
 8002f72:	4611      	mov	r1, r2
 8002f74:	461a      	mov	r2, r3
 8002f76:	4603      	mov	r3, r0
 8002f78:	817b      	strh	r3, [r7, #10]
 8002f7a:	460b      	mov	r3, r1
 8002f7c:	813b      	strh	r3, [r7, #8]
 8002f7e:	4613      	mov	r3, r2
 8002f80:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f90:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fa0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa4:	9300      	str	r3, [sp, #0]
 8002fa6:	6a3b      	ldr	r3, [r7, #32]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002fae:	68f8      	ldr	r0, [r7, #12]
 8002fb0:	f000 f8c2 	bl	8003138 <I2C_WaitOnFlagUntilTimeout>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d00d      	beq.n	8002fd6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fc8:	d103      	bne.n	8002fd2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fd0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e0aa      	b.n	800312c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002fd6:	897b      	ldrh	r3, [r7, #10]
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	461a      	mov	r2, r3
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002fe4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe8:	6a3a      	ldr	r2, [r7, #32]
 8002fea:	4952      	ldr	r1, [pc, #328]	; (8003134 <I2C_RequestMemoryRead+0x1cc>)
 8002fec:	68f8      	ldr	r0, [r7, #12]
 8002fee:	f000 f8fa 	bl	80031e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d001      	beq.n	8002ffc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e097      	b.n	800312c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	617b      	str	r3, [r7, #20]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	695b      	ldr	r3, [r3, #20]
 8003006:	617b      	str	r3, [r7, #20]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	699b      	ldr	r3, [r3, #24]
 800300e:	617b      	str	r3, [r7, #20]
 8003010:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003012:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003014:	6a39      	ldr	r1, [r7, #32]
 8003016:	68f8      	ldr	r0, [r7, #12]
 8003018:	f000 f964 	bl	80032e4 <I2C_WaitOnTXEFlagUntilTimeout>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d00d      	beq.n	800303e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003026:	2b04      	cmp	r3, #4
 8003028:	d107      	bne.n	800303a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003038:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e076      	b.n	800312c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800303e:	88fb      	ldrh	r3, [r7, #6]
 8003040:	2b01      	cmp	r3, #1
 8003042:	d105      	bne.n	8003050 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003044:	893b      	ldrh	r3, [r7, #8]
 8003046:	b2da      	uxtb	r2, r3
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	611a      	str	r2, [r3, #16]
 800304e:	e021      	b.n	8003094 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003050:	893b      	ldrh	r3, [r7, #8]
 8003052:	0a1b      	lsrs	r3, r3, #8
 8003054:	b29b      	uxth	r3, r3
 8003056:	b2da      	uxtb	r2, r3
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800305e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003060:	6a39      	ldr	r1, [r7, #32]
 8003062:	68f8      	ldr	r0, [r7, #12]
 8003064:	f000 f93e 	bl	80032e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d00d      	beq.n	800308a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003072:	2b04      	cmp	r3, #4
 8003074:	d107      	bne.n	8003086 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003084:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e050      	b.n	800312c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800308a:	893b      	ldrh	r3, [r7, #8]
 800308c:	b2da      	uxtb	r2, r3
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003094:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003096:	6a39      	ldr	r1, [r7, #32]
 8003098:	68f8      	ldr	r0, [r7, #12]
 800309a:	f000 f923 	bl	80032e4 <I2C_WaitOnTXEFlagUntilTimeout>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d00d      	beq.n	80030c0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a8:	2b04      	cmp	r3, #4
 80030aa:	d107      	bne.n	80030bc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030ba:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e035      	b.n	800312c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030ce:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80030d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d2:	9300      	str	r3, [sp, #0]
 80030d4:	6a3b      	ldr	r3, [r7, #32]
 80030d6:	2200      	movs	r2, #0
 80030d8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80030dc:	68f8      	ldr	r0, [r7, #12]
 80030de:	f000 f82b 	bl	8003138 <I2C_WaitOnFlagUntilTimeout>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d00d      	beq.n	8003104 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030f6:	d103      	bne.n	8003100 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030fe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003100:	2303      	movs	r3, #3
 8003102:	e013      	b.n	800312c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003104:	897b      	ldrh	r3, [r7, #10]
 8003106:	b2db      	uxtb	r3, r3
 8003108:	f043 0301 	orr.w	r3, r3, #1
 800310c:	b2da      	uxtb	r2, r3
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003116:	6a3a      	ldr	r2, [r7, #32]
 8003118:	4906      	ldr	r1, [pc, #24]	; (8003134 <I2C_RequestMemoryRead+0x1cc>)
 800311a:	68f8      	ldr	r0, [r7, #12]
 800311c:	f000 f863 	bl	80031e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d001      	beq.n	800312a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e000      	b.n	800312c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800312a:	2300      	movs	r3, #0
}
 800312c:	4618      	mov	r0, r3
 800312e:	3718      	adds	r7, #24
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}
 8003134:	00010002 	.word	0x00010002

08003138 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	60b9      	str	r1, [r7, #8]
 8003142:	603b      	str	r3, [r7, #0]
 8003144:	4613      	mov	r3, r2
 8003146:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003148:	e025      	b.n	8003196 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003150:	d021      	beq.n	8003196 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003152:	f7fe fec5 	bl	8001ee0 <HAL_GetTick>
 8003156:	4602      	mov	r2, r0
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	1ad3      	subs	r3, r2, r3
 800315c:	683a      	ldr	r2, [r7, #0]
 800315e:	429a      	cmp	r2, r3
 8003160:	d302      	bcc.n	8003168 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d116      	bne.n	8003196 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2200      	movs	r2, #0
 800316c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2220      	movs	r2, #32
 8003172:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2200      	movs	r2, #0
 800317a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003182:	f043 0220 	orr.w	r2, r3, #32
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2200      	movs	r2, #0
 800318e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e023      	b.n	80031de <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	0c1b      	lsrs	r3, r3, #16
 800319a:	b2db      	uxtb	r3, r3
 800319c:	2b01      	cmp	r3, #1
 800319e:	d10d      	bne.n	80031bc <I2C_WaitOnFlagUntilTimeout+0x84>
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	695b      	ldr	r3, [r3, #20]
 80031a6:	43da      	mvns	r2, r3
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	4013      	ands	r3, r2
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	bf0c      	ite	eq
 80031b2:	2301      	moveq	r3, #1
 80031b4:	2300      	movne	r3, #0
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	461a      	mov	r2, r3
 80031ba:	e00c      	b.n	80031d6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	699b      	ldr	r3, [r3, #24]
 80031c2:	43da      	mvns	r2, r3
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	4013      	ands	r3, r2
 80031c8:	b29b      	uxth	r3, r3
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	bf0c      	ite	eq
 80031ce:	2301      	moveq	r3, #1
 80031d0:	2300      	movne	r3, #0
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	461a      	mov	r2, r3
 80031d6:	79fb      	ldrb	r3, [r7, #7]
 80031d8:	429a      	cmp	r2, r3
 80031da:	d0b6      	beq.n	800314a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80031dc:	2300      	movs	r3, #0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3710      	adds	r7, #16
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}

080031e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80031e6:	b580      	push	{r7, lr}
 80031e8:	b084      	sub	sp, #16
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	60f8      	str	r0, [r7, #12]
 80031ee:	60b9      	str	r1, [r7, #8]
 80031f0:	607a      	str	r2, [r7, #4]
 80031f2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80031f4:	e051      	b.n	800329a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	695b      	ldr	r3, [r3, #20]
 80031fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003200:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003204:	d123      	bne.n	800324e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003214:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800321e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2200      	movs	r2, #0
 8003224:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2220      	movs	r2, #32
 800322a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2200      	movs	r2, #0
 8003232:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323a:	f043 0204 	orr.w	r2, r3, #4
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2200      	movs	r2, #0
 8003246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e046      	b.n	80032dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003254:	d021      	beq.n	800329a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003256:	f7fe fe43 	bl	8001ee0 <HAL_GetTick>
 800325a:	4602      	mov	r2, r0
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	429a      	cmp	r2, r3
 8003264:	d302      	bcc.n	800326c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d116      	bne.n	800329a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2200      	movs	r2, #0
 8003270:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2220      	movs	r2, #32
 8003276:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2200      	movs	r2, #0
 800327e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003286:	f043 0220 	orr.w	r2, r3, #32
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2200      	movs	r2, #0
 8003292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e020      	b.n	80032dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	0c1b      	lsrs	r3, r3, #16
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d10c      	bne.n	80032be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	695b      	ldr	r3, [r3, #20]
 80032aa:	43da      	mvns	r2, r3
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	4013      	ands	r3, r2
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	bf14      	ite	ne
 80032b6:	2301      	movne	r3, #1
 80032b8:	2300      	moveq	r3, #0
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	e00b      	b.n	80032d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	699b      	ldr	r3, [r3, #24]
 80032c4:	43da      	mvns	r2, r3
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	4013      	ands	r3, r2
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	bf14      	ite	ne
 80032d0:	2301      	movne	r3, #1
 80032d2:	2300      	moveq	r3, #0
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d18d      	bne.n	80031f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80032da:	2300      	movs	r3, #0
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3710      	adds	r7, #16
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}

080032e4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	60f8      	str	r0, [r7, #12]
 80032ec:	60b9      	str	r1, [r7, #8]
 80032ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032f0:	e02d      	b.n	800334e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80032f2:	68f8      	ldr	r0, [r7, #12]
 80032f4:	f000 f8ce 	bl	8003494 <I2C_IsAcknowledgeFailed>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d001      	beq.n	8003302 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e02d      	b.n	800335e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003308:	d021      	beq.n	800334e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800330a:	f7fe fde9 	bl	8001ee0 <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	68ba      	ldr	r2, [r7, #8]
 8003316:	429a      	cmp	r2, r3
 8003318:	d302      	bcc.n	8003320 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d116      	bne.n	800334e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2200      	movs	r2, #0
 8003324:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2220      	movs	r2, #32
 800332a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2200      	movs	r2, #0
 8003332:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333a:	f043 0220 	orr.w	r2, r3, #32
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2200      	movs	r2, #0
 8003346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e007      	b.n	800335e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	695b      	ldr	r3, [r3, #20]
 8003354:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003358:	2b80      	cmp	r3, #128	; 0x80
 800335a:	d1ca      	bne.n	80032f2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800335c:	2300      	movs	r3, #0
}
 800335e:	4618      	mov	r0, r3
 8003360:	3710      	adds	r7, #16
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}

08003366 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003366:	b580      	push	{r7, lr}
 8003368:	b084      	sub	sp, #16
 800336a:	af00      	add	r7, sp, #0
 800336c:	60f8      	str	r0, [r7, #12]
 800336e:	60b9      	str	r1, [r7, #8]
 8003370:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003372:	e02d      	b.n	80033d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003374:	68f8      	ldr	r0, [r7, #12]
 8003376:	f000 f88d 	bl	8003494 <I2C_IsAcknowledgeFailed>
 800337a:	4603      	mov	r3, r0
 800337c:	2b00      	cmp	r3, #0
 800337e:	d001      	beq.n	8003384 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e02d      	b.n	80033e0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	f1b3 3fff 	cmp.w	r3, #4294967295
 800338a:	d021      	beq.n	80033d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800338c:	f7fe fda8 	bl	8001ee0 <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	68ba      	ldr	r2, [r7, #8]
 8003398:	429a      	cmp	r2, r3
 800339a:	d302      	bcc.n	80033a2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d116      	bne.n	80033d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2200      	movs	r2, #0
 80033a6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2220      	movs	r2, #32
 80033ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033bc:	f043 0220 	orr.w	r2, r3, #32
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e007      	b.n	80033e0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	695b      	ldr	r3, [r3, #20]
 80033d6:	f003 0304 	and.w	r3, r3, #4
 80033da:	2b04      	cmp	r3, #4
 80033dc:	d1ca      	bne.n	8003374 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80033de:	2300      	movs	r3, #0
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3710      	adds	r7, #16
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	60f8      	str	r0, [r7, #12]
 80033f0:	60b9      	str	r1, [r7, #8]
 80033f2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80033f4:	e042      	b.n	800347c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	695b      	ldr	r3, [r3, #20]
 80033fc:	f003 0310 	and.w	r3, r3, #16
 8003400:	2b10      	cmp	r3, #16
 8003402:	d119      	bne.n	8003438 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f06f 0210 	mvn.w	r2, #16
 800340c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2200      	movs	r2, #0
 8003412:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2220      	movs	r2, #32
 8003418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2200      	movs	r2, #0
 8003420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2200      	movs	r2, #0
 8003430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e029      	b.n	800348c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003438:	f7fe fd52 	bl	8001ee0 <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	68ba      	ldr	r2, [r7, #8]
 8003444:	429a      	cmp	r2, r3
 8003446:	d302      	bcc.n	800344e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d116      	bne.n	800347c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2200      	movs	r2, #0
 8003452:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2220      	movs	r2, #32
 8003458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2200      	movs	r2, #0
 8003460:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003468:	f043 0220 	orr.w	r2, r3, #32
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2200      	movs	r2, #0
 8003474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e007      	b.n	800348c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	695b      	ldr	r3, [r3, #20]
 8003482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003486:	2b40      	cmp	r3, #64	; 0x40
 8003488:	d1b5      	bne.n	80033f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800348a:	2300      	movs	r3, #0
}
 800348c:	4618      	mov	r0, r3
 800348e:	3710      	adds	r7, #16
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}

08003494 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	695b      	ldr	r3, [r3, #20]
 80034a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034aa:	d11b      	bne.n	80034e4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80034b4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2220      	movs	r2, #32
 80034c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2200      	movs	r2, #0
 80034c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d0:	f043 0204 	orr.w	r2, r3, #4
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e000      	b.n	80034e6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80034e4:	2300      	movs	r3, #0
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	370c      	adds	r7, #12
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bc80      	pop	{r7}
 80034ee:	4770      	bx	lr

080034f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b086      	sub	sp, #24
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d101      	bne.n	8003502 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e272      	b.n	80039e8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0301 	and.w	r3, r3, #1
 800350a:	2b00      	cmp	r3, #0
 800350c:	f000 8087 	beq.w	800361e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003510:	4b92      	ldr	r3, [pc, #584]	; (800375c <HAL_RCC_OscConfig+0x26c>)
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f003 030c 	and.w	r3, r3, #12
 8003518:	2b04      	cmp	r3, #4
 800351a:	d00c      	beq.n	8003536 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800351c:	4b8f      	ldr	r3, [pc, #572]	; (800375c <HAL_RCC_OscConfig+0x26c>)
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f003 030c 	and.w	r3, r3, #12
 8003524:	2b08      	cmp	r3, #8
 8003526:	d112      	bne.n	800354e <HAL_RCC_OscConfig+0x5e>
 8003528:	4b8c      	ldr	r3, [pc, #560]	; (800375c <HAL_RCC_OscConfig+0x26c>)
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003530:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003534:	d10b      	bne.n	800354e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003536:	4b89      	ldr	r3, [pc, #548]	; (800375c <HAL_RCC_OscConfig+0x26c>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d06c      	beq.n	800361c <HAL_RCC_OscConfig+0x12c>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d168      	bne.n	800361c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e24c      	b.n	80039e8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003556:	d106      	bne.n	8003566 <HAL_RCC_OscConfig+0x76>
 8003558:	4b80      	ldr	r3, [pc, #512]	; (800375c <HAL_RCC_OscConfig+0x26c>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a7f      	ldr	r2, [pc, #508]	; (800375c <HAL_RCC_OscConfig+0x26c>)
 800355e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003562:	6013      	str	r3, [r2, #0]
 8003564:	e02e      	b.n	80035c4 <HAL_RCC_OscConfig+0xd4>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d10c      	bne.n	8003588 <HAL_RCC_OscConfig+0x98>
 800356e:	4b7b      	ldr	r3, [pc, #492]	; (800375c <HAL_RCC_OscConfig+0x26c>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a7a      	ldr	r2, [pc, #488]	; (800375c <HAL_RCC_OscConfig+0x26c>)
 8003574:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003578:	6013      	str	r3, [r2, #0]
 800357a:	4b78      	ldr	r3, [pc, #480]	; (800375c <HAL_RCC_OscConfig+0x26c>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a77      	ldr	r2, [pc, #476]	; (800375c <HAL_RCC_OscConfig+0x26c>)
 8003580:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003584:	6013      	str	r3, [r2, #0]
 8003586:	e01d      	b.n	80035c4 <HAL_RCC_OscConfig+0xd4>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003590:	d10c      	bne.n	80035ac <HAL_RCC_OscConfig+0xbc>
 8003592:	4b72      	ldr	r3, [pc, #456]	; (800375c <HAL_RCC_OscConfig+0x26c>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a71      	ldr	r2, [pc, #452]	; (800375c <HAL_RCC_OscConfig+0x26c>)
 8003598:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800359c:	6013      	str	r3, [r2, #0]
 800359e:	4b6f      	ldr	r3, [pc, #444]	; (800375c <HAL_RCC_OscConfig+0x26c>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a6e      	ldr	r2, [pc, #440]	; (800375c <HAL_RCC_OscConfig+0x26c>)
 80035a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035a8:	6013      	str	r3, [r2, #0]
 80035aa:	e00b      	b.n	80035c4 <HAL_RCC_OscConfig+0xd4>
 80035ac:	4b6b      	ldr	r3, [pc, #428]	; (800375c <HAL_RCC_OscConfig+0x26c>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a6a      	ldr	r2, [pc, #424]	; (800375c <HAL_RCC_OscConfig+0x26c>)
 80035b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035b6:	6013      	str	r3, [r2, #0]
 80035b8:	4b68      	ldr	r3, [pc, #416]	; (800375c <HAL_RCC_OscConfig+0x26c>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a67      	ldr	r2, [pc, #412]	; (800375c <HAL_RCC_OscConfig+0x26c>)
 80035be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035c2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d013      	beq.n	80035f4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035cc:	f7fe fc88 	bl	8001ee0 <HAL_GetTick>
 80035d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035d2:	e008      	b.n	80035e6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035d4:	f7fe fc84 	bl	8001ee0 <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	2b64      	cmp	r3, #100	; 0x64
 80035e0:	d901      	bls.n	80035e6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e200      	b.n	80039e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035e6:	4b5d      	ldr	r3, [pc, #372]	; (800375c <HAL_RCC_OscConfig+0x26c>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d0f0      	beq.n	80035d4 <HAL_RCC_OscConfig+0xe4>
 80035f2:	e014      	b.n	800361e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035f4:	f7fe fc74 	bl	8001ee0 <HAL_GetTick>
 80035f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035fa:	e008      	b.n	800360e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035fc:	f7fe fc70 	bl	8001ee0 <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	2b64      	cmp	r3, #100	; 0x64
 8003608:	d901      	bls.n	800360e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e1ec      	b.n	80039e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800360e:	4b53      	ldr	r3, [pc, #332]	; (800375c <HAL_RCC_OscConfig+0x26c>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d1f0      	bne.n	80035fc <HAL_RCC_OscConfig+0x10c>
 800361a:	e000      	b.n	800361e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800361c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0302 	and.w	r3, r3, #2
 8003626:	2b00      	cmp	r3, #0
 8003628:	d063      	beq.n	80036f2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800362a:	4b4c      	ldr	r3, [pc, #304]	; (800375c <HAL_RCC_OscConfig+0x26c>)
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	f003 030c 	and.w	r3, r3, #12
 8003632:	2b00      	cmp	r3, #0
 8003634:	d00b      	beq.n	800364e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003636:	4b49      	ldr	r3, [pc, #292]	; (800375c <HAL_RCC_OscConfig+0x26c>)
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	f003 030c 	and.w	r3, r3, #12
 800363e:	2b08      	cmp	r3, #8
 8003640:	d11c      	bne.n	800367c <HAL_RCC_OscConfig+0x18c>
 8003642:	4b46      	ldr	r3, [pc, #280]	; (800375c <HAL_RCC_OscConfig+0x26c>)
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d116      	bne.n	800367c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800364e:	4b43      	ldr	r3, [pc, #268]	; (800375c <HAL_RCC_OscConfig+0x26c>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0302 	and.w	r3, r3, #2
 8003656:	2b00      	cmp	r3, #0
 8003658:	d005      	beq.n	8003666 <HAL_RCC_OscConfig+0x176>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	691b      	ldr	r3, [r3, #16]
 800365e:	2b01      	cmp	r3, #1
 8003660:	d001      	beq.n	8003666 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e1c0      	b.n	80039e8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003666:	4b3d      	ldr	r3, [pc, #244]	; (800375c <HAL_RCC_OscConfig+0x26c>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	695b      	ldr	r3, [r3, #20]
 8003672:	00db      	lsls	r3, r3, #3
 8003674:	4939      	ldr	r1, [pc, #228]	; (800375c <HAL_RCC_OscConfig+0x26c>)
 8003676:	4313      	orrs	r3, r2
 8003678:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800367a:	e03a      	b.n	80036f2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	691b      	ldr	r3, [r3, #16]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d020      	beq.n	80036c6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003684:	4b36      	ldr	r3, [pc, #216]	; (8003760 <HAL_RCC_OscConfig+0x270>)
 8003686:	2201      	movs	r2, #1
 8003688:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800368a:	f7fe fc29 	bl	8001ee0 <HAL_GetTick>
 800368e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003690:	e008      	b.n	80036a4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003692:	f7fe fc25 	bl	8001ee0 <HAL_GetTick>
 8003696:	4602      	mov	r2, r0
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	1ad3      	subs	r3, r2, r3
 800369c:	2b02      	cmp	r3, #2
 800369e:	d901      	bls.n	80036a4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80036a0:	2303      	movs	r3, #3
 80036a2:	e1a1      	b.n	80039e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036a4:	4b2d      	ldr	r3, [pc, #180]	; (800375c <HAL_RCC_OscConfig+0x26c>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 0302 	and.w	r3, r3, #2
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d0f0      	beq.n	8003692 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036b0:	4b2a      	ldr	r3, [pc, #168]	; (800375c <HAL_RCC_OscConfig+0x26c>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	695b      	ldr	r3, [r3, #20]
 80036bc:	00db      	lsls	r3, r3, #3
 80036be:	4927      	ldr	r1, [pc, #156]	; (800375c <HAL_RCC_OscConfig+0x26c>)
 80036c0:	4313      	orrs	r3, r2
 80036c2:	600b      	str	r3, [r1, #0]
 80036c4:	e015      	b.n	80036f2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036c6:	4b26      	ldr	r3, [pc, #152]	; (8003760 <HAL_RCC_OscConfig+0x270>)
 80036c8:	2200      	movs	r2, #0
 80036ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036cc:	f7fe fc08 	bl	8001ee0 <HAL_GetTick>
 80036d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036d2:	e008      	b.n	80036e6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036d4:	f7fe fc04 	bl	8001ee0 <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d901      	bls.n	80036e6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e180      	b.n	80039e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036e6:	4b1d      	ldr	r3, [pc, #116]	; (800375c <HAL_RCC_OscConfig+0x26c>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0302 	and.w	r3, r3, #2
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d1f0      	bne.n	80036d4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0308 	and.w	r3, r3, #8
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d03a      	beq.n	8003774 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	699b      	ldr	r3, [r3, #24]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d019      	beq.n	800373a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003706:	4b17      	ldr	r3, [pc, #92]	; (8003764 <HAL_RCC_OscConfig+0x274>)
 8003708:	2201      	movs	r2, #1
 800370a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800370c:	f7fe fbe8 	bl	8001ee0 <HAL_GetTick>
 8003710:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003712:	e008      	b.n	8003726 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003714:	f7fe fbe4 	bl	8001ee0 <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	2b02      	cmp	r3, #2
 8003720:	d901      	bls.n	8003726 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e160      	b.n	80039e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003726:	4b0d      	ldr	r3, [pc, #52]	; (800375c <HAL_RCC_OscConfig+0x26c>)
 8003728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372a:	f003 0302 	and.w	r3, r3, #2
 800372e:	2b00      	cmp	r3, #0
 8003730:	d0f0      	beq.n	8003714 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003732:	2001      	movs	r0, #1
 8003734:	f000 fac4 	bl	8003cc0 <RCC_Delay>
 8003738:	e01c      	b.n	8003774 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800373a:	4b0a      	ldr	r3, [pc, #40]	; (8003764 <HAL_RCC_OscConfig+0x274>)
 800373c:	2200      	movs	r2, #0
 800373e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003740:	f7fe fbce 	bl	8001ee0 <HAL_GetTick>
 8003744:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003746:	e00f      	b.n	8003768 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003748:	f7fe fbca 	bl	8001ee0 <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	2b02      	cmp	r3, #2
 8003754:	d908      	bls.n	8003768 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e146      	b.n	80039e8 <HAL_RCC_OscConfig+0x4f8>
 800375a:	bf00      	nop
 800375c:	40021000 	.word	0x40021000
 8003760:	42420000 	.word	0x42420000
 8003764:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003768:	4b92      	ldr	r3, [pc, #584]	; (80039b4 <HAL_RCC_OscConfig+0x4c4>)
 800376a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376c:	f003 0302 	and.w	r3, r3, #2
 8003770:	2b00      	cmp	r3, #0
 8003772:	d1e9      	bne.n	8003748 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0304 	and.w	r3, r3, #4
 800377c:	2b00      	cmp	r3, #0
 800377e:	f000 80a6 	beq.w	80038ce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003782:	2300      	movs	r3, #0
 8003784:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003786:	4b8b      	ldr	r3, [pc, #556]	; (80039b4 <HAL_RCC_OscConfig+0x4c4>)
 8003788:	69db      	ldr	r3, [r3, #28]
 800378a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d10d      	bne.n	80037ae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003792:	4b88      	ldr	r3, [pc, #544]	; (80039b4 <HAL_RCC_OscConfig+0x4c4>)
 8003794:	69db      	ldr	r3, [r3, #28]
 8003796:	4a87      	ldr	r2, [pc, #540]	; (80039b4 <HAL_RCC_OscConfig+0x4c4>)
 8003798:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800379c:	61d3      	str	r3, [r2, #28]
 800379e:	4b85      	ldr	r3, [pc, #532]	; (80039b4 <HAL_RCC_OscConfig+0x4c4>)
 80037a0:	69db      	ldr	r3, [r3, #28]
 80037a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037a6:	60bb      	str	r3, [r7, #8]
 80037a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037aa:	2301      	movs	r3, #1
 80037ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037ae:	4b82      	ldr	r3, [pc, #520]	; (80039b8 <HAL_RCC_OscConfig+0x4c8>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d118      	bne.n	80037ec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037ba:	4b7f      	ldr	r3, [pc, #508]	; (80039b8 <HAL_RCC_OscConfig+0x4c8>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a7e      	ldr	r2, [pc, #504]	; (80039b8 <HAL_RCC_OscConfig+0x4c8>)
 80037c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037c6:	f7fe fb8b 	bl	8001ee0 <HAL_GetTick>
 80037ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037cc:	e008      	b.n	80037e0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037ce:	f7fe fb87 	bl	8001ee0 <HAL_GetTick>
 80037d2:	4602      	mov	r2, r0
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	2b64      	cmp	r3, #100	; 0x64
 80037da:	d901      	bls.n	80037e0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80037dc:	2303      	movs	r3, #3
 80037de:	e103      	b.n	80039e8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037e0:	4b75      	ldr	r3, [pc, #468]	; (80039b8 <HAL_RCC_OscConfig+0x4c8>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d0f0      	beq.n	80037ce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d106      	bne.n	8003802 <HAL_RCC_OscConfig+0x312>
 80037f4:	4b6f      	ldr	r3, [pc, #444]	; (80039b4 <HAL_RCC_OscConfig+0x4c4>)
 80037f6:	6a1b      	ldr	r3, [r3, #32]
 80037f8:	4a6e      	ldr	r2, [pc, #440]	; (80039b4 <HAL_RCC_OscConfig+0x4c4>)
 80037fa:	f043 0301 	orr.w	r3, r3, #1
 80037fe:	6213      	str	r3, [r2, #32]
 8003800:	e02d      	b.n	800385e <HAL_RCC_OscConfig+0x36e>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d10c      	bne.n	8003824 <HAL_RCC_OscConfig+0x334>
 800380a:	4b6a      	ldr	r3, [pc, #424]	; (80039b4 <HAL_RCC_OscConfig+0x4c4>)
 800380c:	6a1b      	ldr	r3, [r3, #32]
 800380e:	4a69      	ldr	r2, [pc, #420]	; (80039b4 <HAL_RCC_OscConfig+0x4c4>)
 8003810:	f023 0301 	bic.w	r3, r3, #1
 8003814:	6213      	str	r3, [r2, #32]
 8003816:	4b67      	ldr	r3, [pc, #412]	; (80039b4 <HAL_RCC_OscConfig+0x4c4>)
 8003818:	6a1b      	ldr	r3, [r3, #32]
 800381a:	4a66      	ldr	r2, [pc, #408]	; (80039b4 <HAL_RCC_OscConfig+0x4c4>)
 800381c:	f023 0304 	bic.w	r3, r3, #4
 8003820:	6213      	str	r3, [r2, #32]
 8003822:	e01c      	b.n	800385e <HAL_RCC_OscConfig+0x36e>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	2b05      	cmp	r3, #5
 800382a:	d10c      	bne.n	8003846 <HAL_RCC_OscConfig+0x356>
 800382c:	4b61      	ldr	r3, [pc, #388]	; (80039b4 <HAL_RCC_OscConfig+0x4c4>)
 800382e:	6a1b      	ldr	r3, [r3, #32]
 8003830:	4a60      	ldr	r2, [pc, #384]	; (80039b4 <HAL_RCC_OscConfig+0x4c4>)
 8003832:	f043 0304 	orr.w	r3, r3, #4
 8003836:	6213      	str	r3, [r2, #32]
 8003838:	4b5e      	ldr	r3, [pc, #376]	; (80039b4 <HAL_RCC_OscConfig+0x4c4>)
 800383a:	6a1b      	ldr	r3, [r3, #32]
 800383c:	4a5d      	ldr	r2, [pc, #372]	; (80039b4 <HAL_RCC_OscConfig+0x4c4>)
 800383e:	f043 0301 	orr.w	r3, r3, #1
 8003842:	6213      	str	r3, [r2, #32]
 8003844:	e00b      	b.n	800385e <HAL_RCC_OscConfig+0x36e>
 8003846:	4b5b      	ldr	r3, [pc, #364]	; (80039b4 <HAL_RCC_OscConfig+0x4c4>)
 8003848:	6a1b      	ldr	r3, [r3, #32]
 800384a:	4a5a      	ldr	r2, [pc, #360]	; (80039b4 <HAL_RCC_OscConfig+0x4c4>)
 800384c:	f023 0301 	bic.w	r3, r3, #1
 8003850:	6213      	str	r3, [r2, #32]
 8003852:	4b58      	ldr	r3, [pc, #352]	; (80039b4 <HAL_RCC_OscConfig+0x4c4>)
 8003854:	6a1b      	ldr	r3, [r3, #32]
 8003856:	4a57      	ldr	r2, [pc, #348]	; (80039b4 <HAL_RCC_OscConfig+0x4c4>)
 8003858:	f023 0304 	bic.w	r3, r3, #4
 800385c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d015      	beq.n	8003892 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003866:	f7fe fb3b 	bl	8001ee0 <HAL_GetTick>
 800386a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800386c:	e00a      	b.n	8003884 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800386e:	f7fe fb37 	bl	8001ee0 <HAL_GetTick>
 8003872:	4602      	mov	r2, r0
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	f241 3288 	movw	r2, #5000	; 0x1388
 800387c:	4293      	cmp	r3, r2
 800387e:	d901      	bls.n	8003884 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	e0b1      	b.n	80039e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003884:	4b4b      	ldr	r3, [pc, #300]	; (80039b4 <HAL_RCC_OscConfig+0x4c4>)
 8003886:	6a1b      	ldr	r3, [r3, #32]
 8003888:	f003 0302 	and.w	r3, r3, #2
 800388c:	2b00      	cmp	r3, #0
 800388e:	d0ee      	beq.n	800386e <HAL_RCC_OscConfig+0x37e>
 8003890:	e014      	b.n	80038bc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003892:	f7fe fb25 	bl	8001ee0 <HAL_GetTick>
 8003896:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003898:	e00a      	b.n	80038b0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800389a:	f7fe fb21 	bl	8001ee0 <HAL_GetTick>
 800389e:	4602      	mov	r2, r0
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	1ad3      	subs	r3, r2, r3
 80038a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d901      	bls.n	80038b0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80038ac:	2303      	movs	r3, #3
 80038ae:	e09b      	b.n	80039e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038b0:	4b40      	ldr	r3, [pc, #256]	; (80039b4 <HAL_RCC_OscConfig+0x4c4>)
 80038b2:	6a1b      	ldr	r3, [r3, #32]
 80038b4:	f003 0302 	and.w	r3, r3, #2
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d1ee      	bne.n	800389a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80038bc:	7dfb      	ldrb	r3, [r7, #23]
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d105      	bne.n	80038ce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038c2:	4b3c      	ldr	r3, [pc, #240]	; (80039b4 <HAL_RCC_OscConfig+0x4c4>)
 80038c4:	69db      	ldr	r3, [r3, #28]
 80038c6:	4a3b      	ldr	r2, [pc, #236]	; (80039b4 <HAL_RCC_OscConfig+0x4c4>)
 80038c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038cc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	69db      	ldr	r3, [r3, #28]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	f000 8087 	beq.w	80039e6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038d8:	4b36      	ldr	r3, [pc, #216]	; (80039b4 <HAL_RCC_OscConfig+0x4c4>)
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	f003 030c 	and.w	r3, r3, #12
 80038e0:	2b08      	cmp	r3, #8
 80038e2:	d061      	beq.n	80039a8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	69db      	ldr	r3, [r3, #28]
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	d146      	bne.n	800397a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038ec:	4b33      	ldr	r3, [pc, #204]	; (80039bc <HAL_RCC_OscConfig+0x4cc>)
 80038ee:	2200      	movs	r2, #0
 80038f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038f2:	f7fe faf5 	bl	8001ee0 <HAL_GetTick>
 80038f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038f8:	e008      	b.n	800390c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038fa:	f7fe faf1 	bl	8001ee0 <HAL_GetTick>
 80038fe:	4602      	mov	r2, r0
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	2b02      	cmp	r3, #2
 8003906:	d901      	bls.n	800390c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003908:	2303      	movs	r3, #3
 800390a:	e06d      	b.n	80039e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800390c:	4b29      	ldr	r3, [pc, #164]	; (80039b4 <HAL_RCC_OscConfig+0x4c4>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d1f0      	bne.n	80038fa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6a1b      	ldr	r3, [r3, #32]
 800391c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003920:	d108      	bne.n	8003934 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003922:	4b24      	ldr	r3, [pc, #144]	; (80039b4 <HAL_RCC_OscConfig+0x4c4>)
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	4921      	ldr	r1, [pc, #132]	; (80039b4 <HAL_RCC_OscConfig+0x4c4>)
 8003930:	4313      	orrs	r3, r2
 8003932:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003934:	4b1f      	ldr	r3, [pc, #124]	; (80039b4 <HAL_RCC_OscConfig+0x4c4>)
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6a19      	ldr	r1, [r3, #32]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003944:	430b      	orrs	r3, r1
 8003946:	491b      	ldr	r1, [pc, #108]	; (80039b4 <HAL_RCC_OscConfig+0x4c4>)
 8003948:	4313      	orrs	r3, r2
 800394a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800394c:	4b1b      	ldr	r3, [pc, #108]	; (80039bc <HAL_RCC_OscConfig+0x4cc>)
 800394e:	2201      	movs	r2, #1
 8003950:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003952:	f7fe fac5 	bl	8001ee0 <HAL_GetTick>
 8003956:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003958:	e008      	b.n	800396c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800395a:	f7fe fac1 	bl	8001ee0 <HAL_GetTick>
 800395e:	4602      	mov	r2, r0
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	2b02      	cmp	r3, #2
 8003966:	d901      	bls.n	800396c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003968:	2303      	movs	r3, #3
 800396a:	e03d      	b.n	80039e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800396c:	4b11      	ldr	r3, [pc, #68]	; (80039b4 <HAL_RCC_OscConfig+0x4c4>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003974:	2b00      	cmp	r3, #0
 8003976:	d0f0      	beq.n	800395a <HAL_RCC_OscConfig+0x46a>
 8003978:	e035      	b.n	80039e6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800397a:	4b10      	ldr	r3, [pc, #64]	; (80039bc <HAL_RCC_OscConfig+0x4cc>)
 800397c:	2200      	movs	r2, #0
 800397e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003980:	f7fe faae 	bl	8001ee0 <HAL_GetTick>
 8003984:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003986:	e008      	b.n	800399a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003988:	f7fe faaa 	bl	8001ee0 <HAL_GetTick>
 800398c:	4602      	mov	r2, r0
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	2b02      	cmp	r3, #2
 8003994:	d901      	bls.n	800399a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003996:	2303      	movs	r3, #3
 8003998:	e026      	b.n	80039e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800399a:	4b06      	ldr	r3, [pc, #24]	; (80039b4 <HAL_RCC_OscConfig+0x4c4>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d1f0      	bne.n	8003988 <HAL_RCC_OscConfig+0x498>
 80039a6:	e01e      	b.n	80039e6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	69db      	ldr	r3, [r3, #28]
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d107      	bne.n	80039c0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e019      	b.n	80039e8 <HAL_RCC_OscConfig+0x4f8>
 80039b4:	40021000 	.word	0x40021000
 80039b8:	40007000 	.word	0x40007000
 80039bc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80039c0:	4b0b      	ldr	r3, [pc, #44]	; (80039f0 <HAL_RCC_OscConfig+0x500>)
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6a1b      	ldr	r3, [r3, #32]
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d106      	bne.n	80039e2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039de:	429a      	cmp	r2, r3
 80039e0:	d001      	beq.n	80039e6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e000      	b.n	80039e8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80039e6:	2300      	movs	r3, #0
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3718      	adds	r7, #24
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	40021000 	.word	0x40021000

080039f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b084      	sub	sp, #16
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d101      	bne.n	8003a08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e0d0      	b.n	8003baa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a08:	4b6a      	ldr	r3, [pc, #424]	; (8003bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 0307 	and.w	r3, r3, #7
 8003a10:	683a      	ldr	r2, [r7, #0]
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d910      	bls.n	8003a38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a16:	4b67      	ldr	r3, [pc, #412]	; (8003bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f023 0207 	bic.w	r2, r3, #7
 8003a1e:	4965      	ldr	r1, [pc, #404]	; (8003bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a26:	4b63      	ldr	r3, [pc, #396]	; (8003bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 0307 	and.w	r3, r3, #7
 8003a2e:	683a      	ldr	r2, [r7, #0]
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d001      	beq.n	8003a38 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e0b8      	b.n	8003baa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 0302 	and.w	r3, r3, #2
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d020      	beq.n	8003a86 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0304 	and.w	r3, r3, #4
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d005      	beq.n	8003a5c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a50:	4b59      	ldr	r3, [pc, #356]	; (8003bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	4a58      	ldr	r2, [pc, #352]	; (8003bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a56:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003a5a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0308 	and.w	r3, r3, #8
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d005      	beq.n	8003a74 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a68:	4b53      	ldr	r3, [pc, #332]	; (8003bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	4a52      	ldr	r2, [pc, #328]	; (8003bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a6e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003a72:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a74:	4b50      	ldr	r3, [pc, #320]	; (8003bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	494d      	ldr	r1, [pc, #308]	; (8003bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a82:	4313      	orrs	r3, r2
 8003a84:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0301 	and.w	r3, r3, #1
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d040      	beq.n	8003b14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d107      	bne.n	8003aaa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a9a:	4b47      	ldr	r3, [pc, #284]	; (8003bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d115      	bne.n	8003ad2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e07f      	b.n	8003baa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	2b02      	cmp	r3, #2
 8003ab0:	d107      	bne.n	8003ac2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ab2:	4b41      	ldr	r3, [pc, #260]	; (8003bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d109      	bne.n	8003ad2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e073      	b.n	8003baa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ac2:	4b3d      	ldr	r3, [pc, #244]	; (8003bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0302 	and.w	r3, r3, #2
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d101      	bne.n	8003ad2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e06b      	b.n	8003baa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ad2:	4b39      	ldr	r3, [pc, #228]	; (8003bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	f023 0203 	bic.w	r2, r3, #3
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	4936      	ldr	r1, [pc, #216]	; (8003bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ae4:	f7fe f9fc 	bl	8001ee0 <HAL_GetTick>
 8003ae8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aea:	e00a      	b.n	8003b02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003aec:	f7fe f9f8 	bl	8001ee0 <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d901      	bls.n	8003b02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003afe:	2303      	movs	r3, #3
 8003b00:	e053      	b.n	8003baa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b02:	4b2d      	ldr	r3, [pc, #180]	; (8003bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	f003 020c 	and.w	r2, r3, #12
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d1eb      	bne.n	8003aec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b14:	4b27      	ldr	r3, [pc, #156]	; (8003bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 0307 	and.w	r3, r3, #7
 8003b1c:	683a      	ldr	r2, [r7, #0]
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d210      	bcs.n	8003b44 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b22:	4b24      	ldr	r3, [pc, #144]	; (8003bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f023 0207 	bic.w	r2, r3, #7
 8003b2a:	4922      	ldr	r1, [pc, #136]	; (8003bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b32:	4b20      	ldr	r3, [pc, #128]	; (8003bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0307 	and.w	r3, r3, #7
 8003b3a:	683a      	ldr	r2, [r7, #0]
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d001      	beq.n	8003b44 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e032      	b.n	8003baa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0304 	and.w	r3, r3, #4
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d008      	beq.n	8003b62 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b50:	4b19      	ldr	r3, [pc, #100]	; (8003bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	4916      	ldr	r1, [pc, #88]	; (8003bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 0308 	and.w	r3, r3, #8
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d009      	beq.n	8003b82 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003b6e:	4b12      	ldr	r3, [pc, #72]	; (8003bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	00db      	lsls	r3, r3, #3
 8003b7c:	490e      	ldr	r1, [pc, #56]	; (8003bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b82:	f000 f821 	bl	8003bc8 <HAL_RCC_GetSysClockFreq>
 8003b86:	4602      	mov	r2, r0
 8003b88:	4b0b      	ldr	r3, [pc, #44]	; (8003bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	091b      	lsrs	r3, r3, #4
 8003b8e:	f003 030f 	and.w	r3, r3, #15
 8003b92:	490a      	ldr	r1, [pc, #40]	; (8003bbc <HAL_RCC_ClockConfig+0x1c8>)
 8003b94:	5ccb      	ldrb	r3, [r1, r3]
 8003b96:	fa22 f303 	lsr.w	r3, r2, r3
 8003b9a:	4a09      	ldr	r2, [pc, #36]	; (8003bc0 <HAL_RCC_ClockConfig+0x1cc>)
 8003b9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003b9e:	4b09      	ldr	r3, [pc, #36]	; (8003bc4 <HAL_RCC_ClockConfig+0x1d0>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f7fe f95a 	bl	8001e5c <HAL_InitTick>

  return HAL_OK;
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3710      	adds	r7, #16
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	40022000 	.word	0x40022000
 8003bb8:	40021000 	.word	0x40021000
 8003bbc:	08007eb4 	.word	0x08007eb4
 8003bc0:	20000000 	.word	0x20000000
 8003bc4:	20000004 	.word	0x20000004

08003bc8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bc8:	b490      	push	{r4, r7}
 8003bca:	b08a      	sub	sp, #40	; 0x28
 8003bcc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003bce:	4b29      	ldr	r3, [pc, #164]	; (8003c74 <HAL_RCC_GetSysClockFreq+0xac>)
 8003bd0:	1d3c      	adds	r4, r7, #4
 8003bd2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003bd4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003bd8:	f240 2301 	movw	r3, #513	; 0x201
 8003bdc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003bde:	2300      	movs	r3, #0
 8003be0:	61fb      	str	r3, [r7, #28]
 8003be2:	2300      	movs	r3, #0
 8003be4:	61bb      	str	r3, [r7, #24]
 8003be6:	2300      	movs	r3, #0
 8003be8:	627b      	str	r3, [r7, #36]	; 0x24
 8003bea:	2300      	movs	r3, #0
 8003bec:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003bf2:	4b21      	ldr	r3, [pc, #132]	; (8003c78 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003bf8:	69fb      	ldr	r3, [r7, #28]
 8003bfa:	f003 030c 	and.w	r3, r3, #12
 8003bfe:	2b04      	cmp	r3, #4
 8003c00:	d002      	beq.n	8003c08 <HAL_RCC_GetSysClockFreq+0x40>
 8003c02:	2b08      	cmp	r3, #8
 8003c04:	d003      	beq.n	8003c0e <HAL_RCC_GetSysClockFreq+0x46>
 8003c06:	e02b      	b.n	8003c60 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003c08:	4b1c      	ldr	r3, [pc, #112]	; (8003c7c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003c0a:	623b      	str	r3, [r7, #32]
      break;
 8003c0c:	e02b      	b.n	8003c66 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	0c9b      	lsrs	r3, r3, #18
 8003c12:	f003 030f 	and.w	r3, r3, #15
 8003c16:	3328      	adds	r3, #40	; 0x28
 8003c18:	443b      	add	r3, r7
 8003c1a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003c1e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d012      	beq.n	8003c50 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003c2a:	4b13      	ldr	r3, [pc, #76]	; (8003c78 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	0c5b      	lsrs	r3, r3, #17
 8003c30:	f003 0301 	and.w	r3, r3, #1
 8003c34:	3328      	adds	r3, #40	; 0x28
 8003c36:	443b      	add	r3, r7
 8003c38:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003c3c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	4a0e      	ldr	r2, [pc, #56]	; (8003c7c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003c42:	fb03 f202 	mul.w	r2, r3, r2
 8003c46:	69bb      	ldr	r3, [r7, #24]
 8003c48:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c4c:	627b      	str	r3, [r7, #36]	; 0x24
 8003c4e:	e004      	b.n	8003c5a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	4a0b      	ldr	r2, [pc, #44]	; (8003c80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c54:	fb02 f303 	mul.w	r3, r2, r3
 8003c58:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5c:	623b      	str	r3, [r7, #32]
      break;
 8003c5e:	e002      	b.n	8003c66 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003c60:	4b06      	ldr	r3, [pc, #24]	; (8003c7c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003c62:	623b      	str	r3, [r7, #32]
      break;
 8003c64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c66:	6a3b      	ldr	r3, [r7, #32]
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3728      	adds	r7, #40	; 0x28
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bc90      	pop	{r4, r7}
 8003c70:	4770      	bx	lr
 8003c72:	bf00      	nop
 8003c74:	08007ea4 	.word	0x08007ea4
 8003c78:	40021000 	.word	0x40021000
 8003c7c:	007a1200 	.word	0x007a1200
 8003c80:	003d0900 	.word	0x003d0900

08003c84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c84:	b480      	push	{r7}
 8003c86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c88:	4b02      	ldr	r3, [pc, #8]	; (8003c94 <HAL_RCC_GetHCLKFreq+0x10>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bc80      	pop	{r7}
 8003c92:	4770      	bx	lr
 8003c94:	20000000 	.word	0x20000000

08003c98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c9c:	f7ff fff2 	bl	8003c84 <HAL_RCC_GetHCLKFreq>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	4b05      	ldr	r3, [pc, #20]	; (8003cb8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	0a1b      	lsrs	r3, r3, #8
 8003ca8:	f003 0307 	and.w	r3, r3, #7
 8003cac:	4903      	ldr	r1, [pc, #12]	; (8003cbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cae:	5ccb      	ldrb	r3, [r1, r3]
 8003cb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	40021000 	.word	0x40021000
 8003cbc:	08007ec4 	.word	0x08007ec4

08003cc0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b085      	sub	sp, #20
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003cc8:	4b0a      	ldr	r3, [pc, #40]	; (8003cf4 <RCC_Delay+0x34>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a0a      	ldr	r2, [pc, #40]	; (8003cf8 <RCC_Delay+0x38>)
 8003cce:	fba2 2303 	umull	r2, r3, r2, r3
 8003cd2:	0a5b      	lsrs	r3, r3, #9
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	fb02 f303 	mul.w	r3, r2, r3
 8003cda:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003cdc:	bf00      	nop
  }
  while (Delay --);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	1e5a      	subs	r2, r3, #1
 8003ce2:	60fa      	str	r2, [r7, #12]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d1f9      	bne.n	8003cdc <RCC_Delay+0x1c>
}
 8003ce8:	bf00      	nop
 8003cea:	bf00      	nop
 8003cec:	3714      	adds	r7, #20
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bc80      	pop	{r7}
 8003cf2:	4770      	bx	lr
 8003cf4:	20000000 	.word	0x20000000
 8003cf8:	10624dd3 	.word	0x10624dd3

08003cfc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b082      	sub	sp, #8
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d101      	bne.n	8003d0e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e076      	b.n	8003dfc <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d108      	bne.n	8003d28 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d1e:	d009      	beq.n	8003d34 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	61da      	str	r2, [r3, #28]
 8003d26:	e005      	b.n	8003d34 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d106      	bne.n	8003d54 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f7fd fdde 	bl	8001910 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2202      	movs	r2, #2
 8003d58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d6a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003d7c:	431a      	orrs	r2, r3
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d86:	431a      	orrs	r2, r3
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	691b      	ldr	r3, [r3, #16]
 8003d8c:	f003 0302 	and.w	r3, r3, #2
 8003d90:	431a      	orrs	r2, r3
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	695b      	ldr	r3, [r3, #20]
 8003d96:	f003 0301 	and.w	r3, r3, #1
 8003d9a:	431a      	orrs	r2, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	699b      	ldr	r3, [r3, #24]
 8003da0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003da4:	431a      	orrs	r2, r3
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	69db      	ldr	r3, [r3, #28]
 8003daa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003dae:	431a      	orrs	r2, r3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6a1b      	ldr	r3, [r3, #32]
 8003db4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003db8:	ea42 0103 	orr.w	r1, r2, r3
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	430a      	orrs	r2, r1
 8003dca:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	699b      	ldr	r3, [r3, #24]
 8003dd0:	0c1a      	lsrs	r2, r3, #16
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f002 0204 	and.w	r2, r2, #4
 8003dda:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	69da      	ldr	r2, [r3, #28]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003dea:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2201      	movs	r2, #1
 8003df6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003dfa:	2300      	movs	r3, #0
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3708      	adds	r7, #8
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b088      	sub	sp, #32
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	60b9      	str	r1, [r7, #8]
 8003e0e:	603b      	str	r3, [r7, #0]
 8003e10:	4613      	mov	r3, r2
 8003e12:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003e14:	2300      	movs	r3, #0
 8003e16:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d101      	bne.n	8003e26 <HAL_SPI_Transmit+0x22>
 8003e22:	2302      	movs	r3, #2
 8003e24:	e126      	b.n	8004074 <HAL_SPI_Transmit+0x270>
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2201      	movs	r2, #1
 8003e2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e2e:	f7fe f857 	bl	8001ee0 <HAL_GetTick>
 8003e32:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003e34:	88fb      	ldrh	r3, [r7, #6]
 8003e36:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d002      	beq.n	8003e4a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003e44:	2302      	movs	r3, #2
 8003e46:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003e48:	e10b      	b.n	8004062 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d002      	beq.n	8003e56 <HAL_SPI_Transmit+0x52>
 8003e50:	88fb      	ldrh	r3, [r7, #6]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d102      	bne.n	8003e5c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003e5a:	e102      	b.n	8004062 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2203      	movs	r2, #3
 8003e60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2200      	movs	r2, #0
 8003e68:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	68ba      	ldr	r2, [r7, #8]
 8003e6e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	88fa      	ldrh	r2, [r7, #6]
 8003e74:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	88fa      	ldrh	r2, [r7, #6]
 8003e7a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2200      	movs	r2, #0
 8003e86:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2200      	movs	r2, #0
 8003e92:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2200      	movs	r2, #0
 8003e98:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ea2:	d10f      	bne.n	8003ec4 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003eb2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ec2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ece:	2b40      	cmp	r3, #64	; 0x40
 8003ed0:	d007      	beq.n	8003ee2 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ee0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	68db      	ldr	r3, [r3, #12]
 8003ee6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003eea:	d14b      	bne.n	8003f84 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d002      	beq.n	8003efa <HAL_SPI_Transmit+0xf6>
 8003ef4:	8afb      	ldrh	r3, [r7, #22]
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d13e      	bne.n	8003f78 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003efe:	881a      	ldrh	r2, [r3, #0]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f0a:	1c9a      	adds	r2, r3, #2
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	3b01      	subs	r3, #1
 8003f18:	b29a      	uxth	r2, r3
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003f1e:	e02b      	b.n	8003f78 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	f003 0302 	and.w	r3, r3, #2
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	d112      	bne.n	8003f54 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f32:	881a      	ldrh	r2, [r3, #0]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f3e:	1c9a      	adds	r2, r3, #2
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	3b01      	subs	r3, #1
 8003f4c:	b29a      	uxth	r2, r3
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	86da      	strh	r2, [r3, #54]	; 0x36
 8003f52:	e011      	b.n	8003f78 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f54:	f7fd ffc4 	bl	8001ee0 <HAL_GetTick>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	69bb      	ldr	r3, [r7, #24]
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	683a      	ldr	r2, [r7, #0]
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d803      	bhi.n	8003f6c <HAL_SPI_Transmit+0x168>
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f6a:	d102      	bne.n	8003f72 <HAL_SPI_Transmit+0x16e>
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d102      	bne.n	8003f78 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003f76:	e074      	b.n	8004062 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f7c:	b29b      	uxth	r3, r3
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d1ce      	bne.n	8003f20 <HAL_SPI_Transmit+0x11c>
 8003f82:	e04c      	b.n	800401e <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d002      	beq.n	8003f92 <HAL_SPI_Transmit+0x18e>
 8003f8c:	8afb      	ldrh	r3, [r7, #22]
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d140      	bne.n	8004014 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	330c      	adds	r3, #12
 8003f9c:	7812      	ldrb	r2, [r2, #0]
 8003f9e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa4:	1c5a      	adds	r2, r3, #1
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	3b01      	subs	r3, #1
 8003fb2:	b29a      	uxth	r2, r3
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003fb8:	e02c      	b.n	8004014 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	f003 0302 	and.w	r3, r3, #2
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	d113      	bne.n	8003ff0 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	330c      	adds	r3, #12
 8003fd2:	7812      	ldrb	r2, [r2, #0]
 8003fd4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fda:	1c5a      	adds	r2, r3, #1
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fe4:	b29b      	uxth	r3, r3
 8003fe6:	3b01      	subs	r3, #1
 8003fe8:	b29a      	uxth	r2, r3
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	86da      	strh	r2, [r3, #54]	; 0x36
 8003fee:	e011      	b.n	8004014 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ff0:	f7fd ff76 	bl	8001ee0 <HAL_GetTick>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	69bb      	ldr	r3, [r7, #24]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	683a      	ldr	r2, [r7, #0]
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d803      	bhi.n	8004008 <HAL_SPI_Transmit+0x204>
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004006:	d102      	bne.n	800400e <HAL_SPI_Transmit+0x20a>
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d102      	bne.n	8004014 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800400e:	2303      	movs	r3, #3
 8004010:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004012:	e026      	b.n	8004062 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004018:	b29b      	uxth	r3, r3
 800401a:	2b00      	cmp	r3, #0
 800401c:	d1cd      	bne.n	8003fba <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800401e:	69ba      	ldr	r2, [r7, #24]
 8004020:	6839      	ldr	r1, [r7, #0]
 8004022:	68f8      	ldr	r0, [r7, #12]
 8004024:	f000 fbb8 	bl	8004798 <SPI_EndRxTxTransaction>
 8004028:	4603      	mov	r3, r0
 800402a:	2b00      	cmp	r3, #0
 800402c:	d002      	beq.n	8004034 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2220      	movs	r2, #32
 8004032:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d10a      	bne.n	8004052 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800403c:	2300      	movs	r3, #0
 800403e:	613b      	str	r3, [r7, #16]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	613b      	str	r3, [r7, #16]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	613b      	str	r3, [r7, #16]
 8004050:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004056:	2b00      	cmp	r3, #0
 8004058:	d002      	beq.n	8004060 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	77fb      	strb	r3, [r7, #31]
 800405e:	e000      	b.n	8004062 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004060:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2201      	movs	r2, #1
 8004066:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2200      	movs	r2, #0
 800406e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004072:	7ffb      	ldrb	r3, [r7, #31]
}
 8004074:	4618      	mov	r0, r3
 8004076:	3720      	adds	r7, #32
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}

0800407c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b088      	sub	sp, #32
 8004080:	af02      	add	r7, sp, #8
 8004082:	60f8      	str	r0, [r7, #12]
 8004084:	60b9      	str	r1, [r7, #8]
 8004086:	603b      	str	r3, [r7, #0]
 8004088:	4613      	mov	r3, r2
 800408a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800408c:	2300      	movs	r3, #0
 800408e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004098:	d112      	bne.n	80040c0 <HAL_SPI_Receive+0x44>
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d10e      	bne.n	80040c0 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2204      	movs	r2, #4
 80040a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80040aa:	88fa      	ldrh	r2, [r7, #6]
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	9300      	str	r3, [sp, #0]
 80040b0:	4613      	mov	r3, r2
 80040b2:	68ba      	ldr	r2, [r7, #8]
 80040b4:	68b9      	ldr	r1, [r7, #8]
 80040b6:	68f8      	ldr	r0, [r7, #12]
 80040b8:	f000 f8f1 	bl	800429e <HAL_SPI_TransmitReceive>
 80040bc:	4603      	mov	r3, r0
 80040be:	e0ea      	b.n	8004296 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d101      	bne.n	80040ce <HAL_SPI_Receive+0x52>
 80040ca:	2302      	movs	r3, #2
 80040cc:	e0e3      	b.n	8004296 <HAL_SPI_Receive+0x21a>
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2201      	movs	r2, #1
 80040d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80040d6:	f7fd ff03 	bl	8001ee0 <HAL_GetTick>
 80040da:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d002      	beq.n	80040ee <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80040e8:	2302      	movs	r3, #2
 80040ea:	75fb      	strb	r3, [r7, #23]
    goto error;
 80040ec:	e0ca      	b.n	8004284 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d002      	beq.n	80040fa <HAL_SPI_Receive+0x7e>
 80040f4:	88fb      	ldrh	r3, [r7, #6]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d102      	bne.n	8004100 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80040fe:	e0c1      	b.n	8004284 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2204      	movs	r2, #4
 8004104:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2200      	movs	r2, #0
 800410c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	68ba      	ldr	r2, [r7, #8]
 8004112:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	88fa      	ldrh	r2, [r7, #6]
 8004118:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	88fa      	ldrh	r2, [r7, #6]
 800411e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2200      	movs	r2, #0
 8004124:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2200      	movs	r2, #0
 800412a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2200      	movs	r2, #0
 8004130:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2200      	movs	r2, #0
 8004136:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2200      	movs	r2, #0
 800413c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004146:	d10f      	bne.n	8004168 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004156:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004166:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004172:	2b40      	cmp	r3, #64	; 0x40
 8004174:	d007      	beq.n	8004186 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004184:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	68db      	ldr	r3, [r3, #12]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d162      	bne.n	8004254 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800418e:	e02e      	b.n	80041ee <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	f003 0301 	and.w	r3, r3, #1
 800419a:	2b01      	cmp	r3, #1
 800419c:	d115      	bne.n	80041ca <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f103 020c 	add.w	r2, r3, #12
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041aa:	7812      	ldrb	r2, [r2, #0]
 80041ac:	b2d2      	uxtb	r2, r2
 80041ae:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b4:	1c5a      	adds	r2, r3, #1
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041be:	b29b      	uxth	r3, r3
 80041c0:	3b01      	subs	r3, #1
 80041c2:	b29a      	uxth	r2, r3
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80041c8:	e011      	b.n	80041ee <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80041ca:	f7fd fe89 	bl	8001ee0 <HAL_GetTick>
 80041ce:	4602      	mov	r2, r0
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	1ad3      	subs	r3, r2, r3
 80041d4:	683a      	ldr	r2, [r7, #0]
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d803      	bhi.n	80041e2 <HAL_SPI_Receive+0x166>
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041e0:	d102      	bne.n	80041e8 <HAL_SPI_Receive+0x16c>
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d102      	bne.n	80041ee <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80041e8:	2303      	movs	r3, #3
 80041ea:	75fb      	strb	r3, [r7, #23]
          goto error;
 80041ec:	e04a      	b.n	8004284 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d1cb      	bne.n	8004190 <HAL_SPI_Receive+0x114>
 80041f8:	e031      	b.n	800425e <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	f003 0301 	and.w	r3, r3, #1
 8004204:	2b01      	cmp	r3, #1
 8004206:	d113      	bne.n	8004230 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	68da      	ldr	r2, [r3, #12]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004212:	b292      	uxth	r2, r2
 8004214:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800421a:	1c9a      	adds	r2, r3, #2
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004224:	b29b      	uxth	r3, r3
 8004226:	3b01      	subs	r3, #1
 8004228:	b29a      	uxth	r2, r3
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800422e:	e011      	b.n	8004254 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004230:	f7fd fe56 	bl	8001ee0 <HAL_GetTick>
 8004234:	4602      	mov	r2, r0
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	683a      	ldr	r2, [r7, #0]
 800423c:	429a      	cmp	r2, r3
 800423e:	d803      	bhi.n	8004248 <HAL_SPI_Receive+0x1cc>
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004246:	d102      	bne.n	800424e <HAL_SPI_Receive+0x1d2>
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d102      	bne.n	8004254 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800424e:	2303      	movs	r3, #3
 8004250:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004252:	e017      	b.n	8004284 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004258:	b29b      	uxth	r3, r3
 800425a:	2b00      	cmp	r3, #0
 800425c:	d1cd      	bne.n	80041fa <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800425e:	693a      	ldr	r2, [r7, #16]
 8004260:	6839      	ldr	r1, [r7, #0]
 8004262:	68f8      	ldr	r0, [r7, #12]
 8004264:	f000 fa46 	bl	80046f4 <SPI_EndRxTransaction>
 8004268:	4603      	mov	r3, r0
 800426a:	2b00      	cmp	r3, #0
 800426c:	d002      	beq.n	8004274 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2220      	movs	r2, #32
 8004272:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004278:	2b00      	cmp	r3, #0
 800427a:	d002      	beq.n	8004282 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	75fb      	strb	r3, [r7, #23]
 8004280:	e000      	b.n	8004284 <HAL_SPI_Receive+0x208>
  }

error :
 8004282:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2201      	movs	r2, #1
 8004288:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2200      	movs	r2, #0
 8004290:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004294:	7dfb      	ldrb	r3, [r7, #23]
}
 8004296:	4618      	mov	r0, r3
 8004298:	3718      	adds	r7, #24
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}

0800429e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800429e:	b580      	push	{r7, lr}
 80042a0:	b08c      	sub	sp, #48	; 0x30
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	60f8      	str	r0, [r7, #12]
 80042a6:	60b9      	str	r1, [r7, #8]
 80042a8:	607a      	str	r2, [r7, #4]
 80042aa:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80042ac:	2301      	movs	r3, #1
 80042ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80042b0:	2300      	movs	r3, #0
 80042b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d101      	bne.n	80042c4 <HAL_SPI_TransmitReceive+0x26>
 80042c0:	2302      	movs	r3, #2
 80042c2:	e18a      	b.n	80045da <HAL_SPI_TransmitReceive+0x33c>
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80042cc:	f7fd fe08 	bl	8001ee0 <HAL_GetTick>
 80042d0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80042d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80042e2:	887b      	ldrh	r3, [r7, #2]
 80042e4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80042e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d00f      	beq.n	800430e <HAL_SPI_TransmitReceive+0x70>
 80042ee:	69fb      	ldr	r3, [r7, #28]
 80042f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042f4:	d107      	bne.n	8004306 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d103      	bne.n	8004306 <HAL_SPI_TransmitReceive+0x68>
 80042fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004302:	2b04      	cmp	r3, #4
 8004304:	d003      	beq.n	800430e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004306:	2302      	movs	r3, #2
 8004308:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800430c:	e15b      	b.n	80045c6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d005      	beq.n	8004320 <HAL_SPI_TransmitReceive+0x82>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d002      	beq.n	8004320 <HAL_SPI_TransmitReceive+0x82>
 800431a:	887b      	ldrh	r3, [r7, #2]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d103      	bne.n	8004328 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004326:	e14e      	b.n	80045c6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800432e:	b2db      	uxtb	r3, r3
 8004330:	2b04      	cmp	r3, #4
 8004332:	d003      	beq.n	800433c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2205      	movs	r2, #5
 8004338:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2200      	movs	r2, #0
 8004340:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	687a      	ldr	r2, [r7, #4]
 8004346:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	887a      	ldrh	r2, [r7, #2]
 800434c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	887a      	ldrh	r2, [r7, #2]
 8004352:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	68ba      	ldr	r2, [r7, #8]
 8004358:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	887a      	ldrh	r2, [r7, #2]
 800435e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	887a      	ldrh	r2, [r7, #2]
 8004364:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2200      	movs	r2, #0
 800436a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2200      	movs	r2, #0
 8004370:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800437c:	2b40      	cmp	r3, #64	; 0x40
 800437e:	d007      	beq.n	8004390 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800438e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004398:	d178      	bne.n	800448c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d002      	beq.n	80043a8 <HAL_SPI_TransmitReceive+0x10a>
 80043a2:	8b7b      	ldrh	r3, [r7, #26]
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d166      	bne.n	8004476 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ac:	881a      	ldrh	r2, [r3, #0]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b8:	1c9a      	adds	r2, r3, #2
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	3b01      	subs	r3, #1
 80043c6:	b29a      	uxth	r2, r3
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043cc:	e053      	b.n	8004476 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	f003 0302 	and.w	r3, r3, #2
 80043d8:	2b02      	cmp	r3, #2
 80043da:	d11b      	bne.n	8004414 <HAL_SPI_TransmitReceive+0x176>
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d016      	beq.n	8004414 <HAL_SPI_TransmitReceive+0x176>
 80043e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d113      	bne.n	8004414 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043f0:	881a      	ldrh	r2, [r3, #0]
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043fc:	1c9a      	adds	r2, r3, #2
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004406:	b29b      	uxth	r3, r3
 8004408:	3b01      	subs	r3, #1
 800440a:	b29a      	uxth	r2, r3
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004410:	2300      	movs	r3, #0
 8004412:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	f003 0301 	and.w	r3, r3, #1
 800441e:	2b01      	cmp	r3, #1
 8004420:	d119      	bne.n	8004456 <HAL_SPI_TransmitReceive+0x1b8>
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004426:	b29b      	uxth	r3, r3
 8004428:	2b00      	cmp	r3, #0
 800442a:	d014      	beq.n	8004456 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	68da      	ldr	r2, [r3, #12]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004436:	b292      	uxth	r2, r2
 8004438:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800443e:	1c9a      	adds	r2, r3, #2
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004448:	b29b      	uxth	r3, r3
 800444a:	3b01      	subs	r3, #1
 800444c:	b29a      	uxth	r2, r3
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004452:	2301      	movs	r3, #1
 8004454:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004456:	f7fd fd43 	bl	8001ee0 <HAL_GetTick>
 800445a:	4602      	mov	r2, r0
 800445c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004462:	429a      	cmp	r2, r3
 8004464:	d807      	bhi.n	8004476 <HAL_SPI_TransmitReceive+0x1d8>
 8004466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800446c:	d003      	beq.n	8004476 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800446e:	2303      	movs	r3, #3
 8004470:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004474:	e0a7      	b.n	80045c6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800447a:	b29b      	uxth	r3, r3
 800447c:	2b00      	cmp	r3, #0
 800447e:	d1a6      	bne.n	80043ce <HAL_SPI_TransmitReceive+0x130>
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004484:	b29b      	uxth	r3, r3
 8004486:	2b00      	cmp	r3, #0
 8004488:	d1a1      	bne.n	80043ce <HAL_SPI_TransmitReceive+0x130>
 800448a:	e07c      	b.n	8004586 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d002      	beq.n	800449a <HAL_SPI_TransmitReceive+0x1fc>
 8004494:	8b7b      	ldrh	r3, [r7, #26]
 8004496:	2b01      	cmp	r3, #1
 8004498:	d16b      	bne.n	8004572 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	330c      	adds	r3, #12
 80044a4:	7812      	ldrb	r2, [r2, #0]
 80044a6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ac:	1c5a      	adds	r2, r3, #1
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	3b01      	subs	r3, #1
 80044ba:	b29a      	uxth	r2, r3
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80044c0:	e057      	b.n	8004572 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	f003 0302 	and.w	r3, r3, #2
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	d11c      	bne.n	800450a <HAL_SPI_TransmitReceive+0x26c>
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d017      	beq.n	800450a <HAL_SPI_TransmitReceive+0x26c>
 80044da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d114      	bne.n	800450a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	330c      	adds	r3, #12
 80044ea:	7812      	ldrb	r2, [r2, #0]
 80044ec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f2:	1c5a      	adds	r2, r3, #1
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044fc:	b29b      	uxth	r3, r3
 80044fe:	3b01      	subs	r3, #1
 8004500:	b29a      	uxth	r2, r3
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004506:	2300      	movs	r3, #0
 8004508:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	f003 0301 	and.w	r3, r3, #1
 8004514:	2b01      	cmp	r3, #1
 8004516:	d119      	bne.n	800454c <HAL_SPI_TransmitReceive+0x2ae>
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800451c:	b29b      	uxth	r3, r3
 800451e:	2b00      	cmp	r3, #0
 8004520:	d014      	beq.n	800454c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	68da      	ldr	r2, [r3, #12]
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800452c:	b2d2      	uxtb	r2, r2
 800452e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004534:	1c5a      	adds	r2, r3, #1
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800453e:	b29b      	uxth	r3, r3
 8004540:	3b01      	subs	r3, #1
 8004542:	b29a      	uxth	r2, r3
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004548:	2301      	movs	r3, #1
 800454a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800454c:	f7fd fcc8 	bl	8001ee0 <HAL_GetTick>
 8004550:	4602      	mov	r2, r0
 8004552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004558:	429a      	cmp	r2, r3
 800455a:	d803      	bhi.n	8004564 <HAL_SPI_TransmitReceive+0x2c6>
 800455c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800455e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004562:	d102      	bne.n	800456a <HAL_SPI_TransmitReceive+0x2cc>
 8004564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004566:	2b00      	cmp	r3, #0
 8004568:	d103      	bne.n	8004572 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004570:	e029      	b.n	80045c6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004576:	b29b      	uxth	r3, r3
 8004578:	2b00      	cmp	r3, #0
 800457a:	d1a2      	bne.n	80044c2 <HAL_SPI_TransmitReceive+0x224>
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004580:	b29b      	uxth	r3, r3
 8004582:	2b00      	cmp	r3, #0
 8004584:	d19d      	bne.n	80044c2 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004586:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004588:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800458a:	68f8      	ldr	r0, [r7, #12]
 800458c:	f000 f904 	bl	8004798 <SPI_EndRxTxTransaction>
 8004590:	4603      	mov	r3, r0
 8004592:	2b00      	cmp	r3, #0
 8004594:	d006      	beq.n	80045a4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2220      	movs	r2, #32
 80045a0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80045a2:	e010      	b.n	80045c6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d10b      	bne.n	80045c4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80045ac:	2300      	movs	r3, #0
 80045ae:	617b      	str	r3, [r7, #20]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	68db      	ldr	r3, [r3, #12]
 80045b6:	617b      	str	r3, [r7, #20]
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	617b      	str	r3, [r7, #20]
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	e000      	b.n	80045c6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80045c4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2201      	movs	r2, #1
 80045ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2200      	movs	r2, #0
 80045d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80045d6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3730      	adds	r7, #48	; 0x30
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}
	...

080045e4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b088      	sub	sp, #32
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	60f8      	str	r0, [r7, #12]
 80045ec:	60b9      	str	r1, [r7, #8]
 80045ee:	603b      	str	r3, [r7, #0]
 80045f0:	4613      	mov	r3, r2
 80045f2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80045f4:	f7fd fc74 	bl	8001ee0 <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045fc:	1a9b      	subs	r3, r3, r2
 80045fe:	683a      	ldr	r2, [r7, #0]
 8004600:	4413      	add	r3, r2
 8004602:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004604:	f7fd fc6c 	bl	8001ee0 <HAL_GetTick>
 8004608:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800460a:	4b39      	ldr	r3, [pc, #228]	; (80046f0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	015b      	lsls	r3, r3, #5
 8004610:	0d1b      	lsrs	r3, r3, #20
 8004612:	69fa      	ldr	r2, [r7, #28]
 8004614:	fb02 f303 	mul.w	r3, r2, r3
 8004618:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800461a:	e054      	b.n	80046c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004622:	d050      	beq.n	80046c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004624:	f7fd fc5c 	bl	8001ee0 <HAL_GetTick>
 8004628:	4602      	mov	r2, r0
 800462a:	69bb      	ldr	r3, [r7, #24]
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	69fa      	ldr	r2, [r7, #28]
 8004630:	429a      	cmp	r2, r3
 8004632:	d902      	bls.n	800463a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004634:	69fb      	ldr	r3, [r7, #28]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d13d      	bne.n	80046b6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	685a      	ldr	r2, [r3, #4]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004648:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004652:	d111      	bne.n	8004678 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800465c:	d004      	beq.n	8004668 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004666:	d107      	bne.n	8004678 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004676:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800467c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004680:	d10f      	bne.n	80046a2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004690:	601a      	str	r2, [r3, #0]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80046a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2201      	movs	r2, #1
 80046a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2200      	movs	r2, #0
 80046ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80046b2:	2303      	movs	r3, #3
 80046b4:	e017      	b.n	80046e6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d101      	bne.n	80046c0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80046bc:	2300      	movs	r3, #0
 80046be:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	3b01      	subs	r3, #1
 80046c4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	689a      	ldr	r2, [r3, #8]
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	4013      	ands	r3, r2
 80046d0:	68ba      	ldr	r2, [r7, #8]
 80046d2:	429a      	cmp	r2, r3
 80046d4:	bf0c      	ite	eq
 80046d6:	2301      	moveq	r3, #1
 80046d8:	2300      	movne	r3, #0
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	461a      	mov	r2, r3
 80046de:	79fb      	ldrb	r3, [r7, #7]
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d19b      	bne.n	800461c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80046e4:	2300      	movs	r3, #0
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3720      	adds	r7, #32
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	bf00      	nop
 80046f0:	20000000 	.word	0x20000000

080046f4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b086      	sub	sp, #24
 80046f8:	af02      	add	r7, sp, #8
 80046fa:	60f8      	str	r0, [r7, #12]
 80046fc:	60b9      	str	r1, [r7, #8]
 80046fe:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004708:	d111      	bne.n	800472e <SPI_EndRxTransaction+0x3a>
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004712:	d004      	beq.n	800471e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800471c:	d107      	bne.n	800472e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800472c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004736:	d117      	bne.n	8004768 <SPI_EndRxTransaction+0x74>
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004740:	d112      	bne.n	8004768 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	9300      	str	r3, [sp, #0]
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	2200      	movs	r2, #0
 800474a:	2101      	movs	r1, #1
 800474c:	68f8      	ldr	r0, [r7, #12]
 800474e:	f7ff ff49 	bl	80045e4 <SPI_WaitFlagStateUntilTimeout>
 8004752:	4603      	mov	r3, r0
 8004754:	2b00      	cmp	r3, #0
 8004756:	d01a      	beq.n	800478e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800475c:	f043 0220 	orr.w	r2, r3, #32
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004764:	2303      	movs	r3, #3
 8004766:	e013      	b.n	8004790 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	9300      	str	r3, [sp, #0]
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	2200      	movs	r2, #0
 8004770:	2180      	movs	r1, #128	; 0x80
 8004772:	68f8      	ldr	r0, [r7, #12]
 8004774:	f7ff ff36 	bl	80045e4 <SPI_WaitFlagStateUntilTimeout>
 8004778:	4603      	mov	r3, r0
 800477a:	2b00      	cmp	r3, #0
 800477c:	d007      	beq.n	800478e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004782:	f043 0220 	orr.w	r2, r3, #32
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800478a:	2303      	movs	r3, #3
 800478c:	e000      	b.n	8004790 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800478e:	2300      	movs	r3, #0
}
 8004790:	4618      	mov	r0, r3
 8004792:	3710      	adds	r7, #16
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}

08004798 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b086      	sub	sp, #24
 800479c:	af02      	add	r7, sp, #8
 800479e:	60f8      	str	r0, [r7, #12]
 80047a0:	60b9      	str	r1, [r7, #8]
 80047a2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	9300      	str	r3, [sp, #0]
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	2200      	movs	r2, #0
 80047ac:	2180      	movs	r1, #128	; 0x80
 80047ae:	68f8      	ldr	r0, [r7, #12]
 80047b0:	f7ff ff18 	bl	80045e4 <SPI_WaitFlagStateUntilTimeout>
 80047b4:	4603      	mov	r3, r0
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d007      	beq.n	80047ca <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047be:	f043 0220 	orr.w	r2, r3, #32
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	e000      	b.n	80047cc <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80047ca:	2300      	movs	r3, #0
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3710      	adds	r7, #16
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}

080047d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b082      	sub	sp, #8
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d101      	bne.n	80047e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e041      	b.n	800486a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d106      	bne.n	8004800 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2200      	movs	r2, #0
 80047f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f7fd f8d2 	bl	80019a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2202      	movs	r2, #2
 8004804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	3304      	adds	r3, #4
 8004810:	4619      	mov	r1, r3
 8004812:	4610      	mov	r0, r2
 8004814:	f000 fa9e 	bl	8004d54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2201      	movs	r2, #1
 8004824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2201      	movs	r2, #1
 800483c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2201      	movs	r2, #1
 800484c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2201      	movs	r2, #1
 8004864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004868:	2300      	movs	r3, #0
}
 800486a:	4618      	mov	r0, r3
 800486c:	3708      	adds	r7, #8
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
	...

08004874 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004874:	b480      	push	{r7}
 8004876:	b085      	sub	sp, #20
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004882:	b2db      	uxtb	r3, r3
 8004884:	2b01      	cmp	r3, #1
 8004886:	d001      	beq.n	800488c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	e03a      	b.n	8004902 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2202      	movs	r2, #2
 8004890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	68da      	ldr	r2, [r3, #12]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f042 0201 	orr.w	r2, r2, #1
 80048a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a18      	ldr	r2, [pc, #96]	; (800490c <HAL_TIM_Base_Start_IT+0x98>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d00e      	beq.n	80048cc <HAL_TIM_Base_Start_IT+0x58>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048b6:	d009      	beq.n	80048cc <HAL_TIM_Base_Start_IT+0x58>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a14      	ldr	r2, [pc, #80]	; (8004910 <HAL_TIM_Base_Start_IT+0x9c>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d004      	beq.n	80048cc <HAL_TIM_Base_Start_IT+0x58>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a13      	ldr	r2, [pc, #76]	; (8004914 <HAL_TIM_Base_Start_IT+0xa0>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d111      	bne.n	80048f0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	f003 0307 	and.w	r3, r3, #7
 80048d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2b06      	cmp	r3, #6
 80048dc:	d010      	beq.n	8004900 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f042 0201 	orr.w	r2, r2, #1
 80048ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048ee:	e007      	b.n	8004900 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f042 0201 	orr.w	r2, r2, #1
 80048fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004900:	2300      	movs	r3, #0
}
 8004902:	4618      	mov	r0, r3
 8004904:	3714      	adds	r7, #20
 8004906:	46bd      	mov	sp, r7
 8004908:	bc80      	pop	{r7}
 800490a:	4770      	bx	lr
 800490c:	40012c00 	.word	0x40012c00
 8004910:	40000400 	.word	0x40000400
 8004914:	40000800 	.word	0x40000800

08004918 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004918:	b480      	push	{r7}
 800491a:	b083      	sub	sp, #12
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	68da      	ldr	r2, [r3, #12]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f022 0201 	bic.w	r2, r2, #1
 800492e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	6a1a      	ldr	r2, [r3, #32]
 8004936:	f241 1311 	movw	r3, #4369	; 0x1111
 800493a:	4013      	ands	r3, r2
 800493c:	2b00      	cmp	r3, #0
 800493e:	d10f      	bne.n	8004960 <HAL_TIM_Base_Stop_IT+0x48>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	6a1a      	ldr	r2, [r3, #32]
 8004946:	f240 4344 	movw	r3, #1092	; 0x444
 800494a:	4013      	ands	r3, r2
 800494c:	2b00      	cmp	r3, #0
 800494e:	d107      	bne.n	8004960 <HAL_TIM_Base_Stop_IT+0x48>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f022 0201 	bic.w	r2, r2, #1
 800495e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004968:	2300      	movs	r3, #0
}
 800496a:	4618      	mov	r0, r3
 800496c:	370c      	adds	r7, #12
 800496e:	46bd      	mov	sp, r7
 8004970:	bc80      	pop	{r7}
 8004972:	4770      	bx	lr

08004974 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b082      	sub	sp, #8
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	691b      	ldr	r3, [r3, #16]
 8004982:	f003 0302 	and.w	r3, r3, #2
 8004986:	2b02      	cmp	r3, #2
 8004988:	d122      	bne.n	80049d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	f003 0302 	and.w	r3, r3, #2
 8004994:	2b02      	cmp	r3, #2
 8004996:	d11b      	bne.n	80049d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f06f 0202 	mvn.w	r2, #2
 80049a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2201      	movs	r2, #1
 80049a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	699b      	ldr	r3, [r3, #24]
 80049ae:	f003 0303 	and.w	r3, r3, #3
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d003      	beq.n	80049be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f000 f9b1 	bl	8004d1e <HAL_TIM_IC_CaptureCallback>
 80049bc:	e005      	b.n	80049ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f000 f9a4 	bl	8004d0c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f000 f9b3 	bl	8004d30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2200      	movs	r2, #0
 80049ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	691b      	ldr	r3, [r3, #16]
 80049d6:	f003 0304 	and.w	r3, r3, #4
 80049da:	2b04      	cmp	r3, #4
 80049dc:	d122      	bne.n	8004a24 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	68db      	ldr	r3, [r3, #12]
 80049e4:	f003 0304 	and.w	r3, r3, #4
 80049e8:	2b04      	cmp	r3, #4
 80049ea:	d11b      	bne.n	8004a24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f06f 0204 	mvn.w	r2, #4
 80049f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2202      	movs	r2, #2
 80049fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	699b      	ldr	r3, [r3, #24]
 8004a02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d003      	beq.n	8004a12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f000 f987 	bl	8004d1e <HAL_TIM_IC_CaptureCallback>
 8004a10:	e005      	b.n	8004a1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f000 f97a 	bl	8004d0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f000 f989 	bl	8004d30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	691b      	ldr	r3, [r3, #16]
 8004a2a:	f003 0308 	and.w	r3, r3, #8
 8004a2e:	2b08      	cmp	r3, #8
 8004a30:	d122      	bne.n	8004a78 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	f003 0308 	and.w	r3, r3, #8
 8004a3c:	2b08      	cmp	r3, #8
 8004a3e:	d11b      	bne.n	8004a78 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f06f 0208 	mvn.w	r2, #8
 8004a48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2204      	movs	r2, #4
 8004a4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	69db      	ldr	r3, [r3, #28]
 8004a56:	f003 0303 	and.w	r3, r3, #3
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d003      	beq.n	8004a66 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f000 f95d 	bl	8004d1e <HAL_TIM_IC_CaptureCallback>
 8004a64:	e005      	b.n	8004a72 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f000 f950 	bl	8004d0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f000 f95f 	bl	8004d30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	691b      	ldr	r3, [r3, #16]
 8004a7e:	f003 0310 	and.w	r3, r3, #16
 8004a82:	2b10      	cmp	r3, #16
 8004a84:	d122      	bne.n	8004acc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	f003 0310 	and.w	r3, r3, #16
 8004a90:	2b10      	cmp	r3, #16
 8004a92:	d11b      	bne.n	8004acc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f06f 0210 	mvn.w	r2, #16
 8004a9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2208      	movs	r2, #8
 8004aa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	69db      	ldr	r3, [r3, #28]
 8004aaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d003      	beq.n	8004aba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f000 f933 	bl	8004d1e <HAL_TIM_IC_CaptureCallback>
 8004ab8:	e005      	b.n	8004ac6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f000 f926 	bl	8004d0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f000 f935 	bl	8004d30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	691b      	ldr	r3, [r3, #16]
 8004ad2:	f003 0301 	and.w	r3, r3, #1
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d10e      	bne.n	8004af8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	f003 0301 	and.w	r3, r3, #1
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d107      	bne.n	8004af8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f06f 0201 	mvn.w	r2, #1
 8004af0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f7fc fe22 	bl	800173c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	691b      	ldr	r3, [r3, #16]
 8004afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b02:	2b80      	cmp	r3, #128	; 0x80
 8004b04:	d10e      	bne.n	8004b24 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b10:	2b80      	cmp	r3, #128	; 0x80
 8004b12:	d107      	bne.n	8004b24 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f000 fa77 	bl	8005012 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	691b      	ldr	r3, [r3, #16]
 8004b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b2e:	2b40      	cmp	r3, #64	; 0x40
 8004b30:	d10e      	bne.n	8004b50 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b3c:	2b40      	cmp	r3, #64	; 0x40
 8004b3e:	d107      	bne.n	8004b50 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f000 f8f9 	bl	8004d42 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	691b      	ldr	r3, [r3, #16]
 8004b56:	f003 0320 	and.w	r3, r3, #32
 8004b5a:	2b20      	cmp	r3, #32
 8004b5c:	d10e      	bne.n	8004b7c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	f003 0320 	and.w	r3, r3, #32
 8004b68:	2b20      	cmp	r3, #32
 8004b6a:	d107      	bne.n	8004b7c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f06f 0220 	mvn.w	r2, #32
 8004b74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f000 fa42 	bl	8005000 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b7c:	bf00      	nop
 8004b7e:	3708      	adds	r7, #8
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}

08004b84 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b084      	sub	sp, #16
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d101      	bne.n	8004b9c <HAL_TIM_ConfigClockSource+0x18>
 8004b98:	2302      	movs	r3, #2
 8004b9a:	e0b3      	b.n	8004d04 <HAL_TIM_ConfigClockSource+0x180>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2202      	movs	r2, #2
 8004ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004bba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004bc2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	68fa      	ldr	r2, [r7, #12]
 8004bca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bd4:	d03e      	beq.n	8004c54 <HAL_TIM_ConfigClockSource+0xd0>
 8004bd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bda:	f200 8087 	bhi.w	8004cec <HAL_TIM_ConfigClockSource+0x168>
 8004bde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004be2:	f000 8085 	beq.w	8004cf0 <HAL_TIM_ConfigClockSource+0x16c>
 8004be6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bea:	d87f      	bhi.n	8004cec <HAL_TIM_ConfigClockSource+0x168>
 8004bec:	2b70      	cmp	r3, #112	; 0x70
 8004bee:	d01a      	beq.n	8004c26 <HAL_TIM_ConfigClockSource+0xa2>
 8004bf0:	2b70      	cmp	r3, #112	; 0x70
 8004bf2:	d87b      	bhi.n	8004cec <HAL_TIM_ConfigClockSource+0x168>
 8004bf4:	2b60      	cmp	r3, #96	; 0x60
 8004bf6:	d050      	beq.n	8004c9a <HAL_TIM_ConfigClockSource+0x116>
 8004bf8:	2b60      	cmp	r3, #96	; 0x60
 8004bfa:	d877      	bhi.n	8004cec <HAL_TIM_ConfigClockSource+0x168>
 8004bfc:	2b50      	cmp	r3, #80	; 0x50
 8004bfe:	d03c      	beq.n	8004c7a <HAL_TIM_ConfigClockSource+0xf6>
 8004c00:	2b50      	cmp	r3, #80	; 0x50
 8004c02:	d873      	bhi.n	8004cec <HAL_TIM_ConfigClockSource+0x168>
 8004c04:	2b40      	cmp	r3, #64	; 0x40
 8004c06:	d058      	beq.n	8004cba <HAL_TIM_ConfigClockSource+0x136>
 8004c08:	2b40      	cmp	r3, #64	; 0x40
 8004c0a:	d86f      	bhi.n	8004cec <HAL_TIM_ConfigClockSource+0x168>
 8004c0c:	2b30      	cmp	r3, #48	; 0x30
 8004c0e:	d064      	beq.n	8004cda <HAL_TIM_ConfigClockSource+0x156>
 8004c10:	2b30      	cmp	r3, #48	; 0x30
 8004c12:	d86b      	bhi.n	8004cec <HAL_TIM_ConfigClockSource+0x168>
 8004c14:	2b20      	cmp	r3, #32
 8004c16:	d060      	beq.n	8004cda <HAL_TIM_ConfigClockSource+0x156>
 8004c18:	2b20      	cmp	r3, #32
 8004c1a:	d867      	bhi.n	8004cec <HAL_TIM_ConfigClockSource+0x168>
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d05c      	beq.n	8004cda <HAL_TIM_ConfigClockSource+0x156>
 8004c20:	2b10      	cmp	r3, #16
 8004c22:	d05a      	beq.n	8004cda <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004c24:	e062      	b.n	8004cec <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6818      	ldr	r0, [r3, #0]
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	6899      	ldr	r1, [r3, #8]
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	685a      	ldr	r2, [r3, #4]
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	68db      	ldr	r3, [r3, #12]
 8004c36:	f000 f966 	bl	8004f06 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004c48:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	68fa      	ldr	r2, [r7, #12]
 8004c50:	609a      	str	r2, [r3, #8]
      break;
 8004c52:	e04e      	b.n	8004cf2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6818      	ldr	r0, [r3, #0]
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	6899      	ldr	r1, [r3, #8]
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	685a      	ldr	r2, [r3, #4]
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	f000 f94f 	bl	8004f06 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	689a      	ldr	r2, [r3, #8]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c76:	609a      	str	r2, [r3, #8]
      break;
 8004c78:	e03b      	b.n	8004cf2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6818      	ldr	r0, [r3, #0]
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	6859      	ldr	r1, [r3, #4]
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	68db      	ldr	r3, [r3, #12]
 8004c86:	461a      	mov	r2, r3
 8004c88:	f000 f8c6 	bl	8004e18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	2150      	movs	r1, #80	; 0x50
 8004c92:	4618      	mov	r0, r3
 8004c94:	f000 f91d 	bl	8004ed2 <TIM_ITRx_SetConfig>
      break;
 8004c98:	e02b      	b.n	8004cf2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6818      	ldr	r0, [r3, #0]
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	6859      	ldr	r1, [r3, #4]
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	68db      	ldr	r3, [r3, #12]
 8004ca6:	461a      	mov	r2, r3
 8004ca8:	f000 f8e4 	bl	8004e74 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	2160      	movs	r1, #96	; 0x60
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f000 f90d 	bl	8004ed2 <TIM_ITRx_SetConfig>
      break;
 8004cb8:	e01b      	b.n	8004cf2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6818      	ldr	r0, [r3, #0]
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	6859      	ldr	r1, [r3, #4]
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	68db      	ldr	r3, [r3, #12]
 8004cc6:	461a      	mov	r2, r3
 8004cc8:	f000 f8a6 	bl	8004e18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	2140      	movs	r1, #64	; 0x40
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f000 f8fd 	bl	8004ed2 <TIM_ITRx_SetConfig>
      break;
 8004cd8:	e00b      	b.n	8004cf2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4619      	mov	r1, r3
 8004ce4:	4610      	mov	r0, r2
 8004ce6:	f000 f8f4 	bl	8004ed2 <TIM_ITRx_SetConfig>
        break;
 8004cea:	e002      	b.n	8004cf2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004cec:	bf00      	nop
 8004cee:	e000      	b.n	8004cf2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004cf0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d02:	2300      	movs	r3, #0
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3710      	adds	r7, #16
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}

08004d0c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b083      	sub	sp, #12
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d14:	bf00      	nop
 8004d16:	370c      	adds	r7, #12
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bc80      	pop	{r7}
 8004d1c:	4770      	bx	lr

08004d1e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d1e:	b480      	push	{r7}
 8004d20:	b083      	sub	sp, #12
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d26:	bf00      	nop
 8004d28:	370c      	adds	r7, #12
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bc80      	pop	{r7}
 8004d2e:	4770      	bx	lr

08004d30 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b083      	sub	sp, #12
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d38:	bf00      	nop
 8004d3a:	370c      	adds	r7, #12
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bc80      	pop	{r7}
 8004d40:	4770      	bx	lr

08004d42 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d42:	b480      	push	{r7}
 8004d44:	b083      	sub	sp, #12
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d4a:	bf00      	nop
 8004d4c:	370c      	adds	r7, #12
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bc80      	pop	{r7}
 8004d52:	4770      	bx	lr

08004d54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b085      	sub	sp, #20
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	4a29      	ldr	r2, [pc, #164]	; (8004e0c <TIM_Base_SetConfig+0xb8>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d00b      	beq.n	8004d84 <TIM_Base_SetConfig+0x30>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d72:	d007      	beq.n	8004d84 <TIM_Base_SetConfig+0x30>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	4a26      	ldr	r2, [pc, #152]	; (8004e10 <TIM_Base_SetConfig+0xbc>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d003      	beq.n	8004d84 <TIM_Base_SetConfig+0x30>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	4a25      	ldr	r2, [pc, #148]	; (8004e14 <TIM_Base_SetConfig+0xc0>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d108      	bne.n	8004d96 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	68fa      	ldr	r2, [r7, #12]
 8004d92:	4313      	orrs	r3, r2
 8004d94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4a1c      	ldr	r2, [pc, #112]	; (8004e0c <TIM_Base_SetConfig+0xb8>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d00b      	beq.n	8004db6 <TIM_Base_SetConfig+0x62>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004da4:	d007      	beq.n	8004db6 <TIM_Base_SetConfig+0x62>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	4a19      	ldr	r2, [pc, #100]	; (8004e10 <TIM_Base_SetConfig+0xbc>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d003      	beq.n	8004db6 <TIM_Base_SetConfig+0x62>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	4a18      	ldr	r2, [pc, #96]	; (8004e14 <TIM_Base_SetConfig+0xc0>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d108      	bne.n	8004dc8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	68db      	ldr	r3, [r3, #12]
 8004dc2:	68fa      	ldr	r2, [r7, #12]
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	695b      	ldr	r3, [r3, #20]
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	68fa      	ldr	r2, [r7, #12]
 8004dda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	689a      	ldr	r2, [r3, #8]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	4a07      	ldr	r2, [pc, #28]	; (8004e0c <TIM_Base_SetConfig+0xb8>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d103      	bne.n	8004dfc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	691a      	ldr	r2, [r3, #16]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	615a      	str	r2, [r3, #20]
}
 8004e02:	bf00      	nop
 8004e04:	3714      	adds	r7, #20
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bc80      	pop	{r7}
 8004e0a:	4770      	bx	lr
 8004e0c:	40012c00 	.word	0x40012c00
 8004e10:	40000400 	.word	0x40000400
 8004e14:	40000800 	.word	0x40000800

08004e18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b087      	sub	sp, #28
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	60f8      	str	r0, [r7, #12]
 8004e20:	60b9      	str	r1, [r7, #8]
 8004e22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	6a1b      	ldr	r3, [r3, #32]
 8004e28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	6a1b      	ldr	r3, [r3, #32]
 8004e2e:	f023 0201 	bic.w	r2, r3, #1
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	699b      	ldr	r3, [r3, #24]
 8004e3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	011b      	lsls	r3, r3, #4
 8004e48:	693a      	ldr	r2, [r7, #16]
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	f023 030a 	bic.w	r3, r3, #10
 8004e54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e56:	697a      	ldr	r2, [r7, #20]
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	693a      	ldr	r2, [r7, #16]
 8004e62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	697a      	ldr	r2, [r7, #20]
 8004e68:	621a      	str	r2, [r3, #32]
}
 8004e6a:	bf00      	nop
 8004e6c:	371c      	adds	r7, #28
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bc80      	pop	{r7}
 8004e72:	4770      	bx	lr

08004e74 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b087      	sub	sp, #28
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	60f8      	str	r0, [r7, #12]
 8004e7c:	60b9      	str	r1, [r7, #8]
 8004e7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6a1b      	ldr	r3, [r3, #32]
 8004e84:	f023 0210 	bic.w	r2, r3, #16
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	699b      	ldr	r3, [r3, #24]
 8004e90:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	6a1b      	ldr	r3, [r3, #32]
 8004e96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e9e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	031b      	lsls	r3, r3, #12
 8004ea4:	697a      	ldr	r2, [r7, #20]
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004eb0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	011b      	lsls	r3, r3, #4
 8004eb6:	693a      	ldr	r2, [r7, #16]
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	697a      	ldr	r2, [r7, #20]
 8004ec0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	693a      	ldr	r2, [r7, #16]
 8004ec6:	621a      	str	r2, [r3, #32]
}
 8004ec8:	bf00      	nop
 8004eca:	371c      	adds	r7, #28
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bc80      	pop	{r7}
 8004ed0:	4770      	bx	lr

08004ed2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004ed2:	b480      	push	{r7}
 8004ed4:	b085      	sub	sp, #20
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	6078      	str	r0, [r7, #4]
 8004eda:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ee8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004eea:	683a      	ldr	r2, [r7, #0]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	f043 0307 	orr.w	r3, r3, #7
 8004ef4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	68fa      	ldr	r2, [r7, #12]
 8004efa:	609a      	str	r2, [r3, #8]
}
 8004efc:	bf00      	nop
 8004efe:	3714      	adds	r7, #20
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bc80      	pop	{r7}
 8004f04:	4770      	bx	lr

08004f06 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f06:	b480      	push	{r7}
 8004f08:	b087      	sub	sp, #28
 8004f0a:	af00      	add	r7, sp, #0
 8004f0c:	60f8      	str	r0, [r7, #12]
 8004f0e:	60b9      	str	r1, [r7, #8]
 8004f10:	607a      	str	r2, [r7, #4]
 8004f12:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f20:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	021a      	lsls	r2, r3, #8
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	431a      	orrs	r2, r3
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	697a      	ldr	r2, [r7, #20]
 8004f30:	4313      	orrs	r3, r2
 8004f32:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	697a      	ldr	r2, [r7, #20]
 8004f38:	609a      	str	r2, [r3, #8]
}
 8004f3a:	bf00      	nop
 8004f3c:	371c      	adds	r7, #28
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bc80      	pop	{r7}
 8004f42:	4770      	bx	lr

08004f44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b085      	sub	sp, #20
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d101      	bne.n	8004f5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f58:	2302      	movs	r3, #2
 8004f5a:	e046      	b.n	8004fea <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2202      	movs	r2, #2
 8004f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	68fa      	ldr	r2, [r7, #12]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	68fa      	ldr	r2, [r7, #12]
 8004f94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a16      	ldr	r2, [pc, #88]	; (8004ff4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d00e      	beq.n	8004fbe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fa8:	d009      	beq.n	8004fbe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a12      	ldr	r2, [pc, #72]	; (8004ff8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d004      	beq.n	8004fbe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a10      	ldr	r2, [pc, #64]	; (8004ffc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d10c      	bne.n	8004fd8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fc4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	68ba      	ldr	r2, [r7, #8]
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	68ba      	ldr	r2, [r7, #8]
 8004fd6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004fe8:	2300      	movs	r3, #0
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3714      	adds	r7, #20
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bc80      	pop	{r7}
 8004ff2:	4770      	bx	lr
 8004ff4:	40012c00 	.word	0x40012c00
 8004ff8:	40000400 	.word	0x40000400
 8004ffc:	40000800 	.word	0x40000800

08005000 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005000:	b480      	push	{r7}
 8005002:	b083      	sub	sp, #12
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005008:	bf00      	nop
 800500a:	370c      	adds	r7, #12
 800500c:	46bd      	mov	sp, r7
 800500e:	bc80      	pop	{r7}
 8005010:	4770      	bx	lr

08005012 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005012:	b480      	push	{r7}
 8005014:	b083      	sub	sp, #12
 8005016:	af00      	add	r7, sp, #0
 8005018:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800501a:	bf00      	nop
 800501c:	370c      	adds	r7, #12
 800501e:	46bd      	mov	sp, r7
 8005020:	bc80      	pop	{r7}
 8005022:	4770      	bx	lr

08005024 <__errno>:
 8005024:	4b01      	ldr	r3, [pc, #4]	; (800502c <__errno+0x8>)
 8005026:	6818      	ldr	r0, [r3, #0]
 8005028:	4770      	bx	lr
 800502a:	bf00      	nop
 800502c:	2000000c 	.word	0x2000000c

08005030 <__libc_init_array>:
 8005030:	b570      	push	{r4, r5, r6, lr}
 8005032:	2600      	movs	r6, #0
 8005034:	4d0c      	ldr	r5, [pc, #48]	; (8005068 <__libc_init_array+0x38>)
 8005036:	4c0d      	ldr	r4, [pc, #52]	; (800506c <__libc_init_array+0x3c>)
 8005038:	1b64      	subs	r4, r4, r5
 800503a:	10a4      	asrs	r4, r4, #2
 800503c:	42a6      	cmp	r6, r4
 800503e:	d109      	bne.n	8005054 <__libc_init_array+0x24>
 8005040:	f002 fefa 	bl	8007e38 <_init>
 8005044:	2600      	movs	r6, #0
 8005046:	4d0a      	ldr	r5, [pc, #40]	; (8005070 <__libc_init_array+0x40>)
 8005048:	4c0a      	ldr	r4, [pc, #40]	; (8005074 <__libc_init_array+0x44>)
 800504a:	1b64      	subs	r4, r4, r5
 800504c:	10a4      	asrs	r4, r4, #2
 800504e:	42a6      	cmp	r6, r4
 8005050:	d105      	bne.n	800505e <__libc_init_array+0x2e>
 8005052:	bd70      	pop	{r4, r5, r6, pc}
 8005054:	f855 3b04 	ldr.w	r3, [r5], #4
 8005058:	4798      	blx	r3
 800505a:	3601      	adds	r6, #1
 800505c:	e7ee      	b.n	800503c <__libc_init_array+0xc>
 800505e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005062:	4798      	blx	r3
 8005064:	3601      	adds	r6, #1
 8005066:	e7f2      	b.n	800504e <__libc_init_array+0x1e>
 8005068:	080084cc 	.word	0x080084cc
 800506c:	080084cc 	.word	0x080084cc
 8005070:	080084cc 	.word	0x080084cc
 8005074:	080084d0 	.word	0x080084d0

08005078 <memset>:
 8005078:	4603      	mov	r3, r0
 800507a:	4402      	add	r2, r0
 800507c:	4293      	cmp	r3, r2
 800507e:	d100      	bne.n	8005082 <memset+0xa>
 8005080:	4770      	bx	lr
 8005082:	f803 1b01 	strb.w	r1, [r3], #1
 8005086:	e7f9      	b.n	800507c <memset+0x4>

08005088 <__cvt>:
 8005088:	2b00      	cmp	r3, #0
 800508a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800508e:	461f      	mov	r7, r3
 8005090:	bfbb      	ittet	lt
 8005092:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005096:	461f      	movlt	r7, r3
 8005098:	2300      	movge	r3, #0
 800509a:	232d      	movlt	r3, #45	; 0x2d
 800509c:	b088      	sub	sp, #32
 800509e:	4614      	mov	r4, r2
 80050a0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80050a2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80050a4:	7013      	strb	r3, [r2, #0]
 80050a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80050a8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80050ac:	f023 0820 	bic.w	r8, r3, #32
 80050b0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80050b4:	d005      	beq.n	80050c2 <__cvt+0x3a>
 80050b6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80050ba:	d100      	bne.n	80050be <__cvt+0x36>
 80050bc:	3501      	adds	r5, #1
 80050be:	2302      	movs	r3, #2
 80050c0:	e000      	b.n	80050c4 <__cvt+0x3c>
 80050c2:	2303      	movs	r3, #3
 80050c4:	aa07      	add	r2, sp, #28
 80050c6:	9204      	str	r2, [sp, #16]
 80050c8:	aa06      	add	r2, sp, #24
 80050ca:	e9cd a202 	strd	sl, r2, [sp, #8]
 80050ce:	e9cd 3500 	strd	r3, r5, [sp]
 80050d2:	4622      	mov	r2, r4
 80050d4:	463b      	mov	r3, r7
 80050d6:	f000 fce3 	bl	8005aa0 <_dtoa_r>
 80050da:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80050de:	4606      	mov	r6, r0
 80050e0:	d102      	bne.n	80050e8 <__cvt+0x60>
 80050e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80050e4:	07db      	lsls	r3, r3, #31
 80050e6:	d522      	bpl.n	800512e <__cvt+0xa6>
 80050e8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80050ec:	eb06 0905 	add.w	r9, r6, r5
 80050f0:	d110      	bne.n	8005114 <__cvt+0x8c>
 80050f2:	7833      	ldrb	r3, [r6, #0]
 80050f4:	2b30      	cmp	r3, #48	; 0x30
 80050f6:	d10a      	bne.n	800510e <__cvt+0x86>
 80050f8:	2200      	movs	r2, #0
 80050fa:	2300      	movs	r3, #0
 80050fc:	4620      	mov	r0, r4
 80050fe:	4639      	mov	r1, r7
 8005100:	f7fb fc52 	bl	80009a8 <__aeabi_dcmpeq>
 8005104:	b918      	cbnz	r0, 800510e <__cvt+0x86>
 8005106:	f1c5 0501 	rsb	r5, r5, #1
 800510a:	f8ca 5000 	str.w	r5, [sl]
 800510e:	f8da 3000 	ldr.w	r3, [sl]
 8005112:	4499      	add	r9, r3
 8005114:	2200      	movs	r2, #0
 8005116:	2300      	movs	r3, #0
 8005118:	4620      	mov	r0, r4
 800511a:	4639      	mov	r1, r7
 800511c:	f7fb fc44 	bl	80009a8 <__aeabi_dcmpeq>
 8005120:	b108      	cbz	r0, 8005126 <__cvt+0x9e>
 8005122:	f8cd 901c 	str.w	r9, [sp, #28]
 8005126:	2230      	movs	r2, #48	; 0x30
 8005128:	9b07      	ldr	r3, [sp, #28]
 800512a:	454b      	cmp	r3, r9
 800512c:	d307      	bcc.n	800513e <__cvt+0xb6>
 800512e:	4630      	mov	r0, r6
 8005130:	9b07      	ldr	r3, [sp, #28]
 8005132:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005134:	1b9b      	subs	r3, r3, r6
 8005136:	6013      	str	r3, [r2, #0]
 8005138:	b008      	add	sp, #32
 800513a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800513e:	1c59      	adds	r1, r3, #1
 8005140:	9107      	str	r1, [sp, #28]
 8005142:	701a      	strb	r2, [r3, #0]
 8005144:	e7f0      	b.n	8005128 <__cvt+0xa0>

08005146 <__exponent>:
 8005146:	4603      	mov	r3, r0
 8005148:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800514a:	2900      	cmp	r1, #0
 800514c:	f803 2b02 	strb.w	r2, [r3], #2
 8005150:	bfb6      	itet	lt
 8005152:	222d      	movlt	r2, #45	; 0x2d
 8005154:	222b      	movge	r2, #43	; 0x2b
 8005156:	4249      	neglt	r1, r1
 8005158:	2909      	cmp	r1, #9
 800515a:	7042      	strb	r2, [r0, #1]
 800515c:	dd2b      	ble.n	80051b6 <__exponent+0x70>
 800515e:	f10d 0407 	add.w	r4, sp, #7
 8005162:	46a4      	mov	ip, r4
 8005164:	270a      	movs	r7, #10
 8005166:	fb91 f6f7 	sdiv	r6, r1, r7
 800516a:	460a      	mov	r2, r1
 800516c:	46a6      	mov	lr, r4
 800516e:	fb07 1516 	mls	r5, r7, r6, r1
 8005172:	2a63      	cmp	r2, #99	; 0x63
 8005174:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8005178:	4631      	mov	r1, r6
 800517a:	f104 34ff 	add.w	r4, r4, #4294967295
 800517e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005182:	dcf0      	bgt.n	8005166 <__exponent+0x20>
 8005184:	3130      	adds	r1, #48	; 0x30
 8005186:	f1ae 0502 	sub.w	r5, lr, #2
 800518a:	f804 1c01 	strb.w	r1, [r4, #-1]
 800518e:	4629      	mov	r1, r5
 8005190:	1c44      	adds	r4, r0, #1
 8005192:	4561      	cmp	r1, ip
 8005194:	d30a      	bcc.n	80051ac <__exponent+0x66>
 8005196:	f10d 0209 	add.w	r2, sp, #9
 800519a:	eba2 020e 	sub.w	r2, r2, lr
 800519e:	4565      	cmp	r5, ip
 80051a0:	bf88      	it	hi
 80051a2:	2200      	movhi	r2, #0
 80051a4:	4413      	add	r3, r2
 80051a6:	1a18      	subs	r0, r3, r0
 80051a8:	b003      	add	sp, #12
 80051aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051ac:	f811 2b01 	ldrb.w	r2, [r1], #1
 80051b0:	f804 2f01 	strb.w	r2, [r4, #1]!
 80051b4:	e7ed      	b.n	8005192 <__exponent+0x4c>
 80051b6:	2330      	movs	r3, #48	; 0x30
 80051b8:	3130      	adds	r1, #48	; 0x30
 80051ba:	7083      	strb	r3, [r0, #2]
 80051bc:	70c1      	strb	r1, [r0, #3]
 80051be:	1d03      	adds	r3, r0, #4
 80051c0:	e7f1      	b.n	80051a6 <__exponent+0x60>
	...

080051c4 <_printf_float>:
 80051c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051c8:	b091      	sub	sp, #68	; 0x44
 80051ca:	460c      	mov	r4, r1
 80051cc:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80051d0:	4616      	mov	r6, r2
 80051d2:	461f      	mov	r7, r3
 80051d4:	4605      	mov	r5, r0
 80051d6:	f001 fa51 	bl	800667c <_localeconv_r>
 80051da:	6803      	ldr	r3, [r0, #0]
 80051dc:	4618      	mov	r0, r3
 80051de:	9309      	str	r3, [sp, #36]	; 0x24
 80051e0:	f7fa ffb6 	bl	8000150 <strlen>
 80051e4:	2300      	movs	r3, #0
 80051e6:	930e      	str	r3, [sp, #56]	; 0x38
 80051e8:	f8d8 3000 	ldr.w	r3, [r8]
 80051ec:	900a      	str	r0, [sp, #40]	; 0x28
 80051ee:	3307      	adds	r3, #7
 80051f0:	f023 0307 	bic.w	r3, r3, #7
 80051f4:	f103 0208 	add.w	r2, r3, #8
 80051f8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80051fc:	f8d4 b000 	ldr.w	fp, [r4]
 8005200:	f8c8 2000 	str.w	r2, [r8]
 8005204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005208:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800520c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8005210:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8005214:	930b      	str	r3, [sp, #44]	; 0x2c
 8005216:	f04f 32ff 	mov.w	r2, #4294967295
 800521a:	4640      	mov	r0, r8
 800521c:	4b9c      	ldr	r3, [pc, #624]	; (8005490 <_printf_float+0x2cc>)
 800521e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005220:	f7fb fbf4 	bl	8000a0c <__aeabi_dcmpun>
 8005224:	bb70      	cbnz	r0, 8005284 <_printf_float+0xc0>
 8005226:	f04f 32ff 	mov.w	r2, #4294967295
 800522a:	4640      	mov	r0, r8
 800522c:	4b98      	ldr	r3, [pc, #608]	; (8005490 <_printf_float+0x2cc>)
 800522e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005230:	f7fb fbce 	bl	80009d0 <__aeabi_dcmple>
 8005234:	bb30      	cbnz	r0, 8005284 <_printf_float+0xc0>
 8005236:	2200      	movs	r2, #0
 8005238:	2300      	movs	r3, #0
 800523a:	4640      	mov	r0, r8
 800523c:	4651      	mov	r1, sl
 800523e:	f7fb fbbd 	bl	80009bc <__aeabi_dcmplt>
 8005242:	b110      	cbz	r0, 800524a <_printf_float+0x86>
 8005244:	232d      	movs	r3, #45	; 0x2d
 8005246:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800524a:	4b92      	ldr	r3, [pc, #584]	; (8005494 <_printf_float+0x2d0>)
 800524c:	4892      	ldr	r0, [pc, #584]	; (8005498 <_printf_float+0x2d4>)
 800524e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005252:	bf94      	ite	ls
 8005254:	4698      	movls	r8, r3
 8005256:	4680      	movhi	r8, r0
 8005258:	2303      	movs	r3, #3
 800525a:	f04f 0a00 	mov.w	sl, #0
 800525e:	6123      	str	r3, [r4, #16]
 8005260:	f02b 0304 	bic.w	r3, fp, #4
 8005264:	6023      	str	r3, [r4, #0]
 8005266:	4633      	mov	r3, r6
 8005268:	4621      	mov	r1, r4
 800526a:	4628      	mov	r0, r5
 800526c:	9700      	str	r7, [sp, #0]
 800526e:	aa0f      	add	r2, sp, #60	; 0x3c
 8005270:	f000 f9d4 	bl	800561c <_printf_common>
 8005274:	3001      	adds	r0, #1
 8005276:	f040 8090 	bne.w	800539a <_printf_float+0x1d6>
 800527a:	f04f 30ff 	mov.w	r0, #4294967295
 800527e:	b011      	add	sp, #68	; 0x44
 8005280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005284:	4642      	mov	r2, r8
 8005286:	4653      	mov	r3, sl
 8005288:	4640      	mov	r0, r8
 800528a:	4651      	mov	r1, sl
 800528c:	f7fb fbbe 	bl	8000a0c <__aeabi_dcmpun>
 8005290:	b148      	cbz	r0, 80052a6 <_printf_float+0xe2>
 8005292:	f1ba 0f00 	cmp.w	sl, #0
 8005296:	bfb8      	it	lt
 8005298:	232d      	movlt	r3, #45	; 0x2d
 800529a:	4880      	ldr	r0, [pc, #512]	; (800549c <_printf_float+0x2d8>)
 800529c:	bfb8      	it	lt
 800529e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80052a2:	4b7f      	ldr	r3, [pc, #508]	; (80054a0 <_printf_float+0x2dc>)
 80052a4:	e7d3      	b.n	800524e <_printf_float+0x8a>
 80052a6:	6863      	ldr	r3, [r4, #4]
 80052a8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80052ac:	1c5a      	adds	r2, r3, #1
 80052ae:	d142      	bne.n	8005336 <_printf_float+0x172>
 80052b0:	2306      	movs	r3, #6
 80052b2:	6063      	str	r3, [r4, #4]
 80052b4:	2200      	movs	r2, #0
 80052b6:	9206      	str	r2, [sp, #24]
 80052b8:	aa0e      	add	r2, sp, #56	; 0x38
 80052ba:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80052be:	aa0d      	add	r2, sp, #52	; 0x34
 80052c0:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80052c4:	9203      	str	r2, [sp, #12]
 80052c6:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80052ca:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80052ce:	6023      	str	r3, [r4, #0]
 80052d0:	6863      	ldr	r3, [r4, #4]
 80052d2:	4642      	mov	r2, r8
 80052d4:	9300      	str	r3, [sp, #0]
 80052d6:	4628      	mov	r0, r5
 80052d8:	4653      	mov	r3, sl
 80052da:	910b      	str	r1, [sp, #44]	; 0x2c
 80052dc:	f7ff fed4 	bl	8005088 <__cvt>
 80052e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80052e2:	4680      	mov	r8, r0
 80052e4:	2947      	cmp	r1, #71	; 0x47
 80052e6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80052e8:	d108      	bne.n	80052fc <_printf_float+0x138>
 80052ea:	1cc8      	adds	r0, r1, #3
 80052ec:	db02      	blt.n	80052f4 <_printf_float+0x130>
 80052ee:	6863      	ldr	r3, [r4, #4]
 80052f0:	4299      	cmp	r1, r3
 80052f2:	dd40      	ble.n	8005376 <_printf_float+0x1b2>
 80052f4:	f1a9 0902 	sub.w	r9, r9, #2
 80052f8:	fa5f f989 	uxtb.w	r9, r9
 80052fc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005300:	d81f      	bhi.n	8005342 <_printf_float+0x17e>
 8005302:	464a      	mov	r2, r9
 8005304:	3901      	subs	r1, #1
 8005306:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800530a:	910d      	str	r1, [sp, #52]	; 0x34
 800530c:	f7ff ff1b 	bl	8005146 <__exponent>
 8005310:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005312:	4682      	mov	sl, r0
 8005314:	1813      	adds	r3, r2, r0
 8005316:	2a01      	cmp	r2, #1
 8005318:	6123      	str	r3, [r4, #16]
 800531a:	dc02      	bgt.n	8005322 <_printf_float+0x15e>
 800531c:	6822      	ldr	r2, [r4, #0]
 800531e:	07d2      	lsls	r2, r2, #31
 8005320:	d501      	bpl.n	8005326 <_printf_float+0x162>
 8005322:	3301      	adds	r3, #1
 8005324:	6123      	str	r3, [r4, #16]
 8005326:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800532a:	2b00      	cmp	r3, #0
 800532c:	d09b      	beq.n	8005266 <_printf_float+0xa2>
 800532e:	232d      	movs	r3, #45	; 0x2d
 8005330:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005334:	e797      	b.n	8005266 <_printf_float+0xa2>
 8005336:	2947      	cmp	r1, #71	; 0x47
 8005338:	d1bc      	bne.n	80052b4 <_printf_float+0xf0>
 800533a:	2b00      	cmp	r3, #0
 800533c:	d1ba      	bne.n	80052b4 <_printf_float+0xf0>
 800533e:	2301      	movs	r3, #1
 8005340:	e7b7      	b.n	80052b2 <_printf_float+0xee>
 8005342:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005346:	d118      	bne.n	800537a <_printf_float+0x1b6>
 8005348:	2900      	cmp	r1, #0
 800534a:	6863      	ldr	r3, [r4, #4]
 800534c:	dd0b      	ble.n	8005366 <_printf_float+0x1a2>
 800534e:	6121      	str	r1, [r4, #16]
 8005350:	b913      	cbnz	r3, 8005358 <_printf_float+0x194>
 8005352:	6822      	ldr	r2, [r4, #0]
 8005354:	07d0      	lsls	r0, r2, #31
 8005356:	d502      	bpl.n	800535e <_printf_float+0x19a>
 8005358:	3301      	adds	r3, #1
 800535a:	440b      	add	r3, r1
 800535c:	6123      	str	r3, [r4, #16]
 800535e:	f04f 0a00 	mov.w	sl, #0
 8005362:	65a1      	str	r1, [r4, #88]	; 0x58
 8005364:	e7df      	b.n	8005326 <_printf_float+0x162>
 8005366:	b913      	cbnz	r3, 800536e <_printf_float+0x1aa>
 8005368:	6822      	ldr	r2, [r4, #0]
 800536a:	07d2      	lsls	r2, r2, #31
 800536c:	d501      	bpl.n	8005372 <_printf_float+0x1ae>
 800536e:	3302      	adds	r3, #2
 8005370:	e7f4      	b.n	800535c <_printf_float+0x198>
 8005372:	2301      	movs	r3, #1
 8005374:	e7f2      	b.n	800535c <_printf_float+0x198>
 8005376:	f04f 0967 	mov.w	r9, #103	; 0x67
 800537a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800537c:	4299      	cmp	r1, r3
 800537e:	db05      	blt.n	800538c <_printf_float+0x1c8>
 8005380:	6823      	ldr	r3, [r4, #0]
 8005382:	6121      	str	r1, [r4, #16]
 8005384:	07d8      	lsls	r0, r3, #31
 8005386:	d5ea      	bpl.n	800535e <_printf_float+0x19a>
 8005388:	1c4b      	adds	r3, r1, #1
 800538a:	e7e7      	b.n	800535c <_printf_float+0x198>
 800538c:	2900      	cmp	r1, #0
 800538e:	bfcc      	ite	gt
 8005390:	2201      	movgt	r2, #1
 8005392:	f1c1 0202 	rsble	r2, r1, #2
 8005396:	4413      	add	r3, r2
 8005398:	e7e0      	b.n	800535c <_printf_float+0x198>
 800539a:	6823      	ldr	r3, [r4, #0]
 800539c:	055a      	lsls	r2, r3, #21
 800539e:	d407      	bmi.n	80053b0 <_printf_float+0x1ec>
 80053a0:	6923      	ldr	r3, [r4, #16]
 80053a2:	4642      	mov	r2, r8
 80053a4:	4631      	mov	r1, r6
 80053a6:	4628      	mov	r0, r5
 80053a8:	47b8      	blx	r7
 80053aa:	3001      	adds	r0, #1
 80053ac:	d12b      	bne.n	8005406 <_printf_float+0x242>
 80053ae:	e764      	b.n	800527a <_printf_float+0xb6>
 80053b0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80053b4:	f240 80dd 	bls.w	8005572 <_printf_float+0x3ae>
 80053b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80053bc:	2200      	movs	r2, #0
 80053be:	2300      	movs	r3, #0
 80053c0:	f7fb faf2 	bl	80009a8 <__aeabi_dcmpeq>
 80053c4:	2800      	cmp	r0, #0
 80053c6:	d033      	beq.n	8005430 <_printf_float+0x26c>
 80053c8:	2301      	movs	r3, #1
 80053ca:	4631      	mov	r1, r6
 80053cc:	4628      	mov	r0, r5
 80053ce:	4a35      	ldr	r2, [pc, #212]	; (80054a4 <_printf_float+0x2e0>)
 80053d0:	47b8      	blx	r7
 80053d2:	3001      	adds	r0, #1
 80053d4:	f43f af51 	beq.w	800527a <_printf_float+0xb6>
 80053d8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80053dc:	429a      	cmp	r2, r3
 80053de:	db02      	blt.n	80053e6 <_printf_float+0x222>
 80053e0:	6823      	ldr	r3, [r4, #0]
 80053e2:	07d8      	lsls	r0, r3, #31
 80053e4:	d50f      	bpl.n	8005406 <_printf_float+0x242>
 80053e6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80053ea:	4631      	mov	r1, r6
 80053ec:	4628      	mov	r0, r5
 80053ee:	47b8      	blx	r7
 80053f0:	3001      	adds	r0, #1
 80053f2:	f43f af42 	beq.w	800527a <_printf_float+0xb6>
 80053f6:	f04f 0800 	mov.w	r8, #0
 80053fa:	f104 091a 	add.w	r9, r4, #26
 80053fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005400:	3b01      	subs	r3, #1
 8005402:	4543      	cmp	r3, r8
 8005404:	dc09      	bgt.n	800541a <_printf_float+0x256>
 8005406:	6823      	ldr	r3, [r4, #0]
 8005408:	079b      	lsls	r3, r3, #30
 800540a:	f100 8102 	bmi.w	8005612 <_printf_float+0x44e>
 800540e:	68e0      	ldr	r0, [r4, #12]
 8005410:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005412:	4298      	cmp	r0, r3
 8005414:	bfb8      	it	lt
 8005416:	4618      	movlt	r0, r3
 8005418:	e731      	b.n	800527e <_printf_float+0xba>
 800541a:	2301      	movs	r3, #1
 800541c:	464a      	mov	r2, r9
 800541e:	4631      	mov	r1, r6
 8005420:	4628      	mov	r0, r5
 8005422:	47b8      	blx	r7
 8005424:	3001      	adds	r0, #1
 8005426:	f43f af28 	beq.w	800527a <_printf_float+0xb6>
 800542a:	f108 0801 	add.w	r8, r8, #1
 800542e:	e7e6      	b.n	80053fe <_printf_float+0x23a>
 8005430:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005432:	2b00      	cmp	r3, #0
 8005434:	dc38      	bgt.n	80054a8 <_printf_float+0x2e4>
 8005436:	2301      	movs	r3, #1
 8005438:	4631      	mov	r1, r6
 800543a:	4628      	mov	r0, r5
 800543c:	4a19      	ldr	r2, [pc, #100]	; (80054a4 <_printf_float+0x2e0>)
 800543e:	47b8      	blx	r7
 8005440:	3001      	adds	r0, #1
 8005442:	f43f af1a 	beq.w	800527a <_printf_float+0xb6>
 8005446:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800544a:	4313      	orrs	r3, r2
 800544c:	d102      	bne.n	8005454 <_printf_float+0x290>
 800544e:	6823      	ldr	r3, [r4, #0]
 8005450:	07d9      	lsls	r1, r3, #31
 8005452:	d5d8      	bpl.n	8005406 <_printf_float+0x242>
 8005454:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005458:	4631      	mov	r1, r6
 800545a:	4628      	mov	r0, r5
 800545c:	47b8      	blx	r7
 800545e:	3001      	adds	r0, #1
 8005460:	f43f af0b 	beq.w	800527a <_printf_float+0xb6>
 8005464:	f04f 0900 	mov.w	r9, #0
 8005468:	f104 0a1a 	add.w	sl, r4, #26
 800546c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800546e:	425b      	negs	r3, r3
 8005470:	454b      	cmp	r3, r9
 8005472:	dc01      	bgt.n	8005478 <_printf_float+0x2b4>
 8005474:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005476:	e794      	b.n	80053a2 <_printf_float+0x1de>
 8005478:	2301      	movs	r3, #1
 800547a:	4652      	mov	r2, sl
 800547c:	4631      	mov	r1, r6
 800547e:	4628      	mov	r0, r5
 8005480:	47b8      	blx	r7
 8005482:	3001      	adds	r0, #1
 8005484:	f43f aef9 	beq.w	800527a <_printf_float+0xb6>
 8005488:	f109 0901 	add.w	r9, r9, #1
 800548c:	e7ee      	b.n	800546c <_printf_float+0x2a8>
 800548e:	bf00      	nop
 8005490:	7fefffff 	.word	0x7fefffff
 8005494:	080080f8 	.word	0x080080f8
 8005498:	080080fc 	.word	0x080080fc
 800549c:	08008104 	.word	0x08008104
 80054a0:	08008100 	.word	0x08008100
 80054a4:	08008108 	.word	0x08008108
 80054a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80054aa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80054ac:	429a      	cmp	r2, r3
 80054ae:	bfa8      	it	ge
 80054b0:	461a      	movge	r2, r3
 80054b2:	2a00      	cmp	r2, #0
 80054b4:	4691      	mov	r9, r2
 80054b6:	dc37      	bgt.n	8005528 <_printf_float+0x364>
 80054b8:	f04f 0b00 	mov.w	fp, #0
 80054bc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80054c0:	f104 021a 	add.w	r2, r4, #26
 80054c4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80054c8:	ebaa 0309 	sub.w	r3, sl, r9
 80054cc:	455b      	cmp	r3, fp
 80054ce:	dc33      	bgt.n	8005538 <_printf_float+0x374>
 80054d0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80054d4:	429a      	cmp	r2, r3
 80054d6:	db3b      	blt.n	8005550 <_printf_float+0x38c>
 80054d8:	6823      	ldr	r3, [r4, #0]
 80054da:	07da      	lsls	r2, r3, #31
 80054dc:	d438      	bmi.n	8005550 <_printf_float+0x38c>
 80054de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80054e0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80054e2:	eba3 020a 	sub.w	r2, r3, sl
 80054e6:	eba3 0901 	sub.w	r9, r3, r1
 80054ea:	4591      	cmp	r9, r2
 80054ec:	bfa8      	it	ge
 80054ee:	4691      	movge	r9, r2
 80054f0:	f1b9 0f00 	cmp.w	r9, #0
 80054f4:	dc34      	bgt.n	8005560 <_printf_float+0x39c>
 80054f6:	f04f 0800 	mov.w	r8, #0
 80054fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80054fe:	f104 0a1a 	add.w	sl, r4, #26
 8005502:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005506:	1a9b      	subs	r3, r3, r2
 8005508:	eba3 0309 	sub.w	r3, r3, r9
 800550c:	4543      	cmp	r3, r8
 800550e:	f77f af7a 	ble.w	8005406 <_printf_float+0x242>
 8005512:	2301      	movs	r3, #1
 8005514:	4652      	mov	r2, sl
 8005516:	4631      	mov	r1, r6
 8005518:	4628      	mov	r0, r5
 800551a:	47b8      	blx	r7
 800551c:	3001      	adds	r0, #1
 800551e:	f43f aeac 	beq.w	800527a <_printf_float+0xb6>
 8005522:	f108 0801 	add.w	r8, r8, #1
 8005526:	e7ec      	b.n	8005502 <_printf_float+0x33e>
 8005528:	4613      	mov	r3, r2
 800552a:	4631      	mov	r1, r6
 800552c:	4642      	mov	r2, r8
 800552e:	4628      	mov	r0, r5
 8005530:	47b8      	blx	r7
 8005532:	3001      	adds	r0, #1
 8005534:	d1c0      	bne.n	80054b8 <_printf_float+0x2f4>
 8005536:	e6a0      	b.n	800527a <_printf_float+0xb6>
 8005538:	2301      	movs	r3, #1
 800553a:	4631      	mov	r1, r6
 800553c:	4628      	mov	r0, r5
 800553e:	920b      	str	r2, [sp, #44]	; 0x2c
 8005540:	47b8      	blx	r7
 8005542:	3001      	adds	r0, #1
 8005544:	f43f ae99 	beq.w	800527a <_printf_float+0xb6>
 8005548:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800554a:	f10b 0b01 	add.w	fp, fp, #1
 800554e:	e7b9      	b.n	80054c4 <_printf_float+0x300>
 8005550:	4631      	mov	r1, r6
 8005552:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005556:	4628      	mov	r0, r5
 8005558:	47b8      	blx	r7
 800555a:	3001      	adds	r0, #1
 800555c:	d1bf      	bne.n	80054de <_printf_float+0x31a>
 800555e:	e68c      	b.n	800527a <_printf_float+0xb6>
 8005560:	464b      	mov	r3, r9
 8005562:	4631      	mov	r1, r6
 8005564:	4628      	mov	r0, r5
 8005566:	eb08 020a 	add.w	r2, r8, sl
 800556a:	47b8      	blx	r7
 800556c:	3001      	adds	r0, #1
 800556e:	d1c2      	bne.n	80054f6 <_printf_float+0x332>
 8005570:	e683      	b.n	800527a <_printf_float+0xb6>
 8005572:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005574:	2a01      	cmp	r2, #1
 8005576:	dc01      	bgt.n	800557c <_printf_float+0x3b8>
 8005578:	07db      	lsls	r3, r3, #31
 800557a:	d537      	bpl.n	80055ec <_printf_float+0x428>
 800557c:	2301      	movs	r3, #1
 800557e:	4642      	mov	r2, r8
 8005580:	4631      	mov	r1, r6
 8005582:	4628      	mov	r0, r5
 8005584:	47b8      	blx	r7
 8005586:	3001      	adds	r0, #1
 8005588:	f43f ae77 	beq.w	800527a <_printf_float+0xb6>
 800558c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005590:	4631      	mov	r1, r6
 8005592:	4628      	mov	r0, r5
 8005594:	47b8      	blx	r7
 8005596:	3001      	adds	r0, #1
 8005598:	f43f ae6f 	beq.w	800527a <_printf_float+0xb6>
 800559c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80055a0:	2200      	movs	r2, #0
 80055a2:	2300      	movs	r3, #0
 80055a4:	f7fb fa00 	bl	80009a8 <__aeabi_dcmpeq>
 80055a8:	b9d8      	cbnz	r0, 80055e2 <_printf_float+0x41e>
 80055aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80055ac:	f108 0201 	add.w	r2, r8, #1
 80055b0:	3b01      	subs	r3, #1
 80055b2:	4631      	mov	r1, r6
 80055b4:	4628      	mov	r0, r5
 80055b6:	47b8      	blx	r7
 80055b8:	3001      	adds	r0, #1
 80055ba:	d10e      	bne.n	80055da <_printf_float+0x416>
 80055bc:	e65d      	b.n	800527a <_printf_float+0xb6>
 80055be:	2301      	movs	r3, #1
 80055c0:	464a      	mov	r2, r9
 80055c2:	4631      	mov	r1, r6
 80055c4:	4628      	mov	r0, r5
 80055c6:	47b8      	blx	r7
 80055c8:	3001      	adds	r0, #1
 80055ca:	f43f ae56 	beq.w	800527a <_printf_float+0xb6>
 80055ce:	f108 0801 	add.w	r8, r8, #1
 80055d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80055d4:	3b01      	subs	r3, #1
 80055d6:	4543      	cmp	r3, r8
 80055d8:	dcf1      	bgt.n	80055be <_printf_float+0x3fa>
 80055da:	4653      	mov	r3, sl
 80055dc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80055e0:	e6e0      	b.n	80053a4 <_printf_float+0x1e0>
 80055e2:	f04f 0800 	mov.w	r8, #0
 80055e6:	f104 091a 	add.w	r9, r4, #26
 80055ea:	e7f2      	b.n	80055d2 <_printf_float+0x40e>
 80055ec:	2301      	movs	r3, #1
 80055ee:	4642      	mov	r2, r8
 80055f0:	e7df      	b.n	80055b2 <_printf_float+0x3ee>
 80055f2:	2301      	movs	r3, #1
 80055f4:	464a      	mov	r2, r9
 80055f6:	4631      	mov	r1, r6
 80055f8:	4628      	mov	r0, r5
 80055fa:	47b8      	blx	r7
 80055fc:	3001      	adds	r0, #1
 80055fe:	f43f ae3c 	beq.w	800527a <_printf_float+0xb6>
 8005602:	f108 0801 	add.w	r8, r8, #1
 8005606:	68e3      	ldr	r3, [r4, #12]
 8005608:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800560a:	1a5b      	subs	r3, r3, r1
 800560c:	4543      	cmp	r3, r8
 800560e:	dcf0      	bgt.n	80055f2 <_printf_float+0x42e>
 8005610:	e6fd      	b.n	800540e <_printf_float+0x24a>
 8005612:	f04f 0800 	mov.w	r8, #0
 8005616:	f104 0919 	add.w	r9, r4, #25
 800561a:	e7f4      	b.n	8005606 <_printf_float+0x442>

0800561c <_printf_common>:
 800561c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005620:	4616      	mov	r6, r2
 8005622:	4699      	mov	r9, r3
 8005624:	688a      	ldr	r2, [r1, #8]
 8005626:	690b      	ldr	r3, [r1, #16]
 8005628:	4607      	mov	r7, r0
 800562a:	4293      	cmp	r3, r2
 800562c:	bfb8      	it	lt
 800562e:	4613      	movlt	r3, r2
 8005630:	6033      	str	r3, [r6, #0]
 8005632:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005636:	460c      	mov	r4, r1
 8005638:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800563c:	b10a      	cbz	r2, 8005642 <_printf_common+0x26>
 800563e:	3301      	adds	r3, #1
 8005640:	6033      	str	r3, [r6, #0]
 8005642:	6823      	ldr	r3, [r4, #0]
 8005644:	0699      	lsls	r1, r3, #26
 8005646:	bf42      	ittt	mi
 8005648:	6833      	ldrmi	r3, [r6, #0]
 800564a:	3302      	addmi	r3, #2
 800564c:	6033      	strmi	r3, [r6, #0]
 800564e:	6825      	ldr	r5, [r4, #0]
 8005650:	f015 0506 	ands.w	r5, r5, #6
 8005654:	d106      	bne.n	8005664 <_printf_common+0x48>
 8005656:	f104 0a19 	add.w	sl, r4, #25
 800565a:	68e3      	ldr	r3, [r4, #12]
 800565c:	6832      	ldr	r2, [r6, #0]
 800565e:	1a9b      	subs	r3, r3, r2
 8005660:	42ab      	cmp	r3, r5
 8005662:	dc28      	bgt.n	80056b6 <_printf_common+0x9a>
 8005664:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005668:	1e13      	subs	r3, r2, #0
 800566a:	6822      	ldr	r2, [r4, #0]
 800566c:	bf18      	it	ne
 800566e:	2301      	movne	r3, #1
 8005670:	0692      	lsls	r2, r2, #26
 8005672:	d42d      	bmi.n	80056d0 <_printf_common+0xb4>
 8005674:	4649      	mov	r1, r9
 8005676:	4638      	mov	r0, r7
 8005678:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800567c:	47c0      	blx	r8
 800567e:	3001      	adds	r0, #1
 8005680:	d020      	beq.n	80056c4 <_printf_common+0xa8>
 8005682:	6823      	ldr	r3, [r4, #0]
 8005684:	68e5      	ldr	r5, [r4, #12]
 8005686:	f003 0306 	and.w	r3, r3, #6
 800568a:	2b04      	cmp	r3, #4
 800568c:	bf18      	it	ne
 800568e:	2500      	movne	r5, #0
 8005690:	6832      	ldr	r2, [r6, #0]
 8005692:	f04f 0600 	mov.w	r6, #0
 8005696:	68a3      	ldr	r3, [r4, #8]
 8005698:	bf08      	it	eq
 800569a:	1aad      	subeq	r5, r5, r2
 800569c:	6922      	ldr	r2, [r4, #16]
 800569e:	bf08      	it	eq
 80056a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80056a4:	4293      	cmp	r3, r2
 80056a6:	bfc4      	itt	gt
 80056a8:	1a9b      	subgt	r3, r3, r2
 80056aa:	18ed      	addgt	r5, r5, r3
 80056ac:	341a      	adds	r4, #26
 80056ae:	42b5      	cmp	r5, r6
 80056b0:	d11a      	bne.n	80056e8 <_printf_common+0xcc>
 80056b2:	2000      	movs	r0, #0
 80056b4:	e008      	b.n	80056c8 <_printf_common+0xac>
 80056b6:	2301      	movs	r3, #1
 80056b8:	4652      	mov	r2, sl
 80056ba:	4649      	mov	r1, r9
 80056bc:	4638      	mov	r0, r7
 80056be:	47c0      	blx	r8
 80056c0:	3001      	adds	r0, #1
 80056c2:	d103      	bne.n	80056cc <_printf_common+0xb0>
 80056c4:	f04f 30ff 	mov.w	r0, #4294967295
 80056c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056cc:	3501      	adds	r5, #1
 80056ce:	e7c4      	b.n	800565a <_printf_common+0x3e>
 80056d0:	2030      	movs	r0, #48	; 0x30
 80056d2:	18e1      	adds	r1, r4, r3
 80056d4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80056d8:	1c5a      	adds	r2, r3, #1
 80056da:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80056de:	4422      	add	r2, r4
 80056e0:	3302      	adds	r3, #2
 80056e2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80056e6:	e7c5      	b.n	8005674 <_printf_common+0x58>
 80056e8:	2301      	movs	r3, #1
 80056ea:	4622      	mov	r2, r4
 80056ec:	4649      	mov	r1, r9
 80056ee:	4638      	mov	r0, r7
 80056f0:	47c0      	blx	r8
 80056f2:	3001      	adds	r0, #1
 80056f4:	d0e6      	beq.n	80056c4 <_printf_common+0xa8>
 80056f6:	3601      	adds	r6, #1
 80056f8:	e7d9      	b.n	80056ae <_printf_common+0x92>
	...

080056fc <_printf_i>:
 80056fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005700:	7e0f      	ldrb	r7, [r1, #24]
 8005702:	4691      	mov	r9, r2
 8005704:	2f78      	cmp	r7, #120	; 0x78
 8005706:	4680      	mov	r8, r0
 8005708:	460c      	mov	r4, r1
 800570a:	469a      	mov	sl, r3
 800570c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800570e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005712:	d807      	bhi.n	8005724 <_printf_i+0x28>
 8005714:	2f62      	cmp	r7, #98	; 0x62
 8005716:	d80a      	bhi.n	800572e <_printf_i+0x32>
 8005718:	2f00      	cmp	r7, #0
 800571a:	f000 80d9 	beq.w	80058d0 <_printf_i+0x1d4>
 800571e:	2f58      	cmp	r7, #88	; 0x58
 8005720:	f000 80a4 	beq.w	800586c <_printf_i+0x170>
 8005724:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005728:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800572c:	e03a      	b.n	80057a4 <_printf_i+0xa8>
 800572e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005732:	2b15      	cmp	r3, #21
 8005734:	d8f6      	bhi.n	8005724 <_printf_i+0x28>
 8005736:	a101      	add	r1, pc, #4	; (adr r1, 800573c <_printf_i+0x40>)
 8005738:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800573c:	08005795 	.word	0x08005795
 8005740:	080057a9 	.word	0x080057a9
 8005744:	08005725 	.word	0x08005725
 8005748:	08005725 	.word	0x08005725
 800574c:	08005725 	.word	0x08005725
 8005750:	08005725 	.word	0x08005725
 8005754:	080057a9 	.word	0x080057a9
 8005758:	08005725 	.word	0x08005725
 800575c:	08005725 	.word	0x08005725
 8005760:	08005725 	.word	0x08005725
 8005764:	08005725 	.word	0x08005725
 8005768:	080058b7 	.word	0x080058b7
 800576c:	080057d9 	.word	0x080057d9
 8005770:	08005899 	.word	0x08005899
 8005774:	08005725 	.word	0x08005725
 8005778:	08005725 	.word	0x08005725
 800577c:	080058d9 	.word	0x080058d9
 8005780:	08005725 	.word	0x08005725
 8005784:	080057d9 	.word	0x080057d9
 8005788:	08005725 	.word	0x08005725
 800578c:	08005725 	.word	0x08005725
 8005790:	080058a1 	.word	0x080058a1
 8005794:	682b      	ldr	r3, [r5, #0]
 8005796:	1d1a      	adds	r2, r3, #4
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	602a      	str	r2, [r5, #0]
 800579c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80057a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80057a4:	2301      	movs	r3, #1
 80057a6:	e0a4      	b.n	80058f2 <_printf_i+0x1f6>
 80057a8:	6820      	ldr	r0, [r4, #0]
 80057aa:	6829      	ldr	r1, [r5, #0]
 80057ac:	0606      	lsls	r6, r0, #24
 80057ae:	f101 0304 	add.w	r3, r1, #4
 80057b2:	d50a      	bpl.n	80057ca <_printf_i+0xce>
 80057b4:	680e      	ldr	r6, [r1, #0]
 80057b6:	602b      	str	r3, [r5, #0]
 80057b8:	2e00      	cmp	r6, #0
 80057ba:	da03      	bge.n	80057c4 <_printf_i+0xc8>
 80057bc:	232d      	movs	r3, #45	; 0x2d
 80057be:	4276      	negs	r6, r6
 80057c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057c4:	230a      	movs	r3, #10
 80057c6:	485e      	ldr	r0, [pc, #376]	; (8005940 <_printf_i+0x244>)
 80057c8:	e019      	b.n	80057fe <_printf_i+0x102>
 80057ca:	680e      	ldr	r6, [r1, #0]
 80057cc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80057d0:	602b      	str	r3, [r5, #0]
 80057d2:	bf18      	it	ne
 80057d4:	b236      	sxthne	r6, r6
 80057d6:	e7ef      	b.n	80057b8 <_printf_i+0xbc>
 80057d8:	682b      	ldr	r3, [r5, #0]
 80057da:	6820      	ldr	r0, [r4, #0]
 80057dc:	1d19      	adds	r1, r3, #4
 80057de:	6029      	str	r1, [r5, #0]
 80057e0:	0601      	lsls	r1, r0, #24
 80057e2:	d501      	bpl.n	80057e8 <_printf_i+0xec>
 80057e4:	681e      	ldr	r6, [r3, #0]
 80057e6:	e002      	b.n	80057ee <_printf_i+0xf2>
 80057e8:	0646      	lsls	r6, r0, #25
 80057ea:	d5fb      	bpl.n	80057e4 <_printf_i+0xe8>
 80057ec:	881e      	ldrh	r6, [r3, #0]
 80057ee:	2f6f      	cmp	r7, #111	; 0x6f
 80057f0:	bf0c      	ite	eq
 80057f2:	2308      	moveq	r3, #8
 80057f4:	230a      	movne	r3, #10
 80057f6:	4852      	ldr	r0, [pc, #328]	; (8005940 <_printf_i+0x244>)
 80057f8:	2100      	movs	r1, #0
 80057fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80057fe:	6865      	ldr	r5, [r4, #4]
 8005800:	2d00      	cmp	r5, #0
 8005802:	bfa8      	it	ge
 8005804:	6821      	ldrge	r1, [r4, #0]
 8005806:	60a5      	str	r5, [r4, #8]
 8005808:	bfa4      	itt	ge
 800580a:	f021 0104 	bicge.w	r1, r1, #4
 800580e:	6021      	strge	r1, [r4, #0]
 8005810:	b90e      	cbnz	r6, 8005816 <_printf_i+0x11a>
 8005812:	2d00      	cmp	r5, #0
 8005814:	d04d      	beq.n	80058b2 <_printf_i+0x1b6>
 8005816:	4615      	mov	r5, r2
 8005818:	fbb6 f1f3 	udiv	r1, r6, r3
 800581c:	fb03 6711 	mls	r7, r3, r1, r6
 8005820:	5dc7      	ldrb	r7, [r0, r7]
 8005822:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005826:	4637      	mov	r7, r6
 8005828:	42bb      	cmp	r3, r7
 800582a:	460e      	mov	r6, r1
 800582c:	d9f4      	bls.n	8005818 <_printf_i+0x11c>
 800582e:	2b08      	cmp	r3, #8
 8005830:	d10b      	bne.n	800584a <_printf_i+0x14e>
 8005832:	6823      	ldr	r3, [r4, #0]
 8005834:	07de      	lsls	r6, r3, #31
 8005836:	d508      	bpl.n	800584a <_printf_i+0x14e>
 8005838:	6923      	ldr	r3, [r4, #16]
 800583a:	6861      	ldr	r1, [r4, #4]
 800583c:	4299      	cmp	r1, r3
 800583e:	bfde      	ittt	le
 8005840:	2330      	movle	r3, #48	; 0x30
 8005842:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005846:	f105 35ff 	addle.w	r5, r5, #4294967295
 800584a:	1b52      	subs	r2, r2, r5
 800584c:	6122      	str	r2, [r4, #16]
 800584e:	464b      	mov	r3, r9
 8005850:	4621      	mov	r1, r4
 8005852:	4640      	mov	r0, r8
 8005854:	f8cd a000 	str.w	sl, [sp]
 8005858:	aa03      	add	r2, sp, #12
 800585a:	f7ff fedf 	bl	800561c <_printf_common>
 800585e:	3001      	adds	r0, #1
 8005860:	d14c      	bne.n	80058fc <_printf_i+0x200>
 8005862:	f04f 30ff 	mov.w	r0, #4294967295
 8005866:	b004      	add	sp, #16
 8005868:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800586c:	4834      	ldr	r0, [pc, #208]	; (8005940 <_printf_i+0x244>)
 800586e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005872:	6829      	ldr	r1, [r5, #0]
 8005874:	6823      	ldr	r3, [r4, #0]
 8005876:	f851 6b04 	ldr.w	r6, [r1], #4
 800587a:	6029      	str	r1, [r5, #0]
 800587c:	061d      	lsls	r5, r3, #24
 800587e:	d514      	bpl.n	80058aa <_printf_i+0x1ae>
 8005880:	07df      	lsls	r7, r3, #31
 8005882:	bf44      	itt	mi
 8005884:	f043 0320 	orrmi.w	r3, r3, #32
 8005888:	6023      	strmi	r3, [r4, #0]
 800588a:	b91e      	cbnz	r6, 8005894 <_printf_i+0x198>
 800588c:	6823      	ldr	r3, [r4, #0]
 800588e:	f023 0320 	bic.w	r3, r3, #32
 8005892:	6023      	str	r3, [r4, #0]
 8005894:	2310      	movs	r3, #16
 8005896:	e7af      	b.n	80057f8 <_printf_i+0xfc>
 8005898:	6823      	ldr	r3, [r4, #0]
 800589a:	f043 0320 	orr.w	r3, r3, #32
 800589e:	6023      	str	r3, [r4, #0]
 80058a0:	2378      	movs	r3, #120	; 0x78
 80058a2:	4828      	ldr	r0, [pc, #160]	; (8005944 <_printf_i+0x248>)
 80058a4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80058a8:	e7e3      	b.n	8005872 <_printf_i+0x176>
 80058aa:	0659      	lsls	r1, r3, #25
 80058ac:	bf48      	it	mi
 80058ae:	b2b6      	uxthmi	r6, r6
 80058b0:	e7e6      	b.n	8005880 <_printf_i+0x184>
 80058b2:	4615      	mov	r5, r2
 80058b4:	e7bb      	b.n	800582e <_printf_i+0x132>
 80058b6:	682b      	ldr	r3, [r5, #0]
 80058b8:	6826      	ldr	r6, [r4, #0]
 80058ba:	1d18      	adds	r0, r3, #4
 80058bc:	6961      	ldr	r1, [r4, #20]
 80058be:	6028      	str	r0, [r5, #0]
 80058c0:	0635      	lsls	r5, r6, #24
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	d501      	bpl.n	80058ca <_printf_i+0x1ce>
 80058c6:	6019      	str	r1, [r3, #0]
 80058c8:	e002      	b.n	80058d0 <_printf_i+0x1d4>
 80058ca:	0670      	lsls	r0, r6, #25
 80058cc:	d5fb      	bpl.n	80058c6 <_printf_i+0x1ca>
 80058ce:	8019      	strh	r1, [r3, #0]
 80058d0:	2300      	movs	r3, #0
 80058d2:	4615      	mov	r5, r2
 80058d4:	6123      	str	r3, [r4, #16]
 80058d6:	e7ba      	b.n	800584e <_printf_i+0x152>
 80058d8:	682b      	ldr	r3, [r5, #0]
 80058da:	2100      	movs	r1, #0
 80058dc:	1d1a      	adds	r2, r3, #4
 80058de:	602a      	str	r2, [r5, #0]
 80058e0:	681d      	ldr	r5, [r3, #0]
 80058e2:	6862      	ldr	r2, [r4, #4]
 80058e4:	4628      	mov	r0, r5
 80058e6:	f000 fed5 	bl	8006694 <memchr>
 80058ea:	b108      	cbz	r0, 80058f0 <_printf_i+0x1f4>
 80058ec:	1b40      	subs	r0, r0, r5
 80058ee:	6060      	str	r0, [r4, #4]
 80058f0:	6863      	ldr	r3, [r4, #4]
 80058f2:	6123      	str	r3, [r4, #16]
 80058f4:	2300      	movs	r3, #0
 80058f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058fa:	e7a8      	b.n	800584e <_printf_i+0x152>
 80058fc:	462a      	mov	r2, r5
 80058fe:	4649      	mov	r1, r9
 8005900:	4640      	mov	r0, r8
 8005902:	6923      	ldr	r3, [r4, #16]
 8005904:	47d0      	blx	sl
 8005906:	3001      	adds	r0, #1
 8005908:	d0ab      	beq.n	8005862 <_printf_i+0x166>
 800590a:	6823      	ldr	r3, [r4, #0]
 800590c:	079b      	lsls	r3, r3, #30
 800590e:	d413      	bmi.n	8005938 <_printf_i+0x23c>
 8005910:	68e0      	ldr	r0, [r4, #12]
 8005912:	9b03      	ldr	r3, [sp, #12]
 8005914:	4298      	cmp	r0, r3
 8005916:	bfb8      	it	lt
 8005918:	4618      	movlt	r0, r3
 800591a:	e7a4      	b.n	8005866 <_printf_i+0x16a>
 800591c:	2301      	movs	r3, #1
 800591e:	4632      	mov	r2, r6
 8005920:	4649      	mov	r1, r9
 8005922:	4640      	mov	r0, r8
 8005924:	47d0      	blx	sl
 8005926:	3001      	adds	r0, #1
 8005928:	d09b      	beq.n	8005862 <_printf_i+0x166>
 800592a:	3501      	adds	r5, #1
 800592c:	68e3      	ldr	r3, [r4, #12]
 800592e:	9903      	ldr	r1, [sp, #12]
 8005930:	1a5b      	subs	r3, r3, r1
 8005932:	42ab      	cmp	r3, r5
 8005934:	dcf2      	bgt.n	800591c <_printf_i+0x220>
 8005936:	e7eb      	b.n	8005910 <_printf_i+0x214>
 8005938:	2500      	movs	r5, #0
 800593a:	f104 0619 	add.w	r6, r4, #25
 800593e:	e7f5      	b.n	800592c <_printf_i+0x230>
 8005940:	0800810a 	.word	0x0800810a
 8005944:	0800811b 	.word	0x0800811b

08005948 <siprintf>:
 8005948:	b40e      	push	{r1, r2, r3}
 800594a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800594e:	b500      	push	{lr}
 8005950:	b09c      	sub	sp, #112	; 0x70
 8005952:	ab1d      	add	r3, sp, #116	; 0x74
 8005954:	9002      	str	r0, [sp, #8]
 8005956:	9006      	str	r0, [sp, #24]
 8005958:	9107      	str	r1, [sp, #28]
 800595a:	9104      	str	r1, [sp, #16]
 800595c:	4808      	ldr	r0, [pc, #32]	; (8005980 <siprintf+0x38>)
 800595e:	4909      	ldr	r1, [pc, #36]	; (8005984 <siprintf+0x3c>)
 8005960:	f853 2b04 	ldr.w	r2, [r3], #4
 8005964:	9105      	str	r1, [sp, #20]
 8005966:	6800      	ldr	r0, [r0, #0]
 8005968:	a902      	add	r1, sp, #8
 800596a:	9301      	str	r3, [sp, #4]
 800596c:	f001 fb7c 	bl	8007068 <_svfiprintf_r>
 8005970:	2200      	movs	r2, #0
 8005972:	9b02      	ldr	r3, [sp, #8]
 8005974:	701a      	strb	r2, [r3, #0]
 8005976:	b01c      	add	sp, #112	; 0x70
 8005978:	f85d eb04 	ldr.w	lr, [sp], #4
 800597c:	b003      	add	sp, #12
 800597e:	4770      	bx	lr
 8005980:	2000000c 	.word	0x2000000c
 8005984:	ffff0208 	.word	0xffff0208

08005988 <quorem>:
 8005988:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800598c:	6903      	ldr	r3, [r0, #16]
 800598e:	690c      	ldr	r4, [r1, #16]
 8005990:	4607      	mov	r7, r0
 8005992:	42a3      	cmp	r3, r4
 8005994:	f2c0 8082 	blt.w	8005a9c <quorem+0x114>
 8005998:	3c01      	subs	r4, #1
 800599a:	f100 0514 	add.w	r5, r0, #20
 800599e:	f101 0814 	add.w	r8, r1, #20
 80059a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80059a6:	9301      	str	r3, [sp, #4]
 80059a8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80059ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80059b0:	3301      	adds	r3, #1
 80059b2:	429a      	cmp	r2, r3
 80059b4:	fbb2 f6f3 	udiv	r6, r2, r3
 80059b8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80059bc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80059c0:	d331      	bcc.n	8005a26 <quorem+0x9e>
 80059c2:	f04f 0e00 	mov.w	lr, #0
 80059c6:	4640      	mov	r0, r8
 80059c8:	46ac      	mov	ip, r5
 80059ca:	46f2      	mov	sl, lr
 80059cc:	f850 2b04 	ldr.w	r2, [r0], #4
 80059d0:	b293      	uxth	r3, r2
 80059d2:	fb06 e303 	mla	r3, r6, r3, lr
 80059d6:	0c12      	lsrs	r2, r2, #16
 80059d8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80059dc:	b29b      	uxth	r3, r3
 80059de:	fb06 e202 	mla	r2, r6, r2, lr
 80059e2:	ebaa 0303 	sub.w	r3, sl, r3
 80059e6:	f8dc a000 	ldr.w	sl, [ip]
 80059ea:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80059ee:	fa1f fa8a 	uxth.w	sl, sl
 80059f2:	4453      	add	r3, sl
 80059f4:	f8dc a000 	ldr.w	sl, [ip]
 80059f8:	b292      	uxth	r2, r2
 80059fa:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80059fe:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005a08:	4581      	cmp	r9, r0
 8005a0a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005a0e:	f84c 3b04 	str.w	r3, [ip], #4
 8005a12:	d2db      	bcs.n	80059cc <quorem+0x44>
 8005a14:	f855 300b 	ldr.w	r3, [r5, fp]
 8005a18:	b92b      	cbnz	r3, 8005a26 <quorem+0x9e>
 8005a1a:	9b01      	ldr	r3, [sp, #4]
 8005a1c:	3b04      	subs	r3, #4
 8005a1e:	429d      	cmp	r5, r3
 8005a20:	461a      	mov	r2, r3
 8005a22:	d32f      	bcc.n	8005a84 <quorem+0xfc>
 8005a24:	613c      	str	r4, [r7, #16]
 8005a26:	4638      	mov	r0, r7
 8005a28:	f001 f8ce 	bl	8006bc8 <__mcmp>
 8005a2c:	2800      	cmp	r0, #0
 8005a2e:	db25      	blt.n	8005a7c <quorem+0xf4>
 8005a30:	4628      	mov	r0, r5
 8005a32:	f04f 0c00 	mov.w	ip, #0
 8005a36:	3601      	adds	r6, #1
 8005a38:	f858 1b04 	ldr.w	r1, [r8], #4
 8005a3c:	f8d0 e000 	ldr.w	lr, [r0]
 8005a40:	b28b      	uxth	r3, r1
 8005a42:	ebac 0303 	sub.w	r3, ip, r3
 8005a46:	fa1f f28e 	uxth.w	r2, lr
 8005a4a:	4413      	add	r3, r2
 8005a4c:	0c0a      	lsrs	r2, r1, #16
 8005a4e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005a52:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005a56:	b29b      	uxth	r3, r3
 8005a58:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005a5c:	45c1      	cmp	r9, r8
 8005a5e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005a62:	f840 3b04 	str.w	r3, [r0], #4
 8005a66:	d2e7      	bcs.n	8005a38 <quorem+0xb0>
 8005a68:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005a6c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005a70:	b922      	cbnz	r2, 8005a7c <quorem+0xf4>
 8005a72:	3b04      	subs	r3, #4
 8005a74:	429d      	cmp	r5, r3
 8005a76:	461a      	mov	r2, r3
 8005a78:	d30a      	bcc.n	8005a90 <quorem+0x108>
 8005a7a:	613c      	str	r4, [r7, #16]
 8005a7c:	4630      	mov	r0, r6
 8005a7e:	b003      	add	sp, #12
 8005a80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a84:	6812      	ldr	r2, [r2, #0]
 8005a86:	3b04      	subs	r3, #4
 8005a88:	2a00      	cmp	r2, #0
 8005a8a:	d1cb      	bne.n	8005a24 <quorem+0x9c>
 8005a8c:	3c01      	subs	r4, #1
 8005a8e:	e7c6      	b.n	8005a1e <quorem+0x96>
 8005a90:	6812      	ldr	r2, [r2, #0]
 8005a92:	3b04      	subs	r3, #4
 8005a94:	2a00      	cmp	r2, #0
 8005a96:	d1f0      	bne.n	8005a7a <quorem+0xf2>
 8005a98:	3c01      	subs	r4, #1
 8005a9a:	e7eb      	b.n	8005a74 <quorem+0xec>
 8005a9c:	2000      	movs	r0, #0
 8005a9e:	e7ee      	b.n	8005a7e <quorem+0xf6>

08005aa0 <_dtoa_r>:
 8005aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005aa4:	4616      	mov	r6, r2
 8005aa6:	461f      	mov	r7, r3
 8005aa8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005aaa:	b099      	sub	sp, #100	; 0x64
 8005aac:	4605      	mov	r5, r0
 8005aae:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005ab2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8005ab6:	b974      	cbnz	r4, 8005ad6 <_dtoa_r+0x36>
 8005ab8:	2010      	movs	r0, #16
 8005aba:	f000 fde3 	bl	8006684 <malloc>
 8005abe:	4602      	mov	r2, r0
 8005ac0:	6268      	str	r0, [r5, #36]	; 0x24
 8005ac2:	b920      	cbnz	r0, 8005ace <_dtoa_r+0x2e>
 8005ac4:	21ea      	movs	r1, #234	; 0xea
 8005ac6:	4ba8      	ldr	r3, [pc, #672]	; (8005d68 <_dtoa_r+0x2c8>)
 8005ac8:	48a8      	ldr	r0, [pc, #672]	; (8005d6c <_dtoa_r+0x2cc>)
 8005aca:	f001 fbdd 	bl	8007288 <__assert_func>
 8005ace:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005ad2:	6004      	str	r4, [r0, #0]
 8005ad4:	60c4      	str	r4, [r0, #12]
 8005ad6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005ad8:	6819      	ldr	r1, [r3, #0]
 8005ada:	b151      	cbz	r1, 8005af2 <_dtoa_r+0x52>
 8005adc:	685a      	ldr	r2, [r3, #4]
 8005ade:	2301      	movs	r3, #1
 8005ae0:	4093      	lsls	r3, r2
 8005ae2:	604a      	str	r2, [r1, #4]
 8005ae4:	608b      	str	r3, [r1, #8]
 8005ae6:	4628      	mov	r0, r5
 8005ae8:	f000 fe30 	bl	800674c <_Bfree>
 8005aec:	2200      	movs	r2, #0
 8005aee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005af0:	601a      	str	r2, [r3, #0]
 8005af2:	1e3b      	subs	r3, r7, #0
 8005af4:	bfaf      	iteee	ge
 8005af6:	2300      	movge	r3, #0
 8005af8:	2201      	movlt	r2, #1
 8005afa:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005afe:	9305      	strlt	r3, [sp, #20]
 8005b00:	bfa8      	it	ge
 8005b02:	f8c8 3000 	strge.w	r3, [r8]
 8005b06:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005b0a:	4b99      	ldr	r3, [pc, #612]	; (8005d70 <_dtoa_r+0x2d0>)
 8005b0c:	bfb8      	it	lt
 8005b0e:	f8c8 2000 	strlt.w	r2, [r8]
 8005b12:	ea33 0309 	bics.w	r3, r3, r9
 8005b16:	d119      	bne.n	8005b4c <_dtoa_r+0xac>
 8005b18:	f242 730f 	movw	r3, #9999	; 0x270f
 8005b1c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005b1e:	6013      	str	r3, [r2, #0]
 8005b20:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005b24:	4333      	orrs	r3, r6
 8005b26:	f000 857f 	beq.w	8006628 <_dtoa_r+0xb88>
 8005b2a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005b2c:	b953      	cbnz	r3, 8005b44 <_dtoa_r+0xa4>
 8005b2e:	4b91      	ldr	r3, [pc, #580]	; (8005d74 <_dtoa_r+0x2d4>)
 8005b30:	e022      	b.n	8005b78 <_dtoa_r+0xd8>
 8005b32:	4b91      	ldr	r3, [pc, #580]	; (8005d78 <_dtoa_r+0x2d8>)
 8005b34:	9303      	str	r3, [sp, #12]
 8005b36:	3308      	adds	r3, #8
 8005b38:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005b3a:	6013      	str	r3, [r2, #0]
 8005b3c:	9803      	ldr	r0, [sp, #12]
 8005b3e:	b019      	add	sp, #100	; 0x64
 8005b40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b44:	4b8b      	ldr	r3, [pc, #556]	; (8005d74 <_dtoa_r+0x2d4>)
 8005b46:	9303      	str	r3, [sp, #12]
 8005b48:	3303      	adds	r3, #3
 8005b4a:	e7f5      	b.n	8005b38 <_dtoa_r+0x98>
 8005b4c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005b50:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8005b54:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005b58:	2200      	movs	r2, #0
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	f7fa ff24 	bl	80009a8 <__aeabi_dcmpeq>
 8005b60:	4680      	mov	r8, r0
 8005b62:	b158      	cbz	r0, 8005b7c <_dtoa_r+0xdc>
 8005b64:	2301      	movs	r3, #1
 8005b66:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005b68:	6013      	str	r3, [r2, #0]
 8005b6a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	f000 8558 	beq.w	8006622 <_dtoa_r+0xb82>
 8005b72:	4882      	ldr	r0, [pc, #520]	; (8005d7c <_dtoa_r+0x2dc>)
 8005b74:	6018      	str	r0, [r3, #0]
 8005b76:	1e43      	subs	r3, r0, #1
 8005b78:	9303      	str	r3, [sp, #12]
 8005b7a:	e7df      	b.n	8005b3c <_dtoa_r+0x9c>
 8005b7c:	ab16      	add	r3, sp, #88	; 0x58
 8005b7e:	9301      	str	r3, [sp, #4]
 8005b80:	ab17      	add	r3, sp, #92	; 0x5c
 8005b82:	9300      	str	r3, [sp, #0]
 8005b84:	4628      	mov	r0, r5
 8005b86:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005b8a:	f001 f8c5 	bl	8006d18 <__d2b>
 8005b8e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005b92:	4683      	mov	fp, r0
 8005b94:	2c00      	cmp	r4, #0
 8005b96:	d07f      	beq.n	8005c98 <_dtoa_r+0x1f8>
 8005b98:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005b9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005b9e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005ba2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ba6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8005baa:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8005bae:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	4b72      	ldr	r3, [pc, #456]	; (8005d80 <_dtoa_r+0x2e0>)
 8005bb6:	f7fa fad7 	bl	8000168 <__aeabi_dsub>
 8005bba:	a365      	add	r3, pc, #404	; (adr r3, 8005d50 <_dtoa_r+0x2b0>)
 8005bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bc0:	f7fa fc8a 	bl	80004d8 <__aeabi_dmul>
 8005bc4:	a364      	add	r3, pc, #400	; (adr r3, 8005d58 <_dtoa_r+0x2b8>)
 8005bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bca:	f7fa facf 	bl	800016c <__adddf3>
 8005bce:	4606      	mov	r6, r0
 8005bd0:	4620      	mov	r0, r4
 8005bd2:	460f      	mov	r7, r1
 8005bd4:	f7fa fc16 	bl	8000404 <__aeabi_i2d>
 8005bd8:	a361      	add	r3, pc, #388	; (adr r3, 8005d60 <_dtoa_r+0x2c0>)
 8005bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bde:	f7fa fc7b 	bl	80004d8 <__aeabi_dmul>
 8005be2:	4602      	mov	r2, r0
 8005be4:	460b      	mov	r3, r1
 8005be6:	4630      	mov	r0, r6
 8005be8:	4639      	mov	r1, r7
 8005bea:	f7fa fabf 	bl	800016c <__adddf3>
 8005bee:	4606      	mov	r6, r0
 8005bf0:	460f      	mov	r7, r1
 8005bf2:	f7fa ff21 	bl	8000a38 <__aeabi_d2iz>
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	4682      	mov	sl, r0
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	4630      	mov	r0, r6
 8005bfe:	4639      	mov	r1, r7
 8005c00:	f7fa fedc 	bl	80009bc <__aeabi_dcmplt>
 8005c04:	b148      	cbz	r0, 8005c1a <_dtoa_r+0x17a>
 8005c06:	4650      	mov	r0, sl
 8005c08:	f7fa fbfc 	bl	8000404 <__aeabi_i2d>
 8005c0c:	4632      	mov	r2, r6
 8005c0e:	463b      	mov	r3, r7
 8005c10:	f7fa feca 	bl	80009a8 <__aeabi_dcmpeq>
 8005c14:	b908      	cbnz	r0, 8005c1a <_dtoa_r+0x17a>
 8005c16:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005c1a:	f1ba 0f16 	cmp.w	sl, #22
 8005c1e:	d858      	bhi.n	8005cd2 <_dtoa_r+0x232>
 8005c20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005c24:	4b57      	ldr	r3, [pc, #348]	; (8005d84 <_dtoa_r+0x2e4>)
 8005c26:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c2e:	f7fa fec5 	bl	80009bc <__aeabi_dcmplt>
 8005c32:	2800      	cmp	r0, #0
 8005c34:	d04f      	beq.n	8005cd6 <_dtoa_r+0x236>
 8005c36:	2300      	movs	r3, #0
 8005c38:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005c3c:	930f      	str	r3, [sp, #60]	; 0x3c
 8005c3e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005c40:	1b1c      	subs	r4, r3, r4
 8005c42:	1e63      	subs	r3, r4, #1
 8005c44:	9309      	str	r3, [sp, #36]	; 0x24
 8005c46:	bf49      	itett	mi
 8005c48:	f1c4 0301 	rsbmi	r3, r4, #1
 8005c4c:	2300      	movpl	r3, #0
 8005c4e:	9306      	strmi	r3, [sp, #24]
 8005c50:	2300      	movmi	r3, #0
 8005c52:	bf54      	ite	pl
 8005c54:	9306      	strpl	r3, [sp, #24]
 8005c56:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005c58:	f1ba 0f00 	cmp.w	sl, #0
 8005c5c:	db3d      	blt.n	8005cda <_dtoa_r+0x23a>
 8005c5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c60:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8005c64:	4453      	add	r3, sl
 8005c66:	9309      	str	r3, [sp, #36]	; 0x24
 8005c68:	2300      	movs	r3, #0
 8005c6a:	930a      	str	r3, [sp, #40]	; 0x28
 8005c6c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005c6e:	2b09      	cmp	r3, #9
 8005c70:	f200 808c 	bhi.w	8005d8c <_dtoa_r+0x2ec>
 8005c74:	2b05      	cmp	r3, #5
 8005c76:	bfc4      	itt	gt
 8005c78:	3b04      	subgt	r3, #4
 8005c7a:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005c7c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005c7e:	bfc8      	it	gt
 8005c80:	2400      	movgt	r4, #0
 8005c82:	f1a3 0302 	sub.w	r3, r3, #2
 8005c86:	bfd8      	it	le
 8005c88:	2401      	movle	r4, #1
 8005c8a:	2b03      	cmp	r3, #3
 8005c8c:	f200 808a 	bhi.w	8005da4 <_dtoa_r+0x304>
 8005c90:	e8df f003 	tbb	[pc, r3]
 8005c94:	5b4d4f2d 	.word	0x5b4d4f2d
 8005c98:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005c9c:	441c      	add	r4, r3
 8005c9e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005ca2:	2b20      	cmp	r3, #32
 8005ca4:	bfc3      	ittte	gt
 8005ca6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005caa:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8005cae:	fa09 f303 	lslgt.w	r3, r9, r3
 8005cb2:	f1c3 0320 	rsble	r3, r3, #32
 8005cb6:	bfc6      	itte	gt
 8005cb8:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005cbc:	4318      	orrgt	r0, r3
 8005cbe:	fa06 f003 	lslle.w	r0, r6, r3
 8005cc2:	f7fa fb8f 	bl	80003e4 <__aeabi_ui2d>
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8005ccc:	3c01      	subs	r4, #1
 8005cce:	9313      	str	r3, [sp, #76]	; 0x4c
 8005cd0:	e76f      	b.n	8005bb2 <_dtoa_r+0x112>
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	e7b2      	b.n	8005c3c <_dtoa_r+0x19c>
 8005cd6:	900f      	str	r0, [sp, #60]	; 0x3c
 8005cd8:	e7b1      	b.n	8005c3e <_dtoa_r+0x19e>
 8005cda:	9b06      	ldr	r3, [sp, #24]
 8005cdc:	eba3 030a 	sub.w	r3, r3, sl
 8005ce0:	9306      	str	r3, [sp, #24]
 8005ce2:	f1ca 0300 	rsb	r3, sl, #0
 8005ce6:	930a      	str	r3, [sp, #40]	; 0x28
 8005ce8:	2300      	movs	r3, #0
 8005cea:	930e      	str	r3, [sp, #56]	; 0x38
 8005cec:	e7be      	b.n	8005c6c <_dtoa_r+0x1cc>
 8005cee:	2300      	movs	r3, #0
 8005cf0:	930b      	str	r3, [sp, #44]	; 0x2c
 8005cf2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	dc58      	bgt.n	8005daa <_dtoa_r+0x30a>
 8005cf8:	f04f 0901 	mov.w	r9, #1
 8005cfc:	464b      	mov	r3, r9
 8005cfe:	f8cd 9020 	str.w	r9, [sp, #32]
 8005d02:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8005d06:	2200      	movs	r2, #0
 8005d08:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8005d0a:	6042      	str	r2, [r0, #4]
 8005d0c:	2204      	movs	r2, #4
 8005d0e:	f102 0614 	add.w	r6, r2, #20
 8005d12:	429e      	cmp	r6, r3
 8005d14:	6841      	ldr	r1, [r0, #4]
 8005d16:	d94e      	bls.n	8005db6 <_dtoa_r+0x316>
 8005d18:	4628      	mov	r0, r5
 8005d1a:	f000 fcd7 	bl	80066cc <_Balloc>
 8005d1e:	9003      	str	r0, [sp, #12]
 8005d20:	2800      	cmp	r0, #0
 8005d22:	d14c      	bne.n	8005dbe <_dtoa_r+0x31e>
 8005d24:	4602      	mov	r2, r0
 8005d26:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005d2a:	4b17      	ldr	r3, [pc, #92]	; (8005d88 <_dtoa_r+0x2e8>)
 8005d2c:	e6cc      	b.n	8005ac8 <_dtoa_r+0x28>
 8005d2e:	2301      	movs	r3, #1
 8005d30:	e7de      	b.n	8005cf0 <_dtoa_r+0x250>
 8005d32:	2300      	movs	r3, #0
 8005d34:	930b      	str	r3, [sp, #44]	; 0x2c
 8005d36:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005d38:	eb0a 0903 	add.w	r9, sl, r3
 8005d3c:	f109 0301 	add.w	r3, r9, #1
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	9308      	str	r3, [sp, #32]
 8005d44:	bfb8      	it	lt
 8005d46:	2301      	movlt	r3, #1
 8005d48:	e7dd      	b.n	8005d06 <_dtoa_r+0x266>
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	e7f2      	b.n	8005d34 <_dtoa_r+0x294>
 8005d4e:	bf00      	nop
 8005d50:	636f4361 	.word	0x636f4361
 8005d54:	3fd287a7 	.word	0x3fd287a7
 8005d58:	8b60c8b3 	.word	0x8b60c8b3
 8005d5c:	3fc68a28 	.word	0x3fc68a28
 8005d60:	509f79fb 	.word	0x509f79fb
 8005d64:	3fd34413 	.word	0x3fd34413
 8005d68:	08008139 	.word	0x08008139
 8005d6c:	08008150 	.word	0x08008150
 8005d70:	7ff00000 	.word	0x7ff00000
 8005d74:	08008135 	.word	0x08008135
 8005d78:	0800812c 	.word	0x0800812c
 8005d7c:	08008109 	.word	0x08008109
 8005d80:	3ff80000 	.word	0x3ff80000
 8005d84:	08008240 	.word	0x08008240
 8005d88:	080081ab 	.word	0x080081ab
 8005d8c:	2401      	movs	r4, #1
 8005d8e:	2300      	movs	r3, #0
 8005d90:	940b      	str	r4, [sp, #44]	; 0x2c
 8005d92:	9322      	str	r3, [sp, #136]	; 0x88
 8005d94:	f04f 39ff 	mov.w	r9, #4294967295
 8005d98:	2200      	movs	r2, #0
 8005d9a:	2312      	movs	r3, #18
 8005d9c:	f8cd 9020 	str.w	r9, [sp, #32]
 8005da0:	9223      	str	r2, [sp, #140]	; 0x8c
 8005da2:	e7b0      	b.n	8005d06 <_dtoa_r+0x266>
 8005da4:	2301      	movs	r3, #1
 8005da6:	930b      	str	r3, [sp, #44]	; 0x2c
 8005da8:	e7f4      	b.n	8005d94 <_dtoa_r+0x2f4>
 8005daa:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8005dae:	464b      	mov	r3, r9
 8005db0:	f8cd 9020 	str.w	r9, [sp, #32]
 8005db4:	e7a7      	b.n	8005d06 <_dtoa_r+0x266>
 8005db6:	3101      	adds	r1, #1
 8005db8:	6041      	str	r1, [r0, #4]
 8005dba:	0052      	lsls	r2, r2, #1
 8005dbc:	e7a7      	b.n	8005d0e <_dtoa_r+0x26e>
 8005dbe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005dc0:	9a03      	ldr	r2, [sp, #12]
 8005dc2:	601a      	str	r2, [r3, #0]
 8005dc4:	9b08      	ldr	r3, [sp, #32]
 8005dc6:	2b0e      	cmp	r3, #14
 8005dc8:	f200 80a8 	bhi.w	8005f1c <_dtoa_r+0x47c>
 8005dcc:	2c00      	cmp	r4, #0
 8005dce:	f000 80a5 	beq.w	8005f1c <_dtoa_r+0x47c>
 8005dd2:	f1ba 0f00 	cmp.w	sl, #0
 8005dd6:	dd34      	ble.n	8005e42 <_dtoa_r+0x3a2>
 8005dd8:	4a9a      	ldr	r2, [pc, #616]	; (8006044 <_dtoa_r+0x5a4>)
 8005dda:	f00a 030f 	and.w	r3, sl, #15
 8005dde:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005de2:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8005de6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005dea:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005dee:	ea4f 142a 	mov.w	r4, sl, asr #4
 8005df2:	d016      	beq.n	8005e22 <_dtoa_r+0x382>
 8005df4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005df8:	4b93      	ldr	r3, [pc, #588]	; (8006048 <_dtoa_r+0x5a8>)
 8005dfa:	2703      	movs	r7, #3
 8005dfc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005e00:	f7fa fc94 	bl	800072c <__aeabi_ddiv>
 8005e04:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005e08:	f004 040f 	and.w	r4, r4, #15
 8005e0c:	4e8e      	ldr	r6, [pc, #568]	; (8006048 <_dtoa_r+0x5a8>)
 8005e0e:	b954      	cbnz	r4, 8005e26 <_dtoa_r+0x386>
 8005e10:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005e14:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005e18:	f7fa fc88 	bl	800072c <__aeabi_ddiv>
 8005e1c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005e20:	e029      	b.n	8005e76 <_dtoa_r+0x3d6>
 8005e22:	2702      	movs	r7, #2
 8005e24:	e7f2      	b.n	8005e0c <_dtoa_r+0x36c>
 8005e26:	07e1      	lsls	r1, r4, #31
 8005e28:	d508      	bpl.n	8005e3c <_dtoa_r+0x39c>
 8005e2a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005e2e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005e32:	f7fa fb51 	bl	80004d8 <__aeabi_dmul>
 8005e36:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005e3a:	3701      	adds	r7, #1
 8005e3c:	1064      	asrs	r4, r4, #1
 8005e3e:	3608      	adds	r6, #8
 8005e40:	e7e5      	b.n	8005e0e <_dtoa_r+0x36e>
 8005e42:	f000 80a5 	beq.w	8005f90 <_dtoa_r+0x4f0>
 8005e46:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005e4a:	f1ca 0400 	rsb	r4, sl, #0
 8005e4e:	4b7d      	ldr	r3, [pc, #500]	; (8006044 <_dtoa_r+0x5a4>)
 8005e50:	f004 020f 	and.w	r2, r4, #15
 8005e54:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e5c:	f7fa fb3c 	bl	80004d8 <__aeabi_dmul>
 8005e60:	2702      	movs	r7, #2
 8005e62:	2300      	movs	r3, #0
 8005e64:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005e68:	4e77      	ldr	r6, [pc, #476]	; (8006048 <_dtoa_r+0x5a8>)
 8005e6a:	1124      	asrs	r4, r4, #4
 8005e6c:	2c00      	cmp	r4, #0
 8005e6e:	f040 8084 	bne.w	8005f7a <_dtoa_r+0x4da>
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d1d2      	bne.n	8005e1c <_dtoa_r+0x37c>
 8005e76:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	f000 808b 	beq.w	8005f94 <_dtoa_r+0x4f4>
 8005e7e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005e82:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005e86:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	4b6f      	ldr	r3, [pc, #444]	; (800604c <_dtoa_r+0x5ac>)
 8005e8e:	f7fa fd95 	bl	80009bc <__aeabi_dcmplt>
 8005e92:	2800      	cmp	r0, #0
 8005e94:	d07e      	beq.n	8005f94 <_dtoa_r+0x4f4>
 8005e96:	9b08      	ldr	r3, [sp, #32]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d07b      	beq.n	8005f94 <_dtoa_r+0x4f4>
 8005e9c:	f1b9 0f00 	cmp.w	r9, #0
 8005ea0:	dd38      	ble.n	8005f14 <_dtoa_r+0x474>
 8005ea2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	4b69      	ldr	r3, [pc, #420]	; (8006050 <_dtoa_r+0x5b0>)
 8005eaa:	f7fa fb15 	bl	80004d8 <__aeabi_dmul>
 8005eae:	464c      	mov	r4, r9
 8005eb0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005eb4:	f10a 38ff 	add.w	r8, sl, #4294967295
 8005eb8:	3701      	adds	r7, #1
 8005eba:	4638      	mov	r0, r7
 8005ebc:	f7fa faa2 	bl	8000404 <__aeabi_i2d>
 8005ec0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ec4:	f7fa fb08 	bl	80004d8 <__aeabi_dmul>
 8005ec8:	2200      	movs	r2, #0
 8005eca:	4b62      	ldr	r3, [pc, #392]	; (8006054 <_dtoa_r+0x5b4>)
 8005ecc:	f7fa f94e 	bl	800016c <__adddf3>
 8005ed0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005ed4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005ed8:	9611      	str	r6, [sp, #68]	; 0x44
 8005eda:	2c00      	cmp	r4, #0
 8005edc:	d15d      	bne.n	8005f9a <_dtoa_r+0x4fa>
 8005ede:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	4b5c      	ldr	r3, [pc, #368]	; (8006058 <_dtoa_r+0x5b8>)
 8005ee6:	f7fa f93f 	bl	8000168 <__aeabi_dsub>
 8005eea:	4602      	mov	r2, r0
 8005eec:	460b      	mov	r3, r1
 8005eee:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005ef2:	4633      	mov	r3, r6
 8005ef4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005ef6:	f7fa fd7f 	bl	80009f8 <__aeabi_dcmpgt>
 8005efa:	2800      	cmp	r0, #0
 8005efc:	f040 829c 	bne.w	8006438 <_dtoa_r+0x998>
 8005f00:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f04:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005f06:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005f0a:	f7fa fd57 	bl	80009bc <__aeabi_dcmplt>
 8005f0e:	2800      	cmp	r0, #0
 8005f10:	f040 8290 	bne.w	8006434 <_dtoa_r+0x994>
 8005f14:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005f18:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005f1c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	f2c0 8152 	blt.w	80061c8 <_dtoa_r+0x728>
 8005f24:	f1ba 0f0e 	cmp.w	sl, #14
 8005f28:	f300 814e 	bgt.w	80061c8 <_dtoa_r+0x728>
 8005f2c:	4b45      	ldr	r3, [pc, #276]	; (8006044 <_dtoa_r+0x5a4>)
 8005f2e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005f32:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005f36:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005f3a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	f280 80db 	bge.w	80060f8 <_dtoa_r+0x658>
 8005f42:	9b08      	ldr	r3, [sp, #32]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	f300 80d7 	bgt.w	80060f8 <_dtoa_r+0x658>
 8005f4a:	f040 8272 	bne.w	8006432 <_dtoa_r+0x992>
 8005f4e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005f52:	2200      	movs	r2, #0
 8005f54:	4b40      	ldr	r3, [pc, #256]	; (8006058 <_dtoa_r+0x5b8>)
 8005f56:	f7fa fabf 	bl	80004d8 <__aeabi_dmul>
 8005f5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f5e:	f7fa fd41 	bl	80009e4 <__aeabi_dcmpge>
 8005f62:	9c08      	ldr	r4, [sp, #32]
 8005f64:	4626      	mov	r6, r4
 8005f66:	2800      	cmp	r0, #0
 8005f68:	f040 8248 	bne.w	80063fc <_dtoa_r+0x95c>
 8005f6c:	2331      	movs	r3, #49	; 0x31
 8005f6e:	9f03      	ldr	r7, [sp, #12]
 8005f70:	f10a 0a01 	add.w	sl, sl, #1
 8005f74:	f807 3b01 	strb.w	r3, [r7], #1
 8005f78:	e244      	b.n	8006404 <_dtoa_r+0x964>
 8005f7a:	07e2      	lsls	r2, r4, #31
 8005f7c:	d505      	bpl.n	8005f8a <_dtoa_r+0x4ea>
 8005f7e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005f82:	f7fa faa9 	bl	80004d8 <__aeabi_dmul>
 8005f86:	2301      	movs	r3, #1
 8005f88:	3701      	adds	r7, #1
 8005f8a:	1064      	asrs	r4, r4, #1
 8005f8c:	3608      	adds	r6, #8
 8005f8e:	e76d      	b.n	8005e6c <_dtoa_r+0x3cc>
 8005f90:	2702      	movs	r7, #2
 8005f92:	e770      	b.n	8005e76 <_dtoa_r+0x3d6>
 8005f94:	46d0      	mov	r8, sl
 8005f96:	9c08      	ldr	r4, [sp, #32]
 8005f98:	e78f      	b.n	8005eba <_dtoa_r+0x41a>
 8005f9a:	9903      	ldr	r1, [sp, #12]
 8005f9c:	4b29      	ldr	r3, [pc, #164]	; (8006044 <_dtoa_r+0x5a4>)
 8005f9e:	4421      	add	r1, r4
 8005fa0:	9112      	str	r1, [sp, #72]	; 0x48
 8005fa2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005fa4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005fa8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005fac:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005fb0:	2900      	cmp	r1, #0
 8005fb2:	d055      	beq.n	8006060 <_dtoa_r+0x5c0>
 8005fb4:	2000      	movs	r0, #0
 8005fb6:	4929      	ldr	r1, [pc, #164]	; (800605c <_dtoa_r+0x5bc>)
 8005fb8:	f7fa fbb8 	bl	800072c <__aeabi_ddiv>
 8005fbc:	463b      	mov	r3, r7
 8005fbe:	4632      	mov	r2, r6
 8005fc0:	f7fa f8d2 	bl	8000168 <__aeabi_dsub>
 8005fc4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005fc8:	9f03      	ldr	r7, [sp, #12]
 8005fca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005fce:	f7fa fd33 	bl	8000a38 <__aeabi_d2iz>
 8005fd2:	4604      	mov	r4, r0
 8005fd4:	f7fa fa16 	bl	8000404 <__aeabi_i2d>
 8005fd8:	4602      	mov	r2, r0
 8005fda:	460b      	mov	r3, r1
 8005fdc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005fe0:	f7fa f8c2 	bl	8000168 <__aeabi_dsub>
 8005fe4:	4602      	mov	r2, r0
 8005fe6:	460b      	mov	r3, r1
 8005fe8:	3430      	adds	r4, #48	; 0x30
 8005fea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005fee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005ff2:	f807 4b01 	strb.w	r4, [r7], #1
 8005ff6:	f7fa fce1 	bl	80009bc <__aeabi_dcmplt>
 8005ffa:	2800      	cmp	r0, #0
 8005ffc:	d174      	bne.n	80060e8 <_dtoa_r+0x648>
 8005ffe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006002:	2000      	movs	r0, #0
 8006004:	4911      	ldr	r1, [pc, #68]	; (800604c <_dtoa_r+0x5ac>)
 8006006:	f7fa f8af 	bl	8000168 <__aeabi_dsub>
 800600a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800600e:	f7fa fcd5 	bl	80009bc <__aeabi_dcmplt>
 8006012:	2800      	cmp	r0, #0
 8006014:	f040 80b7 	bne.w	8006186 <_dtoa_r+0x6e6>
 8006018:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800601a:	429f      	cmp	r7, r3
 800601c:	f43f af7a 	beq.w	8005f14 <_dtoa_r+0x474>
 8006020:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006024:	2200      	movs	r2, #0
 8006026:	4b0a      	ldr	r3, [pc, #40]	; (8006050 <_dtoa_r+0x5b0>)
 8006028:	f7fa fa56 	bl	80004d8 <__aeabi_dmul>
 800602c:	2200      	movs	r2, #0
 800602e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006032:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006036:	4b06      	ldr	r3, [pc, #24]	; (8006050 <_dtoa_r+0x5b0>)
 8006038:	f7fa fa4e 	bl	80004d8 <__aeabi_dmul>
 800603c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006040:	e7c3      	b.n	8005fca <_dtoa_r+0x52a>
 8006042:	bf00      	nop
 8006044:	08008240 	.word	0x08008240
 8006048:	08008218 	.word	0x08008218
 800604c:	3ff00000 	.word	0x3ff00000
 8006050:	40240000 	.word	0x40240000
 8006054:	401c0000 	.word	0x401c0000
 8006058:	40140000 	.word	0x40140000
 800605c:	3fe00000 	.word	0x3fe00000
 8006060:	4630      	mov	r0, r6
 8006062:	4639      	mov	r1, r7
 8006064:	f7fa fa38 	bl	80004d8 <__aeabi_dmul>
 8006068:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800606a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800606e:	9c03      	ldr	r4, [sp, #12]
 8006070:	9314      	str	r3, [sp, #80]	; 0x50
 8006072:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006076:	f7fa fcdf 	bl	8000a38 <__aeabi_d2iz>
 800607a:	9015      	str	r0, [sp, #84]	; 0x54
 800607c:	f7fa f9c2 	bl	8000404 <__aeabi_i2d>
 8006080:	4602      	mov	r2, r0
 8006082:	460b      	mov	r3, r1
 8006084:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006088:	f7fa f86e 	bl	8000168 <__aeabi_dsub>
 800608c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800608e:	4606      	mov	r6, r0
 8006090:	3330      	adds	r3, #48	; 0x30
 8006092:	f804 3b01 	strb.w	r3, [r4], #1
 8006096:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006098:	460f      	mov	r7, r1
 800609a:	429c      	cmp	r4, r3
 800609c:	f04f 0200 	mov.w	r2, #0
 80060a0:	d124      	bne.n	80060ec <_dtoa_r+0x64c>
 80060a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80060a6:	4bb0      	ldr	r3, [pc, #704]	; (8006368 <_dtoa_r+0x8c8>)
 80060a8:	f7fa f860 	bl	800016c <__adddf3>
 80060ac:	4602      	mov	r2, r0
 80060ae:	460b      	mov	r3, r1
 80060b0:	4630      	mov	r0, r6
 80060b2:	4639      	mov	r1, r7
 80060b4:	f7fa fca0 	bl	80009f8 <__aeabi_dcmpgt>
 80060b8:	2800      	cmp	r0, #0
 80060ba:	d163      	bne.n	8006184 <_dtoa_r+0x6e4>
 80060bc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80060c0:	2000      	movs	r0, #0
 80060c2:	49a9      	ldr	r1, [pc, #676]	; (8006368 <_dtoa_r+0x8c8>)
 80060c4:	f7fa f850 	bl	8000168 <__aeabi_dsub>
 80060c8:	4602      	mov	r2, r0
 80060ca:	460b      	mov	r3, r1
 80060cc:	4630      	mov	r0, r6
 80060ce:	4639      	mov	r1, r7
 80060d0:	f7fa fc74 	bl	80009bc <__aeabi_dcmplt>
 80060d4:	2800      	cmp	r0, #0
 80060d6:	f43f af1d 	beq.w	8005f14 <_dtoa_r+0x474>
 80060da:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80060dc:	1e7b      	subs	r3, r7, #1
 80060de:	9314      	str	r3, [sp, #80]	; 0x50
 80060e0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80060e4:	2b30      	cmp	r3, #48	; 0x30
 80060e6:	d0f8      	beq.n	80060da <_dtoa_r+0x63a>
 80060e8:	46c2      	mov	sl, r8
 80060ea:	e03b      	b.n	8006164 <_dtoa_r+0x6c4>
 80060ec:	4b9f      	ldr	r3, [pc, #636]	; (800636c <_dtoa_r+0x8cc>)
 80060ee:	f7fa f9f3 	bl	80004d8 <__aeabi_dmul>
 80060f2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80060f6:	e7bc      	b.n	8006072 <_dtoa_r+0x5d2>
 80060f8:	9f03      	ldr	r7, [sp, #12]
 80060fa:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80060fe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006102:	4640      	mov	r0, r8
 8006104:	4649      	mov	r1, r9
 8006106:	f7fa fb11 	bl	800072c <__aeabi_ddiv>
 800610a:	f7fa fc95 	bl	8000a38 <__aeabi_d2iz>
 800610e:	4604      	mov	r4, r0
 8006110:	f7fa f978 	bl	8000404 <__aeabi_i2d>
 8006114:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006118:	f7fa f9de 	bl	80004d8 <__aeabi_dmul>
 800611c:	4602      	mov	r2, r0
 800611e:	460b      	mov	r3, r1
 8006120:	4640      	mov	r0, r8
 8006122:	4649      	mov	r1, r9
 8006124:	f7fa f820 	bl	8000168 <__aeabi_dsub>
 8006128:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800612c:	f807 6b01 	strb.w	r6, [r7], #1
 8006130:	9e03      	ldr	r6, [sp, #12]
 8006132:	f8dd c020 	ldr.w	ip, [sp, #32]
 8006136:	1bbe      	subs	r6, r7, r6
 8006138:	45b4      	cmp	ip, r6
 800613a:	4602      	mov	r2, r0
 800613c:	460b      	mov	r3, r1
 800613e:	d136      	bne.n	80061ae <_dtoa_r+0x70e>
 8006140:	f7fa f814 	bl	800016c <__adddf3>
 8006144:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006148:	4680      	mov	r8, r0
 800614a:	4689      	mov	r9, r1
 800614c:	f7fa fc54 	bl	80009f8 <__aeabi_dcmpgt>
 8006150:	bb58      	cbnz	r0, 80061aa <_dtoa_r+0x70a>
 8006152:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006156:	4640      	mov	r0, r8
 8006158:	4649      	mov	r1, r9
 800615a:	f7fa fc25 	bl	80009a8 <__aeabi_dcmpeq>
 800615e:	b108      	cbz	r0, 8006164 <_dtoa_r+0x6c4>
 8006160:	07e1      	lsls	r1, r4, #31
 8006162:	d422      	bmi.n	80061aa <_dtoa_r+0x70a>
 8006164:	4628      	mov	r0, r5
 8006166:	4659      	mov	r1, fp
 8006168:	f000 faf0 	bl	800674c <_Bfree>
 800616c:	2300      	movs	r3, #0
 800616e:	703b      	strb	r3, [r7, #0]
 8006170:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006172:	f10a 0001 	add.w	r0, sl, #1
 8006176:	6018      	str	r0, [r3, #0]
 8006178:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800617a:	2b00      	cmp	r3, #0
 800617c:	f43f acde 	beq.w	8005b3c <_dtoa_r+0x9c>
 8006180:	601f      	str	r7, [r3, #0]
 8006182:	e4db      	b.n	8005b3c <_dtoa_r+0x9c>
 8006184:	4627      	mov	r7, r4
 8006186:	463b      	mov	r3, r7
 8006188:	461f      	mov	r7, r3
 800618a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800618e:	2a39      	cmp	r2, #57	; 0x39
 8006190:	d107      	bne.n	80061a2 <_dtoa_r+0x702>
 8006192:	9a03      	ldr	r2, [sp, #12]
 8006194:	429a      	cmp	r2, r3
 8006196:	d1f7      	bne.n	8006188 <_dtoa_r+0x6e8>
 8006198:	2230      	movs	r2, #48	; 0x30
 800619a:	9903      	ldr	r1, [sp, #12]
 800619c:	f108 0801 	add.w	r8, r8, #1
 80061a0:	700a      	strb	r2, [r1, #0]
 80061a2:	781a      	ldrb	r2, [r3, #0]
 80061a4:	3201      	adds	r2, #1
 80061a6:	701a      	strb	r2, [r3, #0]
 80061a8:	e79e      	b.n	80060e8 <_dtoa_r+0x648>
 80061aa:	46d0      	mov	r8, sl
 80061ac:	e7eb      	b.n	8006186 <_dtoa_r+0x6e6>
 80061ae:	2200      	movs	r2, #0
 80061b0:	4b6e      	ldr	r3, [pc, #440]	; (800636c <_dtoa_r+0x8cc>)
 80061b2:	f7fa f991 	bl	80004d8 <__aeabi_dmul>
 80061b6:	2200      	movs	r2, #0
 80061b8:	2300      	movs	r3, #0
 80061ba:	4680      	mov	r8, r0
 80061bc:	4689      	mov	r9, r1
 80061be:	f7fa fbf3 	bl	80009a8 <__aeabi_dcmpeq>
 80061c2:	2800      	cmp	r0, #0
 80061c4:	d09b      	beq.n	80060fe <_dtoa_r+0x65e>
 80061c6:	e7cd      	b.n	8006164 <_dtoa_r+0x6c4>
 80061c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80061ca:	2a00      	cmp	r2, #0
 80061cc:	f000 80d0 	beq.w	8006370 <_dtoa_r+0x8d0>
 80061d0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80061d2:	2a01      	cmp	r2, #1
 80061d4:	f300 80ae 	bgt.w	8006334 <_dtoa_r+0x894>
 80061d8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80061da:	2a00      	cmp	r2, #0
 80061dc:	f000 80a6 	beq.w	800632c <_dtoa_r+0x88c>
 80061e0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80061e4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80061e6:	9f06      	ldr	r7, [sp, #24]
 80061e8:	9a06      	ldr	r2, [sp, #24]
 80061ea:	2101      	movs	r1, #1
 80061ec:	441a      	add	r2, r3
 80061ee:	9206      	str	r2, [sp, #24]
 80061f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80061f2:	4628      	mov	r0, r5
 80061f4:	441a      	add	r2, r3
 80061f6:	9209      	str	r2, [sp, #36]	; 0x24
 80061f8:	f000 fb5e 	bl	80068b8 <__i2b>
 80061fc:	4606      	mov	r6, r0
 80061fe:	2f00      	cmp	r7, #0
 8006200:	dd0c      	ble.n	800621c <_dtoa_r+0x77c>
 8006202:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006204:	2b00      	cmp	r3, #0
 8006206:	dd09      	ble.n	800621c <_dtoa_r+0x77c>
 8006208:	42bb      	cmp	r3, r7
 800620a:	bfa8      	it	ge
 800620c:	463b      	movge	r3, r7
 800620e:	9a06      	ldr	r2, [sp, #24]
 8006210:	1aff      	subs	r7, r7, r3
 8006212:	1ad2      	subs	r2, r2, r3
 8006214:	9206      	str	r2, [sp, #24]
 8006216:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006218:	1ad3      	subs	r3, r2, r3
 800621a:	9309      	str	r3, [sp, #36]	; 0x24
 800621c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800621e:	b1f3      	cbz	r3, 800625e <_dtoa_r+0x7be>
 8006220:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006222:	2b00      	cmp	r3, #0
 8006224:	f000 80a8 	beq.w	8006378 <_dtoa_r+0x8d8>
 8006228:	2c00      	cmp	r4, #0
 800622a:	dd10      	ble.n	800624e <_dtoa_r+0x7ae>
 800622c:	4631      	mov	r1, r6
 800622e:	4622      	mov	r2, r4
 8006230:	4628      	mov	r0, r5
 8006232:	f000 fbff 	bl	8006a34 <__pow5mult>
 8006236:	465a      	mov	r2, fp
 8006238:	4601      	mov	r1, r0
 800623a:	4606      	mov	r6, r0
 800623c:	4628      	mov	r0, r5
 800623e:	f000 fb51 	bl	80068e4 <__multiply>
 8006242:	4680      	mov	r8, r0
 8006244:	4659      	mov	r1, fp
 8006246:	4628      	mov	r0, r5
 8006248:	f000 fa80 	bl	800674c <_Bfree>
 800624c:	46c3      	mov	fp, r8
 800624e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006250:	1b1a      	subs	r2, r3, r4
 8006252:	d004      	beq.n	800625e <_dtoa_r+0x7be>
 8006254:	4659      	mov	r1, fp
 8006256:	4628      	mov	r0, r5
 8006258:	f000 fbec 	bl	8006a34 <__pow5mult>
 800625c:	4683      	mov	fp, r0
 800625e:	2101      	movs	r1, #1
 8006260:	4628      	mov	r0, r5
 8006262:	f000 fb29 	bl	80068b8 <__i2b>
 8006266:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006268:	4604      	mov	r4, r0
 800626a:	2b00      	cmp	r3, #0
 800626c:	f340 8086 	ble.w	800637c <_dtoa_r+0x8dc>
 8006270:	461a      	mov	r2, r3
 8006272:	4601      	mov	r1, r0
 8006274:	4628      	mov	r0, r5
 8006276:	f000 fbdd 	bl	8006a34 <__pow5mult>
 800627a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800627c:	4604      	mov	r4, r0
 800627e:	2b01      	cmp	r3, #1
 8006280:	dd7f      	ble.n	8006382 <_dtoa_r+0x8e2>
 8006282:	f04f 0800 	mov.w	r8, #0
 8006286:	6923      	ldr	r3, [r4, #16]
 8006288:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800628c:	6918      	ldr	r0, [r3, #16]
 800628e:	f000 fac5 	bl	800681c <__hi0bits>
 8006292:	f1c0 0020 	rsb	r0, r0, #32
 8006296:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006298:	4418      	add	r0, r3
 800629a:	f010 001f 	ands.w	r0, r0, #31
 800629e:	f000 8092 	beq.w	80063c6 <_dtoa_r+0x926>
 80062a2:	f1c0 0320 	rsb	r3, r0, #32
 80062a6:	2b04      	cmp	r3, #4
 80062a8:	f340 808a 	ble.w	80063c0 <_dtoa_r+0x920>
 80062ac:	f1c0 001c 	rsb	r0, r0, #28
 80062b0:	9b06      	ldr	r3, [sp, #24]
 80062b2:	4407      	add	r7, r0
 80062b4:	4403      	add	r3, r0
 80062b6:	9306      	str	r3, [sp, #24]
 80062b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062ba:	4403      	add	r3, r0
 80062bc:	9309      	str	r3, [sp, #36]	; 0x24
 80062be:	9b06      	ldr	r3, [sp, #24]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	dd05      	ble.n	80062d0 <_dtoa_r+0x830>
 80062c4:	4659      	mov	r1, fp
 80062c6:	461a      	mov	r2, r3
 80062c8:	4628      	mov	r0, r5
 80062ca:	f000 fc0d 	bl	8006ae8 <__lshift>
 80062ce:	4683      	mov	fp, r0
 80062d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	dd05      	ble.n	80062e2 <_dtoa_r+0x842>
 80062d6:	4621      	mov	r1, r4
 80062d8:	461a      	mov	r2, r3
 80062da:	4628      	mov	r0, r5
 80062dc:	f000 fc04 	bl	8006ae8 <__lshift>
 80062e0:	4604      	mov	r4, r0
 80062e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d070      	beq.n	80063ca <_dtoa_r+0x92a>
 80062e8:	4621      	mov	r1, r4
 80062ea:	4658      	mov	r0, fp
 80062ec:	f000 fc6c 	bl	8006bc8 <__mcmp>
 80062f0:	2800      	cmp	r0, #0
 80062f2:	da6a      	bge.n	80063ca <_dtoa_r+0x92a>
 80062f4:	2300      	movs	r3, #0
 80062f6:	4659      	mov	r1, fp
 80062f8:	220a      	movs	r2, #10
 80062fa:	4628      	mov	r0, r5
 80062fc:	f000 fa48 	bl	8006790 <__multadd>
 8006300:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006302:	4683      	mov	fp, r0
 8006304:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006308:	2b00      	cmp	r3, #0
 800630a:	f000 8194 	beq.w	8006636 <_dtoa_r+0xb96>
 800630e:	4631      	mov	r1, r6
 8006310:	2300      	movs	r3, #0
 8006312:	220a      	movs	r2, #10
 8006314:	4628      	mov	r0, r5
 8006316:	f000 fa3b 	bl	8006790 <__multadd>
 800631a:	f1b9 0f00 	cmp.w	r9, #0
 800631e:	4606      	mov	r6, r0
 8006320:	f300 8093 	bgt.w	800644a <_dtoa_r+0x9aa>
 8006324:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006326:	2b02      	cmp	r3, #2
 8006328:	dc57      	bgt.n	80063da <_dtoa_r+0x93a>
 800632a:	e08e      	b.n	800644a <_dtoa_r+0x9aa>
 800632c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800632e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006332:	e757      	b.n	80061e4 <_dtoa_r+0x744>
 8006334:	9b08      	ldr	r3, [sp, #32]
 8006336:	1e5c      	subs	r4, r3, #1
 8006338:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800633a:	42a3      	cmp	r3, r4
 800633c:	bfb7      	itett	lt
 800633e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006340:	1b1c      	subge	r4, r3, r4
 8006342:	1ae2      	sublt	r2, r4, r3
 8006344:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006346:	bfbe      	ittt	lt
 8006348:	940a      	strlt	r4, [sp, #40]	; 0x28
 800634a:	189b      	addlt	r3, r3, r2
 800634c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800634e:	9b08      	ldr	r3, [sp, #32]
 8006350:	bfb8      	it	lt
 8006352:	2400      	movlt	r4, #0
 8006354:	2b00      	cmp	r3, #0
 8006356:	bfbb      	ittet	lt
 8006358:	9b06      	ldrlt	r3, [sp, #24]
 800635a:	9a08      	ldrlt	r2, [sp, #32]
 800635c:	9f06      	ldrge	r7, [sp, #24]
 800635e:	1a9f      	sublt	r7, r3, r2
 8006360:	bfac      	ite	ge
 8006362:	9b08      	ldrge	r3, [sp, #32]
 8006364:	2300      	movlt	r3, #0
 8006366:	e73f      	b.n	80061e8 <_dtoa_r+0x748>
 8006368:	3fe00000 	.word	0x3fe00000
 800636c:	40240000 	.word	0x40240000
 8006370:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006372:	9f06      	ldr	r7, [sp, #24]
 8006374:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006376:	e742      	b.n	80061fe <_dtoa_r+0x75e>
 8006378:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800637a:	e76b      	b.n	8006254 <_dtoa_r+0x7b4>
 800637c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800637e:	2b01      	cmp	r3, #1
 8006380:	dc19      	bgt.n	80063b6 <_dtoa_r+0x916>
 8006382:	9b04      	ldr	r3, [sp, #16]
 8006384:	b9bb      	cbnz	r3, 80063b6 <_dtoa_r+0x916>
 8006386:	9b05      	ldr	r3, [sp, #20]
 8006388:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800638c:	b99b      	cbnz	r3, 80063b6 <_dtoa_r+0x916>
 800638e:	9b05      	ldr	r3, [sp, #20]
 8006390:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006394:	0d1b      	lsrs	r3, r3, #20
 8006396:	051b      	lsls	r3, r3, #20
 8006398:	b183      	cbz	r3, 80063bc <_dtoa_r+0x91c>
 800639a:	f04f 0801 	mov.w	r8, #1
 800639e:	9b06      	ldr	r3, [sp, #24]
 80063a0:	3301      	adds	r3, #1
 80063a2:	9306      	str	r3, [sp, #24]
 80063a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063a6:	3301      	adds	r3, #1
 80063a8:	9309      	str	r3, [sp, #36]	; 0x24
 80063aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	f47f af6a 	bne.w	8006286 <_dtoa_r+0x7e6>
 80063b2:	2001      	movs	r0, #1
 80063b4:	e76f      	b.n	8006296 <_dtoa_r+0x7f6>
 80063b6:	f04f 0800 	mov.w	r8, #0
 80063ba:	e7f6      	b.n	80063aa <_dtoa_r+0x90a>
 80063bc:	4698      	mov	r8, r3
 80063be:	e7f4      	b.n	80063aa <_dtoa_r+0x90a>
 80063c0:	f43f af7d 	beq.w	80062be <_dtoa_r+0x81e>
 80063c4:	4618      	mov	r0, r3
 80063c6:	301c      	adds	r0, #28
 80063c8:	e772      	b.n	80062b0 <_dtoa_r+0x810>
 80063ca:	9b08      	ldr	r3, [sp, #32]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	dc36      	bgt.n	800643e <_dtoa_r+0x99e>
 80063d0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80063d2:	2b02      	cmp	r3, #2
 80063d4:	dd33      	ble.n	800643e <_dtoa_r+0x99e>
 80063d6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80063da:	f1b9 0f00 	cmp.w	r9, #0
 80063de:	d10d      	bne.n	80063fc <_dtoa_r+0x95c>
 80063e0:	4621      	mov	r1, r4
 80063e2:	464b      	mov	r3, r9
 80063e4:	2205      	movs	r2, #5
 80063e6:	4628      	mov	r0, r5
 80063e8:	f000 f9d2 	bl	8006790 <__multadd>
 80063ec:	4601      	mov	r1, r0
 80063ee:	4604      	mov	r4, r0
 80063f0:	4658      	mov	r0, fp
 80063f2:	f000 fbe9 	bl	8006bc8 <__mcmp>
 80063f6:	2800      	cmp	r0, #0
 80063f8:	f73f adb8 	bgt.w	8005f6c <_dtoa_r+0x4cc>
 80063fc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80063fe:	9f03      	ldr	r7, [sp, #12]
 8006400:	ea6f 0a03 	mvn.w	sl, r3
 8006404:	f04f 0800 	mov.w	r8, #0
 8006408:	4621      	mov	r1, r4
 800640a:	4628      	mov	r0, r5
 800640c:	f000 f99e 	bl	800674c <_Bfree>
 8006410:	2e00      	cmp	r6, #0
 8006412:	f43f aea7 	beq.w	8006164 <_dtoa_r+0x6c4>
 8006416:	f1b8 0f00 	cmp.w	r8, #0
 800641a:	d005      	beq.n	8006428 <_dtoa_r+0x988>
 800641c:	45b0      	cmp	r8, r6
 800641e:	d003      	beq.n	8006428 <_dtoa_r+0x988>
 8006420:	4641      	mov	r1, r8
 8006422:	4628      	mov	r0, r5
 8006424:	f000 f992 	bl	800674c <_Bfree>
 8006428:	4631      	mov	r1, r6
 800642a:	4628      	mov	r0, r5
 800642c:	f000 f98e 	bl	800674c <_Bfree>
 8006430:	e698      	b.n	8006164 <_dtoa_r+0x6c4>
 8006432:	2400      	movs	r4, #0
 8006434:	4626      	mov	r6, r4
 8006436:	e7e1      	b.n	80063fc <_dtoa_r+0x95c>
 8006438:	46c2      	mov	sl, r8
 800643a:	4626      	mov	r6, r4
 800643c:	e596      	b.n	8005f6c <_dtoa_r+0x4cc>
 800643e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006440:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006444:	2b00      	cmp	r3, #0
 8006446:	f000 80fd 	beq.w	8006644 <_dtoa_r+0xba4>
 800644a:	2f00      	cmp	r7, #0
 800644c:	dd05      	ble.n	800645a <_dtoa_r+0x9ba>
 800644e:	4631      	mov	r1, r6
 8006450:	463a      	mov	r2, r7
 8006452:	4628      	mov	r0, r5
 8006454:	f000 fb48 	bl	8006ae8 <__lshift>
 8006458:	4606      	mov	r6, r0
 800645a:	f1b8 0f00 	cmp.w	r8, #0
 800645e:	d05c      	beq.n	800651a <_dtoa_r+0xa7a>
 8006460:	4628      	mov	r0, r5
 8006462:	6871      	ldr	r1, [r6, #4]
 8006464:	f000 f932 	bl	80066cc <_Balloc>
 8006468:	4607      	mov	r7, r0
 800646a:	b928      	cbnz	r0, 8006478 <_dtoa_r+0x9d8>
 800646c:	4602      	mov	r2, r0
 800646e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006472:	4b7f      	ldr	r3, [pc, #508]	; (8006670 <_dtoa_r+0xbd0>)
 8006474:	f7ff bb28 	b.w	8005ac8 <_dtoa_r+0x28>
 8006478:	6932      	ldr	r2, [r6, #16]
 800647a:	f106 010c 	add.w	r1, r6, #12
 800647e:	3202      	adds	r2, #2
 8006480:	0092      	lsls	r2, r2, #2
 8006482:	300c      	adds	r0, #12
 8006484:	f000 f914 	bl	80066b0 <memcpy>
 8006488:	2201      	movs	r2, #1
 800648a:	4639      	mov	r1, r7
 800648c:	4628      	mov	r0, r5
 800648e:	f000 fb2b 	bl	8006ae8 <__lshift>
 8006492:	46b0      	mov	r8, r6
 8006494:	4606      	mov	r6, r0
 8006496:	9b03      	ldr	r3, [sp, #12]
 8006498:	3301      	adds	r3, #1
 800649a:	9308      	str	r3, [sp, #32]
 800649c:	9b03      	ldr	r3, [sp, #12]
 800649e:	444b      	add	r3, r9
 80064a0:	930a      	str	r3, [sp, #40]	; 0x28
 80064a2:	9b04      	ldr	r3, [sp, #16]
 80064a4:	f003 0301 	and.w	r3, r3, #1
 80064a8:	9309      	str	r3, [sp, #36]	; 0x24
 80064aa:	9b08      	ldr	r3, [sp, #32]
 80064ac:	4621      	mov	r1, r4
 80064ae:	3b01      	subs	r3, #1
 80064b0:	4658      	mov	r0, fp
 80064b2:	9304      	str	r3, [sp, #16]
 80064b4:	f7ff fa68 	bl	8005988 <quorem>
 80064b8:	4603      	mov	r3, r0
 80064ba:	4641      	mov	r1, r8
 80064bc:	3330      	adds	r3, #48	; 0x30
 80064be:	9006      	str	r0, [sp, #24]
 80064c0:	4658      	mov	r0, fp
 80064c2:	930b      	str	r3, [sp, #44]	; 0x2c
 80064c4:	f000 fb80 	bl	8006bc8 <__mcmp>
 80064c8:	4632      	mov	r2, r6
 80064ca:	4681      	mov	r9, r0
 80064cc:	4621      	mov	r1, r4
 80064ce:	4628      	mov	r0, r5
 80064d0:	f000 fb96 	bl	8006c00 <__mdiff>
 80064d4:	68c2      	ldr	r2, [r0, #12]
 80064d6:	4607      	mov	r7, r0
 80064d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80064da:	bb02      	cbnz	r2, 800651e <_dtoa_r+0xa7e>
 80064dc:	4601      	mov	r1, r0
 80064de:	4658      	mov	r0, fp
 80064e0:	f000 fb72 	bl	8006bc8 <__mcmp>
 80064e4:	4602      	mov	r2, r0
 80064e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80064e8:	4639      	mov	r1, r7
 80064ea:	4628      	mov	r0, r5
 80064ec:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80064f0:	f000 f92c 	bl	800674c <_Bfree>
 80064f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80064f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80064f8:	9f08      	ldr	r7, [sp, #32]
 80064fa:	ea43 0102 	orr.w	r1, r3, r2
 80064fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006500:	430b      	orrs	r3, r1
 8006502:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006504:	d10d      	bne.n	8006522 <_dtoa_r+0xa82>
 8006506:	2b39      	cmp	r3, #57	; 0x39
 8006508:	d029      	beq.n	800655e <_dtoa_r+0xabe>
 800650a:	f1b9 0f00 	cmp.w	r9, #0
 800650e:	dd01      	ble.n	8006514 <_dtoa_r+0xa74>
 8006510:	9b06      	ldr	r3, [sp, #24]
 8006512:	3331      	adds	r3, #49	; 0x31
 8006514:	9a04      	ldr	r2, [sp, #16]
 8006516:	7013      	strb	r3, [r2, #0]
 8006518:	e776      	b.n	8006408 <_dtoa_r+0x968>
 800651a:	4630      	mov	r0, r6
 800651c:	e7b9      	b.n	8006492 <_dtoa_r+0x9f2>
 800651e:	2201      	movs	r2, #1
 8006520:	e7e2      	b.n	80064e8 <_dtoa_r+0xa48>
 8006522:	f1b9 0f00 	cmp.w	r9, #0
 8006526:	db06      	blt.n	8006536 <_dtoa_r+0xa96>
 8006528:	9922      	ldr	r1, [sp, #136]	; 0x88
 800652a:	ea41 0909 	orr.w	r9, r1, r9
 800652e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006530:	ea59 0101 	orrs.w	r1, r9, r1
 8006534:	d120      	bne.n	8006578 <_dtoa_r+0xad8>
 8006536:	2a00      	cmp	r2, #0
 8006538:	ddec      	ble.n	8006514 <_dtoa_r+0xa74>
 800653a:	4659      	mov	r1, fp
 800653c:	2201      	movs	r2, #1
 800653e:	4628      	mov	r0, r5
 8006540:	9308      	str	r3, [sp, #32]
 8006542:	f000 fad1 	bl	8006ae8 <__lshift>
 8006546:	4621      	mov	r1, r4
 8006548:	4683      	mov	fp, r0
 800654a:	f000 fb3d 	bl	8006bc8 <__mcmp>
 800654e:	2800      	cmp	r0, #0
 8006550:	9b08      	ldr	r3, [sp, #32]
 8006552:	dc02      	bgt.n	800655a <_dtoa_r+0xaba>
 8006554:	d1de      	bne.n	8006514 <_dtoa_r+0xa74>
 8006556:	07da      	lsls	r2, r3, #31
 8006558:	d5dc      	bpl.n	8006514 <_dtoa_r+0xa74>
 800655a:	2b39      	cmp	r3, #57	; 0x39
 800655c:	d1d8      	bne.n	8006510 <_dtoa_r+0xa70>
 800655e:	2339      	movs	r3, #57	; 0x39
 8006560:	9a04      	ldr	r2, [sp, #16]
 8006562:	7013      	strb	r3, [r2, #0]
 8006564:	463b      	mov	r3, r7
 8006566:	461f      	mov	r7, r3
 8006568:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800656c:	3b01      	subs	r3, #1
 800656e:	2a39      	cmp	r2, #57	; 0x39
 8006570:	d050      	beq.n	8006614 <_dtoa_r+0xb74>
 8006572:	3201      	adds	r2, #1
 8006574:	701a      	strb	r2, [r3, #0]
 8006576:	e747      	b.n	8006408 <_dtoa_r+0x968>
 8006578:	2a00      	cmp	r2, #0
 800657a:	dd03      	ble.n	8006584 <_dtoa_r+0xae4>
 800657c:	2b39      	cmp	r3, #57	; 0x39
 800657e:	d0ee      	beq.n	800655e <_dtoa_r+0xabe>
 8006580:	3301      	adds	r3, #1
 8006582:	e7c7      	b.n	8006514 <_dtoa_r+0xa74>
 8006584:	9a08      	ldr	r2, [sp, #32]
 8006586:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006588:	f802 3c01 	strb.w	r3, [r2, #-1]
 800658c:	428a      	cmp	r2, r1
 800658e:	d02a      	beq.n	80065e6 <_dtoa_r+0xb46>
 8006590:	4659      	mov	r1, fp
 8006592:	2300      	movs	r3, #0
 8006594:	220a      	movs	r2, #10
 8006596:	4628      	mov	r0, r5
 8006598:	f000 f8fa 	bl	8006790 <__multadd>
 800659c:	45b0      	cmp	r8, r6
 800659e:	4683      	mov	fp, r0
 80065a0:	f04f 0300 	mov.w	r3, #0
 80065a4:	f04f 020a 	mov.w	r2, #10
 80065a8:	4641      	mov	r1, r8
 80065aa:	4628      	mov	r0, r5
 80065ac:	d107      	bne.n	80065be <_dtoa_r+0xb1e>
 80065ae:	f000 f8ef 	bl	8006790 <__multadd>
 80065b2:	4680      	mov	r8, r0
 80065b4:	4606      	mov	r6, r0
 80065b6:	9b08      	ldr	r3, [sp, #32]
 80065b8:	3301      	adds	r3, #1
 80065ba:	9308      	str	r3, [sp, #32]
 80065bc:	e775      	b.n	80064aa <_dtoa_r+0xa0a>
 80065be:	f000 f8e7 	bl	8006790 <__multadd>
 80065c2:	4631      	mov	r1, r6
 80065c4:	4680      	mov	r8, r0
 80065c6:	2300      	movs	r3, #0
 80065c8:	220a      	movs	r2, #10
 80065ca:	4628      	mov	r0, r5
 80065cc:	f000 f8e0 	bl	8006790 <__multadd>
 80065d0:	4606      	mov	r6, r0
 80065d2:	e7f0      	b.n	80065b6 <_dtoa_r+0xb16>
 80065d4:	f1b9 0f00 	cmp.w	r9, #0
 80065d8:	bfcc      	ite	gt
 80065da:	464f      	movgt	r7, r9
 80065dc:	2701      	movle	r7, #1
 80065de:	f04f 0800 	mov.w	r8, #0
 80065e2:	9a03      	ldr	r2, [sp, #12]
 80065e4:	4417      	add	r7, r2
 80065e6:	4659      	mov	r1, fp
 80065e8:	2201      	movs	r2, #1
 80065ea:	4628      	mov	r0, r5
 80065ec:	9308      	str	r3, [sp, #32]
 80065ee:	f000 fa7b 	bl	8006ae8 <__lshift>
 80065f2:	4621      	mov	r1, r4
 80065f4:	4683      	mov	fp, r0
 80065f6:	f000 fae7 	bl	8006bc8 <__mcmp>
 80065fa:	2800      	cmp	r0, #0
 80065fc:	dcb2      	bgt.n	8006564 <_dtoa_r+0xac4>
 80065fe:	d102      	bne.n	8006606 <_dtoa_r+0xb66>
 8006600:	9b08      	ldr	r3, [sp, #32]
 8006602:	07db      	lsls	r3, r3, #31
 8006604:	d4ae      	bmi.n	8006564 <_dtoa_r+0xac4>
 8006606:	463b      	mov	r3, r7
 8006608:	461f      	mov	r7, r3
 800660a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800660e:	2a30      	cmp	r2, #48	; 0x30
 8006610:	d0fa      	beq.n	8006608 <_dtoa_r+0xb68>
 8006612:	e6f9      	b.n	8006408 <_dtoa_r+0x968>
 8006614:	9a03      	ldr	r2, [sp, #12]
 8006616:	429a      	cmp	r2, r3
 8006618:	d1a5      	bne.n	8006566 <_dtoa_r+0xac6>
 800661a:	2331      	movs	r3, #49	; 0x31
 800661c:	f10a 0a01 	add.w	sl, sl, #1
 8006620:	e779      	b.n	8006516 <_dtoa_r+0xa76>
 8006622:	4b14      	ldr	r3, [pc, #80]	; (8006674 <_dtoa_r+0xbd4>)
 8006624:	f7ff baa8 	b.w	8005b78 <_dtoa_r+0xd8>
 8006628:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800662a:	2b00      	cmp	r3, #0
 800662c:	f47f aa81 	bne.w	8005b32 <_dtoa_r+0x92>
 8006630:	4b11      	ldr	r3, [pc, #68]	; (8006678 <_dtoa_r+0xbd8>)
 8006632:	f7ff baa1 	b.w	8005b78 <_dtoa_r+0xd8>
 8006636:	f1b9 0f00 	cmp.w	r9, #0
 800663a:	dc03      	bgt.n	8006644 <_dtoa_r+0xba4>
 800663c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800663e:	2b02      	cmp	r3, #2
 8006640:	f73f aecb 	bgt.w	80063da <_dtoa_r+0x93a>
 8006644:	9f03      	ldr	r7, [sp, #12]
 8006646:	4621      	mov	r1, r4
 8006648:	4658      	mov	r0, fp
 800664a:	f7ff f99d 	bl	8005988 <quorem>
 800664e:	9a03      	ldr	r2, [sp, #12]
 8006650:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006654:	f807 3b01 	strb.w	r3, [r7], #1
 8006658:	1aba      	subs	r2, r7, r2
 800665a:	4591      	cmp	r9, r2
 800665c:	ddba      	ble.n	80065d4 <_dtoa_r+0xb34>
 800665e:	4659      	mov	r1, fp
 8006660:	2300      	movs	r3, #0
 8006662:	220a      	movs	r2, #10
 8006664:	4628      	mov	r0, r5
 8006666:	f000 f893 	bl	8006790 <__multadd>
 800666a:	4683      	mov	fp, r0
 800666c:	e7eb      	b.n	8006646 <_dtoa_r+0xba6>
 800666e:	bf00      	nop
 8006670:	080081ab 	.word	0x080081ab
 8006674:	08008108 	.word	0x08008108
 8006678:	0800812c 	.word	0x0800812c

0800667c <_localeconv_r>:
 800667c:	4800      	ldr	r0, [pc, #0]	; (8006680 <_localeconv_r+0x4>)
 800667e:	4770      	bx	lr
 8006680:	20000160 	.word	0x20000160

08006684 <malloc>:
 8006684:	4b02      	ldr	r3, [pc, #8]	; (8006690 <malloc+0xc>)
 8006686:	4601      	mov	r1, r0
 8006688:	6818      	ldr	r0, [r3, #0]
 800668a:	f000 bc1d 	b.w	8006ec8 <_malloc_r>
 800668e:	bf00      	nop
 8006690:	2000000c 	.word	0x2000000c

08006694 <memchr>:
 8006694:	4603      	mov	r3, r0
 8006696:	b510      	push	{r4, lr}
 8006698:	b2c9      	uxtb	r1, r1
 800669a:	4402      	add	r2, r0
 800669c:	4293      	cmp	r3, r2
 800669e:	4618      	mov	r0, r3
 80066a0:	d101      	bne.n	80066a6 <memchr+0x12>
 80066a2:	2000      	movs	r0, #0
 80066a4:	e003      	b.n	80066ae <memchr+0x1a>
 80066a6:	7804      	ldrb	r4, [r0, #0]
 80066a8:	3301      	adds	r3, #1
 80066aa:	428c      	cmp	r4, r1
 80066ac:	d1f6      	bne.n	800669c <memchr+0x8>
 80066ae:	bd10      	pop	{r4, pc}

080066b0 <memcpy>:
 80066b0:	440a      	add	r2, r1
 80066b2:	4291      	cmp	r1, r2
 80066b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80066b8:	d100      	bne.n	80066bc <memcpy+0xc>
 80066ba:	4770      	bx	lr
 80066bc:	b510      	push	{r4, lr}
 80066be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80066c2:	4291      	cmp	r1, r2
 80066c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80066c8:	d1f9      	bne.n	80066be <memcpy+0xe>
 80066ca:	bd10      	pop	{r4, pc}

080066cc <_Balloc>:
 80066cc:	b570      	push	{r4, r5, r6, lr}
 80066ce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80066d0:	4604      	mov	r4, r0
 80066d2:	460d      	mov	r5, r1
 80066d4:	b976      	cbnz	r6, 80066f4 <_Balloc+0x28>
 80066d6:	2010      	movs	r0, #16
 80066d8:	f7ff ffd4 	bl	8006684 <malloc>
 80066dc:	4602      	mov	r2, r0
 80066de:	6260      	str	r0, [r4, #36]	; 0x24
 80066e0:	b920      	cbnz	r0, 80066ec <_Balloc+0x20>
 80066e2:	2166      	movs	r1, #102	; 0x66
 80066e4:	4b17      	ldr	r3, [pc, #92]	; (8006744 <_Balloc+0x78>)
 80066e6:	4818      	ldr	r0, [pc, #96]	; (8006748 <_Balloc+0x7c>)
 80066e8:	f000 fdce 	bl	8007288 <__assert_func>
 80066ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80066f0:	6006      	str	r6, [r0, #0]
 80066f2:	60c6      	str	r6, [r0, #12]
 80066f4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80066f6:	68f3      	ldr	r3, [r6, #12]
 80066f8:	b183      	cbz	r3, 800671c <_Balloc+0x50>
 80066fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80066fc:	68db      	ldr	r3, [r3, #12]
 80066fe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006702:	b9b8      	cbnz	r0, 8006734 <_Balloc+0x68>
 8006704:	2101      	movs	r1, #1
 8006706:	fa01 f605 	lsl.w	r6, r1, r5
 800670a:	1d72      	adds	r2, r6, #5
 800670c:	4620      	mov	r0, r4
 800670e:	0092      	lsls	r2, r2, #2
 8006710:	f000 fb5e 	bl	8006dd0 <_calloc_r>
 8006714:	b160      	cbz	r0, 8006730 <_Balloc+0x64>
 8006716:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800671a:	e00e      	b.n	800673a <_Balloc+0x6e>
 800671c:	2221      	movs	r2, #33	; 0x21
 800671e:	2104      	movs	r1, #4
 8006720:	4620      	mov	r0, r4
 8006722:	f000 fb55 	bl	8006dd0 <_calloc_r>
 8006726:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006728:	60f0      	str	r0, [r6, #12]
 800672a:	68db      	ldr	r3, [r3, #12]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d1e4      	bne.n	80066fa <_Balloc+0x2e>
 8006730:	2000      	movs	r0, #0
 8006732:	bd70      	pop	{r4, r5, r6, pc}
 8006734:	6802      	ldr	r2, [r0, #0]
 8006736:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800673a:	2300      	movs	r3, #0
 800673c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006740:	e7f7      	b.n	8006732 <_Balloc+0x66>
 8006742:	bf00      	nop
 8006744:	08008139 	.word	0x08008139
 8006748:	080081bc 	.word	0x080081bc

0800674c <_Bfree>:
 800674c:	b570      	push	{r4, r5, r6, lr}
 800674e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006750:	4605      	mov	r5, r0
 8006752:	460c      	mov	r4, r1
 8006754:	b976      	cbnz	r6, 8006774 <_Bfree+0x28>
 8006756:	2010      	movs	r0, #16
 8006758:	f7ff ff94 	bl	8006684 <malloc>
 800675c:	4602      	mov	r2, r0
 800675e:	6268      	str	r0, [r5, #36]	; 0x24
 8006760:	b920      	cbnz	r0, 800676c <_Bfree+0x20>
 8006762:	218a      	movs	r1, #138	; 0x8a
 8006764:	4b08      	ldr	r3, [pc, #32]	; (8006788 <_Bfree+0x3c>)
 8006766:	4809      	ldr	r0, [pc, #36]	; (800678c <_Bfree+0x40>)
 8006768:	f000 fd8e 	bl	8007288 <__assert_func>
 800676c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006770:	6006      	str	r6, [r0, #0]
 8006772:	60c6      	str	r6, [r0, #12]
 8006774:	b13c      	cbz	r4, 8006786 <_Bfree+0x3a>
 8006776:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006778:	6862      	ldr	r2, [r4, #4]
 800677a:	68db      	ldr	r3, [r3, #12]
 800677c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006780:	6021      	str	r1, [r4, #0]
 8006782:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006786:	bd70      	pop	{r4, r5, r6, pc}
 8006788:	08008139 	.word	0x08008139
 800678c:	080081bc 	.word	0x080081bc

08006790 <__multadd>:
 8006790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006794:	4607      	mov	r7, r0
 8006796:	460c      	mov	r4, r1
 8006798:	461e      	mov	r6, r3
 800679a:	2000      	movs	r0, #0
 800679c:	690d      	ldr	r5, [r1, #16]
 800679e:	f101 0c14 	add.w	ip, r1, #20
 80067a2:	f8dc 3000 	ldr.w	r3, [ip]
 80067a6:	3001      	adds	r0, #1
 80067a8:	b299      	uxth	r1, r3
 80067aa:	fb02 6101 	mla	r1, r2, r1, r6
 80067ae:	0c1e      	lsrs	r6, r3, #16
 80067b0:	0c0b      	lsrs	r3, r1, #16
 80067b2:	fb02 3306 	mla	r3, r2, r6, r3
 80067b6:	b289      	uxth	r1, r1
 80067b8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80067bc:	4285      	cmp	r5, r0
 80067be:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80067c2:	f84c 1b04 	str.w	r1, [ip], #4
 80067c6:	dcec      	bgt.n	80067a2 <__multadd+0x12>
 80067c8:	b30e      	cbz	r6, 800680e <__multadd+0x7e>
 80067ca:	68a3      	ldr	r3, [r4, #8]
 80067cc:	42ab      	cmp	r3, r5
 80067ce:	dc19      	bgt.n	8006804 <__multadd+0x74>
 80067d0:	6861      	ldr	r1, [r4, #4]
 80067d2:	4638      	mov	r0, r7
 80067d4:	3101      	adds	r1, #1
 80067d6:	f7ff ff79 	bl	80066cc <_Balloc>
 80067da:	4680      	mov	r8, r0
 80067dc:	b928      	cbnz	r0, 80067ea <__multadd+0x5a>
 80067de:	4602      	mov	r2, r0
 80067e0:	21b5      	movs	r1, #181	; 0xb5
 80067e2:	4b0c      	ldr	r3, [pc, #48]	; (8006814 <__multadd+0x84>)
 80067e4:	480c      	ldr	r0, [pc, #48]	; (8006818 <__multadd+0x88>)
 80067e6:	f000 fd4f 	bl	8007288 <__assert_func>
 80067ea:	6922      	ldr	r2, [r4, #16]
 80067ec:	f104 010c 	add.w	r1, r4, #12
 80067f0:	3202      	adds	r2, #2
 80067f2:	0092      	lsls	r2, r2, #2
 80067f4:	300c      	adds	r0, #12
 80067f6:	f7ff ff5b 	bl	80066b0 <memcpy>
 80067fa:	4621      	mov	r1, r4
 80067fc:	4638      	mov	r0, r7
 80067fe:	f7ff ffa5 	bl	800674c <_Bfree>
 8006802:	4644      	mov	r4, r8
 8006804:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006808:	3501      	adds	r5, #1
 800680a:	615e      	str	r6, [r3, #20]
 800680c:	6125      	str	r5, [r4, #16]
 800680e:	4620      	mov	r0, r4
 8006810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006814:	080081ab 	.word	0x080081ab
 8006818:	080081bc 	.word	0x080081bc

0800681c <__hi0bits>:
 800681c:	0c02      	lsrs	r2, r0, #16
 800681e:	0412      	lsls	r2, r2, #16
 8006820:	4603      	mov	r3, r0
 8006822:	b9ca      	cbnz	r2, 8006858 <__hi0bits+0x3c>
 8006824:	0403      	lsls	r3, r0, #16
 8006826:	2010      	movs	r0, #16
 8006828:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800682c:	bf04      	itt	eq
 800682e:	021b      	lsleq	r3, r3, #8
 8006830:	3008      	addeq	r0, #8
 8006832:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006836:	bf04      	itt	eq
 8006838:	011b      	lsleq	r3, r3, #4
 800683a:	3004      	addeq	r0, #4
 800683c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006840:	bf04      	itt	eq
 8006842:	009b      	lsleq	r3, r3, #2
 8006844:	3002      	addeq	r0, #2
 8006846:	2b00      	cmp	r3, #0
 8006848:	db05      	blt.n	8006856 <__hi0bits+0x3a>
 800684a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800684e:	f100 0001 	add.w	r0, r0, #1
 8006852:	bf08      	it	eq
 8006854:	2020      	moveq	r0, #32
 8006856:	4770      	bx	lr
 8006858:	2000      	movs	r0, #0
 800685a:	e7e5      	b.n	8006828 <__hi0bits+0xc>

0800685c <__lo0bits>:
 800685c:	6803      	ldr	r3, [r0, #0]
 800685e:	4602      	mov	r2, r0
 8006860:	f013 0007 	ands.w	r0, r3, #7
 8006864:	d00b      	beq.n	800687e <__lo0bits+0x22>
 8006866:	07d9      	lsls	r1, r3, #31
 8006868:	d421      	bmi.n	80068ae <__lo0bits+0x52>
 800686a:	0798      	lsls	r0, r3, #30
 800686c:	bf49      	itett	mi
 800686e:	085b      	lsrmi	r3, r3, #1
 8006870:	089b      	lsrpl	r3, r3, #2
 8006872:	2001      	movmi	r0, #1
 8006874:	6013      	strmi	r3, [r2, #0]
 8006876:	bf5c      	itt	pl
 8006878:	2002      	movpl	r0, #2
 800687a:	6013      	strpl	r3, [r2, #0]
 800687c:	4770      	bx	lr
 800687e:	b299      	uxth	r1, r3
 8006880:	b909      	cbnz	r1, 8006886 <__lo0bits+0x2a>
 8006882:	2010      	movs	r0, #16
 8006884:	0c1b      	lsrs	r3, r3, #16
 8006886:	b2d9      	uxtb	r1, r3
 8006888:	b909      	cbnz	r1, 800688e <__lo0bits+0x32>
 800688a:	3008      	adds	r0, #8
 800688c:	0a1b      	lsrs	r3, r3, #8
 800688e:	0719      	lsls	r1, r3, #28
 8006890:	bf04      	itt	eq
 8006892:	091b      	lsreq	r3, r3, #4
 8006894:	3004      	addeq	r0, #4
 8006896:	0799      	lsls	r1, r3, #30
 8006898:	bf04      	itt	eq
 800689a:	089b      	lsreq	r3, r3, #2
 800689c:	3002      	addeq	r0, #2
 800689e:	07d9      	lsls	r1, r3, #31
 80068a0:	d403      	bmi.n	80068aa <__lo0bits+0x4e>
 80068a2:	085b      	lsrs	r3, r3, #1
 80068a4:	f100 0001 	add.w	r0, r0, #1
 80068a8:	d003      	beq.n	80068b2 <__lo0bits+0x56>
 80068aa:	6013      	str	r3, [r2, #0]
 80068ac:	4770      	bx	lr
 80068ae:	2000      	movs	r0, #0
 80068b0:	4770      	bx	lr
 80068b2:	2020      	movs	r0, #32
 80068b4:	4770      	bx	lr
	...

080068b8 <__i2b>:
 80068b8:	b510      	push	{r4, lr}
 80068ba:	460c      	mov	r4, r1
 80068bc:	2101      	movs	r1, #1
 80068be:	f7ff ff05 	bl	80066cc <_Balloc>
 80068c2:	4602      	mov	r2, r0
 80068c4:	b928      	cbnz	r0, 80068d2 <__i2b+0x1a>
 80068c6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80068ca:	4b04      	ldr	r3, [pc, #16]	; (80068dc <__i2b+0x24>)
 80068cc:	4804      	ldr	r0, [pc, #16]	; (80068e0 <__i2b+0x28>)
 80068ce:	f000 fcdb 	bl	8007288 <__assert_func>
 80068d2:	2301      	movs	r3, #1
 80068d4:	6144      	str	r4, [r0, #20]
 80068d6:	6103      	str	r3, [r0, #16]
 80068d8:	bd10      	pop	{r4, pc}
 80068da:	bf00      	nop
 80068dc:	080081ab 	.word	0x080081ab
 80068e0:	080081bc 	.word	0x080081bc

080068e4 <__multiply>:
 80068e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068e8:	4691      	mov	r9, r2
 80068ea:	690a      	ldr	r2, [r1, #16]
 80068ec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80068f0:	460c      	mov	r4, r1
 80068f2:	429a      	cmp	r2, r3
 80068f4:	bfbe      	ittt	lt
 80068f6:	460b      	movlt	r3, r1
 80068f8:	464c      	movlt	r4, r9
 80068fa:	4699      	movlt	r9, r3
 80068fc:	6927      	ldr	r7, [r4, #16]
 80068fe:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006902:	68a3      	ldr	r3, [r4, #8]
 8006904:	6861      	ldr	r1, [r4, #4]
 8006906:	eb07 060a 	add.w	r6, r7, sl
 800690a:	42b3      	cmp	r3, r6
 800690c:	b085      	sub	sp, #20
 800690e:	bfb8      	it	lt
 8006910:	3101      	addlt	r1, #1
 8006912:	f7ff fedb 	bl	80066cc <_Balloc>
 8006916:	b930      	cbnz	r0, 8006926 <__multiply+0x42>
 8006918:	4602      	mov	r2, r0
 800691a:	f240 115d 	movw	r1, #349	; 0x15d
 800691e:	4b43      	ldr	r3, [pc, #268]	; (8006a2c <__multiply+0x148>)
 8006920:	4843      	ldr	r0, [pc, #268]	; (8006a30 <__multiply+0x14c>)
 8006922:	f000 fcb1 	bl	8007288 <__assert_func>
 8006926:	f100 0514 	add.w	r5, r0, #20
 800692a:	462b      	mov	r3, r5
 800692c:	2200      	movs	r2, #0
 800692e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006932:	4543      	cmp	r3, r8
 8006934:	d321      	bcc.n	800697a <__multiply+0x96>
 8006936:	f104 0314 	add.w	r3, r4, #20
 800693a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800693e:	f109 0314 	add.w	r3, r9, #20
 8006942:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006946:	9202      	str	r2, [sp, #8]
 8006948:	1b3a      	subs	r2, r7, r4
 800694a:	3a15      	subs	r2, #21
 800694c:	f022 0203 	bic.w	r2, r2, #3
 8006950:	3204      	adds	r2, #4
 8006952:	f104 0115 	add.w	r1, r4, #21
 8006956:	428f      	cmp	r7, r1
 8006958:	bf38      	it	cc
 800695a:	2204      	movcc	r2, #4
 800695c:	9201      	str	r2, [sp, #4]
 800695e:	9a02      	ldr	r2, [sp, #8]
 8006960:	9303      	str	r3, [sp, #12]
 8006962:	429a      	cmp	r2, r3
 8006964:	d80c      	bhi.n	8006980 <__multiply+0x9c>
 8006966:	2e00      	cmp	r6, #0
 8006968:	dd03      	ble.n	8006972 <__multiply+0x8e>
 800696a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800696e:	2b00      	cmp	r3, #0
 8006970:	d059      	beq.n	8006a26 <__multiply+0x142>
 8006972:	6106      	str	r6, [r0, #16]
 8006974:	b005      	add	sp, #20
 8006976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800697a:	f843 2b04 	str.w	r2, [r3], #4
 800697e:	e7d8      	b.n	8006932 <__multiply+0x4e>
 8006980:	f8b3 a000 	ldrh.w	sl, [r3]
 8006984:	f1ba 0f00 	cmp.w	sl, #0
 8006988:	d023      	beq.n	80069d2 <__multiply+0xee>
 800698a:	46a9      	mov	r9, r5
 800698c:	f04f 0c00 	mov.w	ip, #0
 8006990:	f104 0e14 	add.w	lr, r4, #20
 8006994:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006998:	f8d9 1000 	ldr.w	r1, [r9]
 800699c:	fa1f fb82 	uxth.w	fp, r2
 80069a0:	b289      	uxth	r1, r1
 80069a2:	fb0a 110b 	mla	r1, sl, fp, r1
 80069a6:	4461      	add	r1, ip
 80069a8:	f8d9 c000 	ldr.w	ip, [r9]
 80069ac:	0c12      	lsrs	r2, r2, #16
 80069ae:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80069b2:	fb0a c202 	mla	r2, sl, r2, ip
 80069b6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80069ba:	b289      	uxth	r1, r1
 80069bc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80069c0:	4577      	cmp	r7, lr
 80069c2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80069c6:	f849 1b04 	str.w	r1, [r9], #4
 80069ca:	d8e3      	bhi.n	8006994 <__multiply+0xb0>
 80069cc:	9a01      	ldr	r2, [sp, #4]
 80069ce:	f845 c002 	str.w	ip, [r5, r2]
 80069d2:	9a03      	ldr	r2, [sp, #12]
 80069d4:	3304      	adds	r3, #4
 80069d6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80069da:	f1b9 0f00 	cmp.w	r9, #0
 80069de:	d020      	beq.n	8006a22 <__multiply+0x13e>
 80069e0:	46ae      	mov	lr, r5
 80069e2:	f04f 0a00 	mov.w	sl, #0
 80069e6:	6829      	ldr	r1, [r5, #0]
 80069e8:	f104 0c14 	add.w	ip, r4, #20
 80069ec:	f8bc b000 	ldrh.w	fp, [ip]
 80069f0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80069f4:	b289      	uxth	r1, r1
 80069f6:	fb09 220b 	mla	r2, r9, fp, r2
 80069fa:	4492      	add	sl, r2
 80069fc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006a00:	f84e 1b04 	str.w	r1, [lr], #4
 8006a04:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006a08:	f8be 1000 	ldrh.w	r1, [lr]
 8006a0c:	0c12      	lsrs	r2, r2, #16
 8006a0e:	fb09 1102 	mla	r1, r9, r2, r1
 8006a12:	4567      	cmp	r7, ip
 8006a14:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006a18:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006a1c:	d8e6      	bhi.n	80069ec <__multiply+0x108>
 8006a1e:	9a01      	ldr	r2, [sp, #4]
 8006a20:	50a9      	str	r1, [r5, r2]
 8006a22:	3504      	adds	r5, #4
 8006a24:	e79b      	b.n	800695e <__multiply+0x7a>
 8006a26:	3e01      	subs	r6, #1
 8006a28:	e79d      	b.n	8006966 <__multiply+0x82>
 8006a2a:	bf00      	nop
 8006a2c:	080081ab 	.word	0x080081ab
 8006a30:	080081bc 	.word	0x080081bc

08006a34 <__pow5mult>:
 8006a34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a38:	4615      	mov	r5, r2
 8006a3a:	f012 0203 	ands.w	r2, r2, #3
 8006a3e:	4606      	mov	r6, r0
 8006a40:	460f      	mov	r7, r1
 8006a42:	d007      	beq.n	8006a54 <__pow5mult+0x20>
 8006a44:	4c25      	ldr	r4, [pc, #148]	; (8006adc <__pow5mult+0xa8>)
 8006a46:	3a01      	subs	r2, #1
 8006a48:	2300      	movs	r3, #0
 8006a4a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006a4e:	f7ff fe9f 	bl	8006790 <__multadd>
 8006a52:	4607      	mov	r7, r0
 8006a54:	10ad      	asrs	r5, r5, #2
 8006a56:	d03d      	beq.n	8006ad4 <__pow5mult+0xa0>
 8006a58:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006a5a:	b97c      	cbnz	r4, 8006a7c <__pow5mult+0x48>
 8006a5c:	2010      	movs	r0, #16
 8006a5e:	f7ff fe11 	bl	8006684 <malloc>
 8006a62:	4602      	mov	r2, r0
 8006a64:	6270      	str	r0, [r6, #36]	; 0x24
 8006a66:	b928      	cbnz	r0, 8006a74 <__pow5mult+0x40>
 8006a68:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006a6c:	4b1c      	ldr	r3, [pc, #112]	; (8006ae0 <__pow5mult+0xac>)
 8006a6e:	481d      	ldr	r0, [pc, #116]	; (8006ae4 <__pow5mult+0xb0>)
 8006a70:	f000 fc0a 	bl	8007288 <__assert_func>
 8006a74:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006a78:	6004      	str	r4, [r0, #0]
 8006a7a:	60c4      	str	r4, [r0, #12]
 8006a7c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006a80:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006a84:	b94c      	cbnz	r4, 8006a9a <__pow5mult+0x66>
 8006a86:	f240 2171 	movw	r1, #625	; 0x271
 8006a8a:	4630      	mov	r0, r6
 8006a8c:	f7ff ff14 	bl	80068b8 <__i2b>
 8006a90:	2300      	movs	r3, #0
 8006a92:	4604      	mov	r4, r0
 8006a94:	f8c8 0008 	str.w	r0, [r8, #8]
 8006a98:	6003      	str	r3, [r0, #0]
 8006a9a:	f04f 0900 	mov.w	r9, #0
 8006a9e:	07eb      	lsls	r3, r5, #31
 8006aa0:	d50a      	bpl.n	8006ab8 <__pow5mult+0x84>
 8006aa2:	4639      	mov	r1, r7
 8006aa4:	4622      	mov	r2, r4
 8006aa6:	4630      	mov	r0, r6
 8006aa8:	f7ff ff1c 	bl	80068e4 <__multiply>
 8006aac:	4680      	mov	r8, r0
 8006aae:	4639      	mov	r1, r7
 8006ab0:	4630      	mov	r0, r6
 8006ab2:	f7ff fe4b 	bl	800674c <_Bfree>
 8006ab6:	4647      	mov	r7, r8
 8006ab8:	106d      	asrs	r5, r5, #1
 8006aba:	d00b      	beq.n	8006ad4 <__pow5mult+0xa0>
 8006abc:	6820      	ldr	r0, [r4, #0]
 8006abe:	b938      	cbnz	r0, 8006ad0 <__pow5mult+0x9c>
 8006ac0:	4622      	mov	r2, r4
 8006ac2:	4621      	mov	r1, r4
 8006ac4:	4630      	mov	r0, r6
 8006ac6:	f7ff ff0d 	bl	80068e4 <__multiply>
 8006aca:	6020      	str	r0, [r4, #0]
 8006acc:	f8c0 9000 	str.w	r9, [r0]
 8006ad0:	4604      	mov	r4, r0
 8006ad2:	e7e4      	b.n	8006a9e <__pow5mult+0x6a>
 8006ad4:	4638      	mov	r0, r7
 8006ad6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ada:	bf00      	nop
 8006adc:	08008308 	.word	0x08008308
 8006ae0:	08008139 	.word	0x08008139
 8006ae4:	080081bc 	.word	0x080081bc

08006ae8 <__lshift>:
 8006ae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006aec:	460c      	mov	r4, r1
 8006aee:	4607      	mov	r7, r0
 8006af0:	4691      	mov	r9, r2
 8006af2:	6923      	ldr	r3, [r4, #16]
 8006af4:	6849      	ldr	r1, [r1, #4]
 8006af6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006afa:	68a3      	ldr	r3, [r4, #8]
 8006afc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006b00:	f108 0601 	add.w	r6, r8, #1
 8006b04:	42b3      	cmp	r3, r6
 8006b06:	db0b      	blt.n	8006b20 <__lshift+0x38>
 8006b08:	4638      	mov	r0, r7
 8006b0a:	f7ff fddf 	bl	80066cc <_Balloc>
 8006b0e:	4605      	mov	r5, r0
 8006b10:	b948      	cbnz	r0, 8006b26 <__lshift+0x3e>
 8006b12:	4602      	mov	r2, r0
 8006b14:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006b18:	4b29      	ldr	r3, [pc, #164]	; (8006bc0 <__lshift+0xd8>)
 8006b1a:	482a      	ldr	r0, [pc, #168]	; (8006bc4 <__lshift+0xdc>)
 8006b1c:	f000 fbb4 	bl	8007288 <__assert_func>
 8006b20:	3101      	adds	r1, #1
 8006b22:	005b      	lsls	r3, r3, #1
 8006b24:	e7ee      	b.n	8006b04 <__lshift+0x1c>
 8006b26:	2300      	movs	r3, #0
 8006b28:	f100 0114 	add.w	r1, r0, #20
 8006b2c:	f100 0210 	add.w	r2, r0, #16
 8006b30:	4618      	mov	r0, r3
 8006b32:	4553      	cmp	r3, sl
 8006b34:	db37      	blt.n	8006ba6 <__lshift+0xbe>
 8006b36:	6920      	ldr	r0, [r4, #16]
 8006b38:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006b3c:	f104 0314 	add.w	r3, r4, #20
 8006b40:	f019 091f 	ands.w	r9, r9, #31
 8006b44:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006b48:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006b4c:	d02f      	beq.n	8006bae <__lshift+0xc6>
 8006b4e:	468a      	mov	sl, r1
 8006b50:	f04f 0c00 	mov.w	ip, #0
 8006b54:	f1c9 0e20 	rsb	lr, r9, #32
 8006b58:	681a      	ldr	r2, [r3, #0]
 8006b5a:	fa02 f209 	lsl.w	r2, r2, r9
 8006b5e:	ea42 020c 	orr.w	r2, r2, ip
 8006b62:	f84a 2b04 	str.w	r2, [sl], #4
 8006b66:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b6a:	4298      	cmp	r0, r3
 8006b6c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006b70:	d8f2      	bhi.n	8006b58 <__lshift+0x70>
 8006b72:	1b03      	subs	r3, r0, r4
 8006b74:	3b15      	subs	r3, #21
 8006b76:	f023 0303 	bic.w	r3, r3, #3
 8006b7a:	3304      	adds	r3, #4
 8006b7c:	f104 0215 	add.w	r2, r4, #21
 8006b80:	4290      	cmp	r0, r2
 8006b82:	bf38      	it	cc
 8006b84:	2304      	movcc	r3, #4
 8006b86:	f841 c003 	str.w	ip, [r1, r3]
 8006b8a:	f1bc 0f00 	cmp.w	ip, #0
 8006b8e:	d001      	beq.n	8006b94 <__lshift+0xac>
 8006b90:	f108 0602 	add.w	r6, r8, #2
 8006b94:	3e01      	subs	r6, #1
 8006b96:	4638      	mov	r0, r7
 8006b98:	4621      	mov	r1, r4
 8006b9a:	612e      	str	r6, [r5, #16]
 8006b9c:	f7ff fdd6 	bl	800674c <_Bfree>
 8006ba0:	4628      	mov	r0, r5
 8006ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ba6:	f842 0f04 	str.w	r0, [r2, #4]!
 8006baa:	3301      	adds	r3, #1
 8006bac:	e7c1      	b.n	8006b32 <__lshift+0x4a>
 8006bae:	3904      	subs	r1, #4
 8006bb0:	f853 2b04 	ldr.w	r2, [r3], #4
 8006bb4:	4298      	cmp	r0, r3
 8006bb6:	f841 2f04 	str.w	r2, [r1, #4]!
 8006bba:	d8f9      	bhi.n	8006bb0 <__lshift+0xc8>
 8006bbc:	e7ea      	b.n	8006b94 <__lshift+0xac>
 8006bbe:	bf00      	nop
 8006bc0:	080081ab 	.word	0x080081ab
 8006bc4:	080081bc 	.word	0x080081bc

08006bc8 <__mcmp>:
 8006bc8:	4603      	mov	r3, r0
 8006bca:	690a      	ldr	r2, [r1, #16]
 8006bcc:	6900      	ldr	r0, [r0, #16]
 8006bce:	b530      	push	{r4, r5, lr}
 8006bd0:	1a80      	subs	r0, r0, r2
 8006bd2:	d10d      	bne.n	8006bf0 <__mcmp+0x28>
 8006bd4:	3314      	adds	r3, #20
 8006bd6:	3114      	adds	r1, #20
 8006bd8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006bdc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006be0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006be4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006be8:	4295      	cmp	r5, r2
 8006bea:	d002      	beq.n	8006bf2 <__mcmp+0x2a>
 8006bec:	d304      	bcc.n	8006bf8 <__mcmp+0x30>
 8006bee:	2001      	movs	r0, #1
 8006bf0:	bd30      	pop	{r4, r5, pc}
 8006bf2:	42a3      	cmp	r3, r4
 8006bf4:	d3f4      	bcc.n	8006be0 <__mcmp+0x18>
 8006bf6:	e7fb      	b.n	8006bf0 <__mcmp+0x28>
 8006bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8006bfc:	e7f8      	b.n	8006bf0 <__mcmp+0x28>
	...

08006c00 <__mdiff>:
 8006c00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c04:	460d      	mov	r5, r1
 8006c06:	4607      	mov	r7, r0
 8006c08:	4611      	mov	r1, r2
 8006c0a:	4628      	mov	r0, r5
 8006c0c:	4614      	mov	r4, r2
 8006c0e:	f7ff ffdb 	bl	8006bc8 <__mcmp>
 8006c12:	1e06      	subs	r6, r0, #0
 8006c14:	d111      	bne.n	8006c3a <__mdiff+0x3a>
 8006c16:	4631      	mov	r1, r6
 8006c18:	4638      	mov	r0, r7
 8006c1a:	f7ff fd57 	bl	80066cc <_Balloc>
 8006c1e:	4602      	mov	r2, r0
 8006c20:	b928      	cbnz	r0, 8006c2e <__mdiff+0x2e>
 8006c22:	f240 2132 	movw	r1, #562	; 0x232
 8006c26:	4b3a      	ldr	r3, [pc, #232]	; (8006d10 <__mdiff+0x110>)
 8006c28:	483a      	ldr	r0, [pc, #232]	; (8006d14 <__mdiff+0x114>)
 8006c2a:	f000 fb2d 	bl	8007288 <__assert_func>
 8006c2e:	2301      	movs	r3, #1
 8006c30:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006c34:	4610      	mov	r0, r2
 8006c36:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c3a:	bfa4      	itt	ge
 8006c3c:	4623      	movge	r3, r4
 8006c3e:	462c      	movge	r4, r5
 8006c40:	4638      	mov	r0, r7
 8006c42:	6861      	ldr	r1, [r4, #4]
 8006c44:	bfa6      	itte	ge
 8006c46:	461d      	movge	r5, r3
 8006c48:	2600      	movge	r6, #0
 8006c4a:	2601      	movlt	r6, #1
 8006c4c:	f7ff fd3e 	bl	80066cc <_Balloc>
 8006c50:	4602      	mov	r2, r0
 8006c52:	b918      	cbnz	r0, 8006c5c <__mdiff+0x5c>
 8006c54:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006c58:	4b2d      	ldr	r3, [pc, #180]	; (8006d10 <__mdiff+0x110>)
 8006c5a:	e7e5      	b.n	8006c28 <__mdiff+0x28>
 8006c5c:	f102 0814 	add.w	r8, r2, #20
 8006c60:	46c2      	mov	sl, r8
 8006c62:	f04f 0c00 	mov.w	ip, #0
 8006c66:	6927      	ldr	r7, [r4, #16]
 8006c68:	60c6      	str	r6, [r0, #12]
 8006c6a:	692e      	ldr	r6, [r5, #16]
 8006c6c:	f104 0014 	add.w	r0, r4, #20
 8006c70:	f105 0914 	add.w	r9, r5, #20
 8006c74:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8006c78:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006c7c:	3410      	adds	r4, #16
 8006c7e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8006c82:	f859 3b04 	ldr.w	r3, [r9], #4
 8006c86:	fa1f f18b 	uxth.w	r1, fp
 8006c8a:	448c      	add	ip, r1
 8006c8c:	b299      	uxth	r1, r3
 8006c8e:	0c1b      	lsrs	r3, r3, #16
 8006c90:	ebac 0101 	sub.w	r1, ip, r1
 8006c94:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006c98:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006c9c:	b289      	uxth	r1, r1
 8006c9e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006ca2:	454e      	cmp	r6, r9
 8006ca4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006ca8:	f84a 3b04 	str.w	r3, [sl], #4
 8006cac:	d8e7      	bhi.n	8006c7e <__mdiff+0x7e>
 8006cae:	1b73      	subs	r3, r6, r5
 8006cb0:	3b15      	subs	r3, #21
 8006cb2:	f023 0303 	bic.w	r3, r3, #3
 8006cb6:	3515      	adds	r5, #21
 8006cb8:	3304      	adds	r3, #4
 8006cba:	42ae      	cmp	r6, r5
 8006cbc:	bf38      	it	cc
 8006cbe:	2304      	movcc	r3, #4
 8006cc0:	4418      	add	r0, r3
 8006cc2:	4443      	add	r3, r8
 8006cc4:	461e      	mov	r6, r3
 8006cc6:	4605      	mov	r5, r0
 8006cc8:	4575      	cmp	r5, lr
 8006cca:	d30e      	bcc.n	8006cea <__mdiff+0xea>
 8006ccc:	f10e 0103 	add.w	r1, lr, #3
 8006cd0:	1a09      	subs	r1, r1, r0
 8006cd2:	f021 0103 	bic.w	r1, r1, #3
 8006cd6:	3803      	subs	r0, #3
 8006cd8:	4586      	cmp	lr, r0
 8006cda:	bf38      	it	cc
 8006cdc:	2100      	movcc	r1, #0
 8006cde:	4419      	add	r1, r3
 8006ce0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006ce4:	b18b      	cbz	r3, 8006d0a <__mdiff+0x10a>
 8006ce6:	6117      	str	r7, [r2, #16]
 8006ce8:	e7a4      	b.n	8006c34 <__mdiff+0x34>
 8006cea:	f855 8b04 	ldr.w	r8, [r5], #4
 8006cee:	fa1f f188 	uxth.w	r1, r8
 8006cf2:	4461      	add	r1, ip
 8006cf4:	140c      	asrs	r4, r1, #16
 8006cf6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006cfa:	b289      	uxth	r1, r1
 8006cfc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006d00:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8006d04:	f846 1b04 	str.w	r1, [r6], #4
 8006d08:	e7de      	b.n	8006cc8 <__mdiff+0xc8>
 8006d0a:	3f01      	subs	r7, #1
 8006d0c:	e7e8      	b.n	8006ce0 <__mdiff+0xe0>
 8006d0e:	bf00      	nop
 8006d10:	080081ab 	.word	0x080081ab
 8006d14:	080081bc 	.word	0x080081bc

08006d18 <__d2b>:
 8006d18:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006d1c:	2101      	movs	r1, #1
 8006d1e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8006d22:	4690      	mov	r8, r2
 8006d24:	461d      	mov	r5, r3
 8006d26:	f7ff fcd1 	bl	80066cc <_Balloc>
 8006d2a:	4604      	mov	r4, r0
 8006d2c:	b930      	cbnz	r0, 8006d3c <__d2b+0x24>
 8006d2e:	4602      	mov	r2, r0
 8006d30:	f240 310a 	movw	r1, #778	; 0x30a
 8006d34:	4b24      	ldr	r3, [pc, #144]	; (8006dc8 <__d2b+0xb0>)
 8006d36:	4825      	ldr	r0, [pc, #148]	; (8006dcc <__d2b+0xb4>)
 8006d38:	f000 faa6 	bl	8007288 <__assert_func>
 8006d3c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8006d40:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8006d44:	bb2d      	cbnz	r5, 8006d92 <__d2b+0x7a>
 8006d46:	9301      	str	r3, [sp, #4]
 8006d48:	f1b8 0300 	subs.w	r3, r8, #0
 8006d4c:	d026      	beq.n	8006d9c <__d2b+0x84>
 8006d4e:	4668      	mov	r0, sp
 8006d50:	9300      	str	r3, [sp, #0]
 8006d52:	f7ff fd83 	bl	800685c <__lo0bits>
 8006d56:	9900      	ldr	r1, [sp, #0]
 8006d58:	b1f0      	cbz	r0, 8006d98 <__d2b+0x80>
 8006d5a:	9a01      	ldr	r2, [sp, #4]
 8006d5c:	f1c0 0320 	rsb	r3, r0, #32
 8006d60:	fa02 f303 	lsl.w	r3, r2, r3
 8006d64:	430b      	orrs	r3, r1
 8006d66:	40c2      	lsrs	r2, r0
 8006d68:	6163      	str	r3, [r4, #20]
 8006d6a:	9201      	str	r2, [sp, #4]
 8006d6c:	9b01      	ldr	r3, [sp, #4]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	bf14      	ite	ne
 8006d72:	2102      	movne	r1, #2
 8006d74:	2101      	moveq	r1, #1
 8006d76:	61a3      	str	r3, [r4, #24]
 8006d78:	6121      	str	r1, [r4, #16]
 8006d7a:	b1c5      	cbz	r5, 8006dae <__d2b+0x96>
 8006d7c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006d80:	4405      	add	r5, r0
 8006d82:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006d86:	603d      	str	r5, [r7, #0]
 8006d88:	6030      	str	r0, [r6, #0]
 8006d8a:	4620      	mov	r0, r4
 8006d8c:	b002      	add	sp, #8
 8006d8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006d96:	e7d6      	b.n	8006d46 <__d2b+0x2e>
 8006d98:	6161      	str	r1, [r4, #20]
 8006d9a:	e7e7      	b.n	8006d6c <__d2b+0x54>
 8006d9c:	a801      	add	r0, sp, #4
 8006d9e:	f7ff fd5d 	bl	800685c <__lo0bits>
 8006da2:	2101      	movs	r1, #1
 8006da4:	9b01      	ldr	r3, [sp, #4]
 8006da6:	6121      	str	r1, [r4, #16]
 8006da8:	6163      	str	r3, [r4, #20]
 8006daa:	3020      	adds	r0, #32
 8006dac:	e7e5      	b.n	8006d7a <__d2b+0x62>
 8006dae:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8006db2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006db6:	6038      	str	r0, [r7, #0]
 8006db8:	6918      	ldr	r0, [r3, #16]
 8006dba:	f7ff fd2f 	bl	800681c <__hi0bits>
 8006dbe:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8006dc2:	6031      	str	r1, [r6, #0]
 8006dc4:	e7e1      	b.n	8006d8a <__d2b+0x72>
 8006dc6:	bf00      	nop
 8006dc8:	080081ab 	.word	0x080081ab
 8006dcc:	080081bc 	.word	0x080081bc

08006dd0 <_calloc_r>:
 8006dd0:	b570      	push	{r4, r5, r6, lr}
 8006dd2:	fba1 5402 	umull	r5, r4, r1, r2
 8006dd6:	b934      	cbnz	r4, 8006de6 <_calloc_r+0x16>
 8006dd8:	4629      	mov	r1, r5
 8006dda:	f000 f875 	bl	8006ec8 <_malloc_r>
 8006dde:	4606      	mov	r6, r0
 8006de0:	b928      	cbnz	r0, 8006dee <_calloc_r+0x1e>
 8006de2:	4630      	mov	r0, r6
 8006de4:	bd70      	pop	{r4, r5, r6, pc}
 8006de6:	220c      	movs	r2, #12
 8006de8:	2600      	movs	r6, #0
 8006dea:	6002      	str	r2, [r0, #0]
 8006dec:	e7f9      	b.n	8006de2 <_calloc_r+0x12>
 8006dee:	462a      	mov	r2, r5
 8006df0:	4621      	mov	r1, r4
 8006df2:	f7fe f941 	bl	8005078 <memset>
 8006df6:	e7f4      	b.n	8006de2 <_calloc_r+0x12>

08006df8 <_free_r>:
 8006df8:	b538      	push	{r3, r4, r5, lr}
 8006dfa:	4605      	mov	r5, r0
 8006dfc:	2900      	cmp	r1, #0
 8006dfe:	d040      	beq.n	8006e82 <_free_r+0x8a>
 8006e00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e04:	1f0c      	subs	r4, r1, #4
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	bfb8      	it	lt
 8006e0a:	18e4      	addlt	r4, r4, r3
 8006e0c:	f000 fa98 	bl	8007340 <__malloc_lock>
 8006e10:	4a1c      	ldr	r2, [pc, #112]	; (8006e84 <_free_r+0x8c>)
 8006e12:	6813      	ldr	r3, [r2, #0]
 8006e14:	b933      	cbnz	r3, 8006e24 <_free_r+0x2c>
 8006e16:	6063      	str	r3, [r4, #4]
 8006e18:	6014      	str	r4, [r2, #0]
 8006e1a:	4628      	mov	r0, r5
 8006e1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e20:	f000 ba94 	b.w	800734c <__malloc_unlock>
 8006e24:	42a3      	cmp	r3, r4
 8006e26:	d908      	bls.n	8006e3a <_free_r+0x42>
 8006e28:	6820      	ldr	r0, [r4, #0]
 8006e2a:	1821      	adds	r1, r4, r0
 8006e2c:	428b      	cmp	r3, r1
 8006e2e:	bf01      	itttt	eq
 8006e30:	6819      	ldreq	r1, [r3, #0]
 8006e32:	685b      	ldreq	r3, [r3, #4]
 8006e34:	1809      	addeq	r1, r1, r0
 8006e36:	6021      	streq	r1, [r4, #0]
 8006e38:	e7ed      	b.n	8006e16 <_free_r+0x1e>
 8006e3a:	461a      	mov	r2, r3
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	b10b      	cbz	r3, 8006e44 <_free_r+0x4c>
 8006e40:	42a3      	cmp	r3, r4
 8006e42:	d9fa      	bls.n	8006e3a <_free_r+0x42>
 8006e44:	6811      	ldr	r1, [r2, #0]
 8006e46:	1850      	adds	r0, r2, r1
 8006e48:	42a0      	cmp	r0, r4
 8006e4a:	d10b      	bne.n	8006e64 <_free_r+0x6c>
 8006e4c:	6820      	ldr	r0, [r4, #0]
 8006e4e:	4401      	add	r1, r0
 8006e50:	1850      	adds	r0, r2, r1
 8006e52:	4283      	cmp	r3, r0
 8006e54:	6011      	str	r1, [r2, #0]
 8006e56:	d1e0      	bne.n	8006e1a <_free_r+0x22>
 8006e58:	6818      	ldr	r0, [r3, #0]
 8006e5a:	685b      	ldr	r3, [r3, #4]
 8006e5c:	4401      	add	r1, r0
 8006e5e:	6011      	str	r1, [r2, #0]
 8006e60:	6053      	str	r3, [r2, #4]
 8006e62:	e7da      	b.n	8006e1a <_free_r+0x22>
 8006e64:	d902      	bls.n	8006e6c <_free_r+0x74>
 8006e66:	230c      	movs	r3, #12
 8006e68:	602b      	str	r3, [r5, #0]
 8006e6a:	e7d6      	b.n	8006e1a <_free_r+0x22>
 8006e6c:	6820      	ldr	r0, [r4, #0]
 8006e6e:	1821      	adds	r1, r4, r0
 8006e70:	428b      	cmp	r3, r1
 8006e72:	bf01      	itttt	eq
 8006e74:	6819      	ldreq	r1, [r3, #0]
 8006e76:	685b      	ldreq	r3, [r3, #4]
 8006e78:	1809      	addeq	r1, r1, r0
 8006e7a:	6021      	streq	r1, [r4, #0]
 8006e7c:	6063      	str	r3, [r4, #4]
 8006e7e:	6054      	str	r4, [r2, #4]
 8006e80:	e7cb      	b.n	8006e1a <_free_r+0x22>
 8006e82:	bd38      	pop	{r3, r4, r5, pc}
 8006e84:	20000378 	.word	0x20000378

08006e88 <sbrk_aligned>:
 8006e88:	b570      	push	{r4, r5, r6, lr}
 8006e8a:	4e0e      	ldr	r6, [pc, #56]	; (8006ec4 <sbrk_aligned+0x3c>)
 8006e8c:	460c      	mov	r4, r1
 8006e8e:	6831      	ldr	r1, [r6, #0]
 8006e90:	4605      	mov	r5, r0
 8006e92:	b911      	cbnz	r1, 8006e9a <sbrk_aligned+0x12>
 8006e94:	f000 f9e8 	bl	8007268 <_sbrk_r>
 8006e98:	6030      	str	r0, [r6, #0]
 8006e9a:	4621      	mov	r1, r4
 8006e9c:	4628      	mov	r0, r5
 8006e9e:	f000 f9e3 	bl	8007268 <_sbrk_r>
 8006ea2:	1c43      	adds	r3, r0, #1
 8006ea4:	d00a      	beq.n	8006ebc <sbrk_aligned+0x34>
 8006ea6:	1cc4      	adds	r4, r0, #3
 8006ea8:	f024 0403 	bic.w	r4, r4, #3
 8006eac:	42a0      	cmp	r0, r4
 8006eae:	d007      	beq.n	8006ec0 <sbrk_aligned+0x38>
 8006eb0:	1a21      	subs	r1, r4, r0
 8006eb2:	4628      	mov	r0, r5
 8006eb4:	f000 f9d8 	bl	8007268 <_sbrk_r>
 8006eb8:	3001      	adds	r0, #1
 8006eba:	d101      	bne.n	8006ec0 <sbrk_aligned+0x38>
 8006ebc:	f04f 34ff 	mov.w	r4, #4294967295
 8006ec0:	4620      	mov	r0, r4
 8006ec2:	bd70      	pop	{r4, r5, r6, pc}
 8006ec4:	2000037c 	.word	0x2000037c

08006ec8 <_malloc_r>:
 8006ec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ecc:	1ccd      	adds	r5, r1, #3
 8006ece:	f025 0503 	bic.w	r5, r5, #3
 8006ed2:	3508      	adds	r5, #8
 8006ed4:	2d0c      	cmp	r5, #12
 8006ed6:	bf38      	it	cc
 8006ed8:	250c      	movcc	r5, #12
 8006eda:	2d00      	cmp	r5, #0
 8006edc:	4607      	mov	r7, r0
 8006ede:	db01      	blt.n	8006ee4 <_malloc_r+0x1c>
 8006ee0:	42a9      	cmp	r1, r5
 8006ee2:	d905      	bls.n	8006ef0 <_malloc_r+0x28>
 8006ee4:	230c      	movs	r3, #12
 8006ee6:	2600      	movs	r6, #0
 8006ee8:	603b      	str	r3, [r7, #0]
 8006eea:	4630      	mov	r0, r6
 8006eec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ef0:	4e2e      	ldr	r6, [pc, #184]	; (8006fac <_malloc_r+0xe4>)
 8006ef2:	f000 fa25 	bl	8007340 <__malloc_lock>
 8006ef6:	6833      	ldr	r3, [r6, #0]
 8006ef8:	461c      	mov	r4, r3
 8006efa:	bb34      	cbnz	r4, 8006f4a <_malloc_r+0x82>
 8006efc:	4629      	mov	r1, r5
 8006efe:	4638      	mov	r0, r7
 8006f00:	f7ff ffc2 	bl	8006e88 <sbrk_aligned>
 8006f04:	1c43      	adds	r3, r0, #1
 8006f06:	4604      	mov	r4, r0
 8006f08:	d14d      	bne.n	8006fa6 <_malloc_r+0xde>
 8006f0a:	6834      	ldr	r4, [r6, #0]
 8006f0c:	4626      	mov	r6, r4
 8006f0e:	2e00      	cmp	r6, #0
 8006f10:	d140      	bne.n	8006f94 <_malloc_r+0xcc>
 8006f12:	6823      	ldr	r3, [r4, #0]
 8006f14:	4631      	mov	r1, r6
 8006f16:	4638      	mov	r0, r7
 8006f18:	eb04 0803 	add.w	r8, r4, r3
 8006f1c:	f000 f9a4 	bl	8007268 <_sbrk_r>
 8006f20:	4580      	cmp	r8, r0
 8006f22:	d13a      	bne.n	8006f9a <_malloc_r+0xd2>
 8006f24:	6821      	ldr	r1, [r4, #0]
 8006f26:	3503      	adds	r5, #3
 8006f28:	1a6d      	subs	r5, r5, r1
 8006f2a:	f025 0503 	bic.w	r5, r5, #3
 8006f2e:	3508      	adds	r5, #8
 8006f30:	2d0c      	cmp	r5, #12
 8006f32:	bf38      	it	cc
 8006f34:	250c      	movcc	r5, #12
 8006f36:	4638      	mov	r0, r7
 8006f38:	4629      	mov	r1, r5
 8006f3a:	f7ff ffa5 	bl	8006e88 <sbrk_aligned>
 8006f3e:	3001      	adds	r0, #1
 8006f40:	d02b      	beq.n	8006f9a <_malloc_r+0xd2>
 8006f42:	6823      	ldr	r3, [r4, #0]
 8006f44:	442b      	add	r3, r5
 8006f46:	6023      	str	r3, [r4, #0]
 8006f48:	e00e      	b.n	8006f68 <_malloc_r+0xa0>
 8006f4a:	6822      	ldr	r2, [r4, #0]
 8006f4c:	1b52      	subs	r2, r2, r5
 8006f4e:	d41e      	bmi.n	8006f8e <_malloc_r+0xc6>
 8006f50:	2a0b      	cmp	r2, #11
 8006f52:	d916      	bls.n	8006f82 <_malloc_r+0xba>
 8006f54:	1961      	adds	r1, r4, r5
 8006f56:	42a3      	cmp	r3, r4
 8006f58:	6025      	str	r5, [r4, #0]
 8006f5a:	bf18      	it	ne
 8006f5c:	6059      	strne	r1, [r3, #4]
 8006f5e:	6863      	ldr	r3, [r4, #4]
 8006f60:	bf08      	it	eq
 8006f62:	6031      	streq	r1, [r6, #0]
 8006f64:	5162      	str	r2, [r4, r5]
 8006f66:	604b      	str	r3, [r1, #4]
 8006f68:	4638      	mov	r0, r7
 8006f6a:	f104 060b 	add.w	r6, r4, #11
 8006f6e:	f000 f9ed 	bl	800734c <__malloc_unlock>
 8006f72:	f026 0607 	bic.w	r6, r6, #7
 8006f76:	1d23      	adds	r3, r4, #4
 8006f78:	1af2      	subs	r2, r6, r3
 8006f7a:	d0b6      	beq.n	8006eea <_malloc_r+0x22>
 8006f7c:	1b9b      	subs	r3, r3, r6
 8006f7e:	50a3      	str	r3, [r4, r2]
 8006f80:	e7b3      	b.n	8006eea <_malloc_r+0x22>
 8006f82:	6862      	ldr	r2, [r4, #4]
 8006f84:	42a3      	cmp	r3, r4
 8006f86:	bf0c      	ite	eq
 8006f88:	6032      	streq	r2, [r6, #0]
 8006f8a:	605a      	strne	r2, [r3, #4]
 8006f8c:	e7ec      	b.n	8006f68 <_malloc_r+0xa0>
 8006f8e:	4623      	mov	r3, r4
 8006f90:	6864      	ldr	r4, [r4, #4]
 8006f92:	e7b2      	b.n	8006efa <_malloc_r+0x32>
 8006f94:	4634      	mov	r4, r6
 8006f96:	6876      	ldr	r6, [r6, #4]
 8006f98:	e7b9      	b.n	8006f0e <_malloc_r+0x46>
 8006f9a:	230c      	movs	r3, #12
 8006f9c:	4638      	mov	r0, r7
 8006f9e:	603b      	str	r3, [r7, #0]
 8006fa0:	f000 f9d4 	bl	800734c <__malloc_unlock>
 8006fa4:	e7a1      	b.n	8006eea <_malloc_r+0x22>
 8006fa6:	6025      	str	r5, [r4, #0]
 8006fa8:	e7de      	b.n	8006f68 <_malloc_r+0xa0>
 8006faa:	bf00      	nop
 8006fac:	20000378 	.word	0x20000378

08006fb0 <__ssputs_r>:
 8006fb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fb4:	688e      	ldr	r6, [r1, #8]
 8006fb6:	4682      	mov	sl, r0
 8006fb8:	429e      	cmp	r6, r3
 8006fba:	460c      	mov	r4, r1
 8006fbc:	4690      	mov	r8, r2
 8006fbe:	461f      	mov	r7, r3
 8006fc0:	d838      	bhi.n	8007034 <__ssputs_r+0x84>
 8006fc2:	898a      	ldrh	r2, [r1, #12]
 8006fc4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006fc8:	d032      	beq.n	8007030 <__ssputs_r+0x80>
 8006fca:	6825      	ldr	r5, [r4, #0]
 8006fcc:	6909      	ldr	r1, [r1, #16]
 8006fce:	3301      	adds	r3, #1
 8006fd0:	eba5 0901 	sub.w	r9, r5, r1
 8006fd4:	6965      	ldr	r5, [r4, #20]
 8006fd6:	444b      	add	r3, r9
 8006fd8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006fdc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006fe0:	106d      	asrs	r5, r5, #1
 8006fe2:	429d      	cmp	r5, r3
 8006fe4:	bf38      	it	cc
 8006fe6:	461d      	movcc	r5, r3
 8006fe8:	0553      	lsls	r3, r2, #21
 8006fea:	d531      	bpl.n	8007050 <__ssputs_r+0xa0>
 8006fec:	4629      	mov	r1, r5
 8006fee:	f7ff ff6b 	bl	8006ec8 <_malloc_r>
 8006ff2:	4606      	mov	r6, r0
 8006ff4:	b950      	cbnz	r0, 800700c <__ssputs_r+0x5c>
 8006ff6:	230c      	movs	r3, #12
 8006ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8006ffc:	f8ca 3000 	str.w	r3, [sl]
 8007000:	89a3      	ldrh	r3, [r4, #12]
 8007002:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007006:	81a3      	strh	r3, [r4, #12]
 8007008:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800700c:	464a      	mov	r2, r9
 800700e:	6921      	ldr	r1, [r4, #16]
 8007010:	f7ff fb4e 	bl	80066b0 <memcpy>
 8007014:	89a3      	ldrh	r3, [r4, #12]
 8007016:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800701a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800701e:	81a3      	strh	r3, [r4, #12]
 8007020:	6126      	str	r6, [r4, #16]
 8007022:	444e      	add	r6, r9
 8007024:	6026      	str	r6, [r4, #0]
 8007026:	463e      	mov	r6, r7
 8007028:	6165      	str	r5, [r4, #20]
 800702a:	eba5 0509 	sub.w	r5, r5, r9
 800702e:	60a5      	str	r5, [r4, #8]
 8007030:	42be      	cmp	r6, r7
 8007032:	d900      	bls.n	8007036 <__ssputs_r+0x86>
 8007034:	463e      	mov	r6, r7
 8007036:	4632      	mov	r2, r6
 8007038:	4641      	mov	r1, r8
 800703a:	6820      	ldr	r0, [r4, #0]
 800703c:	f000 f966 	bl	800730c <memmove>
 8007040:	68a3      	ldr	r3, [r4, #8]
 8007042:	2000      	movs	r0, #0
 8007044:	1b9b      	subs	r3, r3, r6
 8007046:	60a3      	str	r3, [r4, #8]
 8007048:	6823      	ldr	r3, [r4, #0]
 800704a:	4433      	add	r3, r6
 800704c:	6023      	str	r3, [r4, #0]
 800704e:	e7db      	b.n	8007008 <__ssputs_r+0x58>
 8007050:	462a      	mov	r2, r5
 8007052:	f000 f981 	bl	8007358 <_realloc_r>
 8007056:	4606      	mov	r6, r0
 8007058:	2800      	cmp	r0, #0
 800705a:	d1e1      	bne.n	8007020 <__ssputs_r+0x70>
 800705c:	4650      	mov	r0, sl
 800705e:	6921      	ldr	r1, [r4, #16]
 8007060:	f7ff feca 	bl	8006df8 <_free_r>
 8007064:	e7c7      	b.n	8006ff6 <__ssputs_r+0x46>
	...

08007068 <_svfiprintf_r>:
 8007068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800706c:	4698      	mov	r8, r3
 800706e:	898b      	ldrh	r3, [r1, #12]
 8007070:	4607      	mov	r7, r0
 8007072:	061b      	lsls	r3, r3, #24
 8007074:	460d      	mov	r5, r1
 8007076:	4614      	mov	r4, r2
 8007078:	b09d      	sub	sp, #116	; 0x74
 800707a:	d50e      	bpl.n	800709a <_svfiprintf_r+0x32>
 800707c:	690b      	ldr	r3, [r1, #16]
 800707e:	b963      	cbnz	r3, 800709a <_svfiprintf_r+0x32>
 8007080:	2140      	movs	r1, #64	; 0x40
 8007082:	f7ff ff21 	bl	8006ec8 <_malloc_r>
 8007086:	6028      	str	r0, [r5, #0]
 8007088:	6128      	str	r0, [r5, #16]
 800708a:	b920      	cbnz	r0, 8007096 <_svfiprintf_r+0x2e>
 800708c:	230c      	movs	r3, #12
 800708e:	603b      	str	r3, [r7, #0]
 8007090:	f04f 30ff 	mov.w	r0, #4294967295
 8007094:	e0d1      	b.n	800723a <_svfiprintf_r+0x1d2>
 8007096:	2340      	movs	r3, #64	; 0x40
 8007098:	616b      	str	r3, [r5, #20]
 800709a:	2300      	movs	r3, #0
 800709c:	9309      	str	r3, [sp, #36]	; 0x24
 800709e:	2320      	movs	r3, #32
 80070a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80070a4:	2330      	movs	r3, #48	; 0x30
 80070a6:	f04f 0901 	mov.w	r9, #1
 80070aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80070ae:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007254 <_svfiprintf_r+0x1ec>
 80070b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80070b6:	4623      	mov	r3, r4
 80070b8:	469a      	mov	sl, r3
 80070ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80070be:	b10a      	cbz	r2, 80070c4 <_svfiprintf_r+0x5c>
 80070c0:	2a25      	cmp	r2, #37	; 0x25
 80070c2:	d1f9      	bne.n	80070b8 <_svfiprintf_r+0x50>
 80070c4:	ebba 0b04 	subs.w	fp, sl, r4
 80070c8:	d00b      	beq.n	80070e2 <_svfiprintf_r+0x7a>
 80070ca:	465b      	mov	r3, fp
 80070cc:	4622      	mov	r2, r4
 80070ce:	4629      	mov	r1, r5
 80070d0:	4638      	mov	r0, r7
 80070d2:	f7ff ff6d 	bl	8006fb0 <__ssputs_r>
 80070d6:	3001      	adds	r0, #1
 80070d8:	f000 80aa 	beq.w	8007230 <_svfiprintf_r+0x1c8>
 80070dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80070de:	445a      	add	r2, fp
 80070e0:	9209      	str	r2, [sp, #36]	; 0x24
 80070e2:	f89a 3000 	ldrb.w	r3, [sl]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	f000 80a2 	beq.w	8007230 <_svfiprintf_r+0x1c8>
 80070ec:	2300      	movs	r3, #0
 80070ee:	f04f 32ff 	mov.w	r2, #4294967295
 80070f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80070f6:	f10a 0a01 	add.w	sl, sl, #1
 80070fa:	9304      	str	r3, [sp, #16]
 80070fc:	9307      	str	r3, [sp, #28]
 80070fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007102:	931a      	str	r3, [sp, #104]	; 0x68
 8007104:	4654      	mov	r4, sl
 8007106:	2205      	movs	r2, #5
 8007108:	f814 1b01 	ldrb.w	r1, [r4], #1
 800710c:	4851      	ldr	r0, [pc, #324]	; (8007254 <_svfiprintf_r+0x1ec>)
 800710e:	f7ff fac1 	bl	8006694 <memchr>
 8007112:	9a04      	ldr	r2, [sp, #16]
 8007114:	b9d8      	cbnz	r0, 800714e <_svfiprintf_r+0xe6>
 8007116:	06d0      	lsls	r0, r2, #27
 8007118:	bf44      	itt	mi
 800711a:	2320      	movmi	r3, #32
 800711c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007120:	0711      	lsls	r1, r2, #28
 8007122:	bf44      	itt	mi
 8007124:	232b      	movmi	r3, #43	; 0x2b
 8007126:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800712a:	f89a 3000 	ldrb.w	r3, [sl]
 800712e:	2b2a      	cmp	r3, #42	; 0x2a
 8007130:	d015      	beq.n	800715e <_svfiprintf_r+0xf6>
 8007132:	4654      	mov	r4, sl
 8007134:	2000      	movs	r0, #0
 8007136:	f04f 0c0a 	mov.w	ip, #10
 800713a:	9a07      	ldr	r2, [sp, #28]
 800713c:	4621      	mov	r1, r4
 800713e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007142:	3b30      	subs	r3, #48	; 0x30
 8007144:	2b09      	cmp	r3, #9
 8007146:	d94e      	bls.n	80071e6 <_svfiprintf_r+0x17e>
 8007148:	b1b0      	cbz	r0, 8007178 <_svfiprintf_r+0x110>
 800714a:	9207      	str	r2, [sp, #28]
 800714c:	e014      	b.n	8007178 <_svfiprintf_r+0x110>
 800714e:	eba0 0308 	sub.w	r3, r0, r8
 8007152:	fa09 f303 	lsl.w	r3, r9, r3
 8007156:	4313      	orrs	r3, r2
 8007158:	46a2      	mov	sl, r4
 800715a:	9304      	str	r3, [sp, #16]
 800715c:	e7d2      	b.n	8007104 <_svfiprintf_r+0x9c>
 800715e:	9b03      	ldr	r3, [sp, #12]
 8007160:	1d19      	adds	r1, r3, #4
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	9103      	str	r1, [sp, #12]
 8007166:	2b00      	cmp	r3, #0
 8007168:	bfbb      	ittet	lt
 800716a:	425b      	neglt	r3, r3
 800716c:	f042 0202 	orrlt.w	r2, r2, #2
 8007170:	9307      	strge	r3, [sp, #28]
 8007172:	9307      	strlt	r3, [sp, #28]
 8007174:	bfb8      	it	lt
 8007176:	9204      	strlt	r2, [sp, #16]
 8007178:	7823      	ldrb	r3, [r4, #0]
 800717a:	2b2e      	cmp	r3, #46	; 0x2e
 800717c:	d10c      	bne.n	8007198 <_svfiprintf_r+0x130>
 800717e:	7863      	ldrb	r3, [r4, #1]
 8007180:	2b2a      	cmp	r3, #42	; 0x2a
 8007182:	d135      	bne.n	80071f0 <_svfiprintf_r+0x188>
 8007184:	9b03      	ldr	r3, [sp, #12]
 8007186:	3402      	adds	r4, #2
 8007188:	1d1a      	adds	r2, r3, #4
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	9203      	str	r2, [sp, #12]
 800718e:	2b00      	cmp	r3, #0
 8007190:	bfb8      	it	lt
 8007192:	f04f 33ff 	movlt.w	r3, #4294967295
 8007196:	9305      	str	r3, [sp, #20]
 8007198:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8007258 <_svfiprintf_r+0x1f0>
 800719c:	2203      	movs	r2, #3
 800719e:	4650      	mov	r0, sl
 80071a0:	7821      	ldrb	r1, [r4, #0]
 80071a2:	f7ff fa77 	bl	8006694 <memchr>
 80071a6:	b140      	cbz	r0, 80071ba <_svfiprintf_r+0x152>
 80071a8:	2340      	movs	r3, #64	; 0x40
 80071aa:	eba0 000a 	sub.w	r0, r0, sl
 80071ae:	fa03 f000 	lsl.w	r0, r3, r0
 80071b2:	9b04      	ldr	r3, [sp, #16]
 80071b4:	3401      	adds	r4, #1
 80071b6:	4303      	orrs	r3, r0
 80071b8:	9304      	str	r3, [sp, #16]
 80071ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071be:	2206      	movs	r2, #6
 80071c0:	4826      	ldr	r0, [pc, #152]	; (800725c <_svfiprintf_r+0x1f4>)
 80071c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80071c6:	f7ff fa65 	bl	8006694 <memchr>
 80071ca:	2800      	cmp	r0, #0
 80071cc:	d038      	beq.n	8007240 <_svfiprintf_r+0x1d8>
 80071ce:	4b24      	ldr	r3, [pc, #144]	; (8007260 <_svfiprintf_r+0x1f8>)
 80071d0:	bb1b      	cbnz	r3, 800721a <_svfiprintf_r+0x1b2>
 80071d2:	9b03      	ldr	r3, [sp, #12]
 80071d4:	3307      	adds	r3, #7
 80071d6:	f023 0307 	bic.w	r3, r3, #7
 80071da:	3308      	adds	r3, #8
 80071dc:	9303      	str	r3, [sp, #12]
 80071de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071e0:	4433      	add	r3, r6
 80071e2:	9309      	str	r3, [sp, #36]	; 0x24
 80071e4:	e767      	b.n	80070b6 <_svfiprintf_r+0x4e>
 80071e6:	460c      	mov	r4, r1
 80071e8:	2001      	movs	r0, #1
 80071ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80071ee:	e7a5      	b.n	800713c <_svfiprintf_r+0xd4>
 80071f0:	2300      	movs	r3, #0
 80071f2:	f04f 0c0a 	mov.w	ip, #10
 80071f6:	4619      	mov	r1, r3
 80071f8:	3401      	adds	r4, #1
 80071fa:	9305      	str	r3, [sp, #20]
 80071fc:	4620      	mov	r0, r4
 80071fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007202:	3a30      	subs	r2, #48	; 0x30
 8007204:	2a09      	cmp	r2, #9
 8007206:	d903      	bls.n	8007210 <_svfiprintf_r+0x1a8>
 8007208:	2b00      	cmp	r3, #0
 800720a:	d0c5      	beq.n	8007198 <_svfiprintf_r+0x130>
 800720c:	9105      	str	r1, [sp, #20]
 800720e:	e7c3      	b.n	8007198 <_svfiprintf_r+0x130>
 8007210:	4604      	mov	r4, r0
 8007212:	2301      	movs	r3, #1
 8007214:	fb0c 2101 	mla	r1, ip, r1, r2
 8007218:	e7f0      	b.n	80071fc <_svfiprintf_r+0x194>
 800721a:	ab03      	add	r3, sp, #12
 800721c:	9300      	str	r3, [sp, #0]
 800721e:	462a      	mov	r2, r5
 8007220:	4638      	mov	r0, r7
 8007222:	4b10      	ldr	r3, [pc, #64]	; (8007264 <_svfiprintf_r+0x1fc>)
 8007224:	a904      	add	r1, sp, #16
 8007226:	f7fd ffcd 	bl	80051c4 <_printf_float>
 800722a:	1c42      	adds	r2, r0, #1
 800722c:	4606      	mov	r6, r0
 800722e:	d1d6      	bne.n	80071de <_svfiprintf_r+0x176>
 8007230:	89ab      	ldrh	r3, [r5, #12]
 8007232:	065b      	lsls	r3, r3, #25
 8007234:	f53f af2c 	bmi.w	8007090 <_svfiprintf_r+0x28>
 8007238:	9809      	ldr	r0, [sp, #36]	; 0x24
 800723a:	b01d      	add	sp, #116	; 0x74
 800723c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007240:	ab03      	add	r3, sp, #12
 8007242:	9300      	str	r3, [sp, #0]
 8007244:	462a      	mov	r2, r5
 8007246:	4638      	mov	r0, r7
 8007248:	4b06      	ldr	r3, [pc, #24]	; (8007264 <_svfiprintf_r+0x1fc>)
 800724a:	a904      	add	r1, sp, #16
 800724c:	f7fe fa56 	bl	80056fc <_printf_i>
 8007250:	e7eb      	b.n	800722a <_svfiprintf_r+0x1c2>
 8007252:	bf00      	nop
 8007254:	08008314 	.word	0x08008314
 8007258:	0800831a 	.word	0x0800831a
 800725c:	0800831e 	.word	0x0800831e
 8007260:	080051c5 	.word	0x080051c5
 8007264:	08006fb1 	.word	0x08006fb1

08007268 <_sbrk_r>:
 8007268:	b538      	push	{r3, r4, r5, lr}
 800726a:	2300      	movs	r3, #0
 800726c:	4d05      	ldr	r5, [pc, #20]	; (8007284 <_sbrk_r+0x1c>)
 800726e:	4604      	mov	r4, r0
 8007270:	4608      	mov	r0, r1
 8007272:	602b      	str	r3, [r5, #0]
 8007274:	f7fa fc80 	bl	8001b78 <_sbrk>
 8007278:	1c43      	adds	r3, r0, #1
 800727a:	d102      	bne.n	8007282 <_sbrk_r+0x1a>
 800727c:	682b      	ldr	r3, [r5, #0]
 800727e:	b103      	cbz	r3, 8007282 <_sbrk_r+0x1a>
 8007280:	6023      	str	r3, [r4, #0]
 8007282:	bd38      	pop	{r3, r4, r5, pc}
 8007284:	20000380 	.word	0x20000380

08007288 <__assert_func>:
 8007288:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800728a:	4614      	mov	r4, r2
 800728c:	461a      	mov	r2, r3
 800728e:	4b09      	ldr	r3, [pc, #36]	; (80072b4 <__assert_func+0x2c>)
 8007290:	4605      	mov	r5, r0
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	68d8      	ldr	r0, [r3, #12]
 8007296:	b14c      	cbz	r4, 80072ac <__assert_func+0x24>
 8007298:	4b07      	ldr	r3, [pc, #28]	; (80072b8 <__assert_func+0x30>)
 800729a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800729e:	9100      	str	r1, [sp, #0]
 80072a0:	462b      	mov	r3, r5
 80072a2:	4906      	ldr	r1, [pc, #24]	; (80072bc <__assert_func+0x34>)
 80072a4:	f000 f80e 	bl	80072c4 <fiprintf>
 80072a8:	f000 faaa 	bl	8007800 <abort>
 80072ac:	4b04      	ldr	r3, [pc, #16]	; (80072c0 <__assert_func+0x38>)
 80072ae:	461c      	mov	r4, r3
 80072b0:	e7f3      	b.n	800729a <__assert_func+0x12>
 80072b2:	bf00      	nop
 80072b4:	2000000c 	.word	0x2000000c
 80072b8:	08008325 	.word	0x08008325
 80072bc:	08008332 	.word	0x08008332
 80072c0:	08008360 	.word	0x08008360

080072c4 <fiprintf>:
 80072c4:	b40e      	push	{r1, r2, r3}
 80072c6:	b503      	push	{r0, r1, lr}
 80072c8:	4601      	mov	r1, r0
 80072ca:	ab03      	add	r3, sp, #12
 80072cc:	4805      	ldr	r0, [pc, #20]	; (80072e4 <fiprintf+0x20>)
 80072ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80072d2:	6800      	ldr	r0, [r0, #0]
 80072d4:	9301      	str	r3, [sp, #4]
 80072d6:	f000 f895 	bl	8007404 <_vfiprintf_r>
 80072da:	b002      	add	sp, #8
 80072dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80072e0:	b003      	add	sp, #12
 80072e2:	4770      	bx	lr
 80072e4:	2000000c 	.word	0x2000000c

080072e8 <__ascii_mbtowc>:
 80072e8:	b082      	sub	sp, #8
 80072ea:	b901      	cbnz	r1, 80072ee <__ascii_mbtowc+0x6>
 80072ec:	a901      	add	r1, sp, #4
 80072ee:	b142      	cbz	r2, 8007302 <__ascii_mbtowc+0x1a>
 80072f0:	b14b      	cbz	r3, 8007306 <__ascii_mbtowc+0x1e>
 80072f2:	7813      	ldrb	r3, [r2, #0]
 80072f4:	600b      	str	r3, [r1, #0]
 80072f6:	7812      	ldrb	r2, [r2, #0]
 80072f8:	1e10      	subs	r0, r2, #0
 80072fa:	bf18      	it	ne
 80072fc:	2001      	movne	r0, #1
 80072fe:	b002      	add	sp, #8
 8007300:	4770      	bx	lr
 8007302:	4610      	mov	r0, r2
 8007304:	e7fb      	b.n	80072fe <__ascii_mbtowc+0x16>
 8007306:	f06f 0001 	mvn.w	r0, #1
 800730a:	e7f8      	b.n	80072fe <__ascii_mbtowc+0x16>

0800730c <memmove>:
 800730c:	4288      	cmp	r0, r1
 800730e:	b510      	push	{r4, lr}
 8007310:	eb01 0402 	add.w	r4, r1, r2
 8007314:	d902      	bls.n	800731c <memmove+0x10>
 8007316:	4284      	cmp	r4, r0
 8007318:	4623      	mov	r3, r4
 800731a:	d807      	bhi.n	800732c <memmove+0x20>
 800731c:	1e43      	subs	r3, r0, #1
 800731e:	42a1      	cmp	r1, r4
 8007320:	d008      	beq.n	8007334 <memmove+0x28>
 8007322:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007326:	f803 2f01 	strb.w	r2, [r3, #1]!
 800732a:	e7f8      	b.n	800731e <memmove+0x12>
 800732c:	4601      	mov	r1, r0
 800732e:	4402      	add	r2, r0
 8007330:	428a      	cmp	r2, r1
 8007332:	d100      	bne.n	8007336 <memmove+0x2a>
 8007334:	bd10      	pop	{r4, pc}
 8007336:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800733a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800733e:	e7f7      	b.n	8007330 <memmove+0x24>

08007340 <__malloc_lock>:
 8007340:	4801      	ldr	r0, [pc, #4]	; (8007348 <__malloc_lock+0x8>)
 8007342:	f000 bc19 	b.w	8007b78 <__retarget_lock_acquire_recursive>
 8007346:	bf00      	nop
 8007348:	20000384 	.word	0x20000384

0800734c <__malloc_unlock>:
 800734c:	4801      	ldr	r0, [pc, #4]	; (8007354 <__malloc_unlock+0x8>)
 800734e:	f000 bc14 	b.w	8007b7a <__retarget_lock_release_recursive>
 8007352:	bf00      	nop
 8007354:	20000384 	.word	0x20000384

08007358 <_realloc_r>:
 8007358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800735c:	4680      	mov	r8, r0
 800735e:	4614      	mov	r4, r2
 8007360:	460e      	mov	r6, r1
 8007362:	b921      	cbnz	r1, 800736e <_realloc_r+0x16>
 8007364:	4611      	mov	r1, r2
 8007366:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800736a:	f7ff bdad 	b.w	8006ec8 <_malloc_r>
 800736e:	b92a      	cbnz	r2, 800737c <_realloc_r+0x24>
 8007370:	f7ff fd42 	bl	8006df8 <_free_r>
 8007374:	4625      	mov	r5, r4
 8007376:	4628      	mov	r0, r5
 8007378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800737c:	f000 fc64 	bl	8007c48 <_malloc_usable_size_r>
 8007380:	4284      	cmp	r4, r0
 8007382:	4607      	mov	r7, r0
 8007384:	d802      	bhi.n	800738c <_realloc_r+0x34>
 8007386:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800738a:	d812      	bhi.n	80073b2 <_realloc_r+0x5a>
 800738c:	4621      	mov	r1, r4
 800738e:	4640      	mov	r0, r8
 8007390:	f7ff fd9a 	bl	8006ec8 <_malloc_r>
 8007394:	4605      	mov	r5, r0
 8007396:	2800      	cmp	r0, #0
 8007398:	d0ed      	beq.n	8007376 <_realloc_r+0x1e>
 800739a:	42bc      	cmp	r4, r7
 800739c:	4622      	mov	r2, r4
 800739e:	4631      	mov	r1, r6
 80073a0:	bf28      	it	cs
 80073a2:	463a      	movcs	r2, r7
 80073a4:	f7ff f984 	bl	80066b0 <memcpy>
 80073a8:	4631      	mov	r1, r6
 80073aa:	4640      	mov	r0, r8
 80073ac:	f7ff fd24 	bl	8006df8 <_free_r>
 80073b0:	e7e1      	b.n	8007376 <_realloc_r+0x1e>
 80073b2:	4635      	mov	r5, r6
 80073b4:	e7df      	b.n	8007376 <_realloc_r+0x1e>

080073b6 <__sfputc_r>:
 80073b6:	6893      	ldr	r3, [r2, #8]
 80073b8:	b410      	push	{r4}
 80073ba:	3b01      	subs	r3, #1
 80073bc:	2b00      	cmp	r3, #0
 80073be:	6093      	str	r3, [r2, #8]
 80073c0:	da07      	bge.n	80073d2 <__sfputc_r+0x1c>
 80073c2:	6994      	ldr	r4, [r2, #24]
 80073c4:	42a3      	cmp	r3, r4
 80073c6:	db01      	blt.n	80073cc <__sfputc_r+0x16>
 80073c8:	290a      	cmp	r1, #10
 80073ca:	d102      	bne.n	80073d2 <__sfputc_r+0x1c>
 80073cc:	bc10      	pop	{r4}
 80073ce:	f000 b949 	b.w	8007664 <__swbuf_r>
 80073d2:	6813      	ldr	r3, [r2, #0]
 80073d4:	1c58      	adds	r0, r3, #1
 80073d6:	6010      	str	r0, [r2, #0]
 80073d8:	7019      	strb	r1, [r3, #0]
 80073da:	4608      	mov	r0, r1
 80073dc:	bc10      	pop	{r4}
 80073de:	4770      	bx	lr

080073e0 <__sfputs_r>:
 80073e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073e2:	4606      	mov	r6, r0
 80073e4:	460f      	mov	r7, r1
 80073e6:	4614      	mov	r4, r2
 80073e8:	18d5      	adds	r5, r2, r3
 80073ea:	42ac      	cmp	r4, r5
 80073ec:	d101      	bne.n	80073f2 <__sfputs_r+0x12>
 80073ee:	2000      	movs	r0, #0
 80073f0:	e007      	b.n	8007402 <__sfputs_r+0x22>
 80073f2:	463a      	mov	r2, r7
 80073f4:	4630      	mov	r0, r6
 80073f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073fa:	f7ff ffdc 	bl	80073b6 <__sfputc_r>
 80073fe:	1c43      	adds	r3, r0, #1
 8007400:	d1f3      	bne.n	80073ea <__sfputs_r+0xa>
 8007402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007404 <_vfiprintf_r>:
 8007404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007408:	460d      	mov	r5, r1
 800740a:	4614      	mov	r4, r2
 800740c:	4698      	mov	r8, r3
 800740e:	4606      	mov	r6, r0
 8007410:	b09d      	sub	sp, #116	; 0x74
 8007412:	b118      	cbz	r0, 800741c <_vfiprintf_r+0x18>
 8007414:	6983      	ldr	r3, [r0, #24]
 8007416:	b90b      	cbnz	r3, 800741c <_vfiprintf_r+0x18>
 8007418:	f000 fb10 	bl	8007a3c <__sinit>
 800741c:	4b89      	ldr	r3, [pc, #548]	; (8007644 <_vfiprintf_r+0x240>)
 800741e:	429d      	cmp	r5, r3
 8007420:	d11b      	bne.n	800745a <_vfiprintf_r+0x56>
 8007422:	6875      	ldr	r5, [r6, #4]
 8007424:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007426:	07d9      	lsls	r1, r3, #31
 8007428:	d405      	bmi.n	8007436 <_vfiprintf_r+0x32>
 800742a:	89ab      	ldrh	r3, [r5, #12]
 800742c:	059a      	lsls	r2, r3, #22
 800742e:	d402      	bmi.n	8007436 <_vfiprintf_r+0x32>
 8007430:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007432:	f000 fba1 	bl	8007b78 <__retarget_lock_acquire_recursive>
 8007436:	89ab      	ldrh	r3, [r5, #12]
 8007438:	071b      	lsls	r3, r3, #28
 800743a:	d501      	bpl.n	8007440 <_vfiprintf_r+0x3c>
 800743c:	692b      	ldr	r3, [r5, #16]
 800743e:	b9eb      	cbnz	r3, 800747c <_vfiprintf_r+0x78>
 8007440:	4629      	mov	r1, r5
 8007442:	4630      	mov	r0, r6
 8007444:	f000 f96e 	bl	8007724 <__swsetup_r>
 8007448:	b1c0      	cbz	r0, 800747c <_vfiprintf_r+0x78>
 800744a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800744c:	07dc      	lsls	r4, r3, #31
 800744e:	d50e      	bpl.n	800746e <_vfiprintf_r+0x6a>
 8007450:	f04f 30ff 	mov.w	r0, #4294967295
 8007454:	b01d      	add	sp, #116	; 0x74
 8007456:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800745a:	4b7b      	ldr	r3, [pc, #492]	; (8007648 <_vfiprintf_r+0x244>)
 800745c:	429d      	cmp	r5, r3
 800745e:	d101      	bne.n	8007464 <_vfiprintf_r+0x60>
 8007460:	68b5      	ldr	r5, [r6, #8]
 8007462:	e7df      	b.n	8007424 <_vfiprintf_r+0x20>
 8007464:	4b79      	ldr	r3, [pc, #484]	; (800764c <_vfiprintf_r+0x248>)
 8007466:	429d      	cmp	r5, r3
 8007468:	bf08      	it	eq
 800746a:	68f5      	ldreq	r5, [r6, #12]
 800746c:	e7da      	b.n	8007424 <_vfiprintf_r+0x20>
 800746e:	89ab      	ldrh	r3, [r5, #12]
 8007470:	0598      	lsls	r0, r3, #22
 8007472:	d4ed      	bmi.n	8007450 <_vfiprintf_r+0x4c>
 8007474:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007476:	f000 fb80 	bl	8007b7a <__retarget_lock_release_recursive>
 800747a:	e7e9      	b.n	8007450 <_vfiprintf_r+0x4c>
 800747c:	2300      	movs	r3, #0
 800747e:	9309      	str	r3, [sp, #36]	; 0x24
 8007480:	2320      	movs	r3, #32
 8007482:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007486:	2330      	movs	r3, #48	; 0x30
 8007488:	f04f 0901 	mov.w	r9, #1
 800748c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007490:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8007650 <_vfiprintf_r+0x24c>
 8007494:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007498:	4623      	mov	r3, r4
 800749a:	469a      	mov	sl, r3
 800749c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80074a0:	b10a      	cbz	r2, 80074a6 <_vfiprintf_r+0xa2>
 80074a2:	2a25      	cmp	r2, #37	; 0x25
 80074a4:	d1f9      	bne.n	800749a <_vfiprintf_r+0x96>
 80074a6:	ebba 0b04 	subs.w	fp, sl, r4
 80074aa:	d00b      	beq.n	80074c4 <_vfiprintf_r+0xc0>
 80074ac:	465b      	mov	r3, fp
 80074ae:	4622      	mov	r2, r4
 80074b0:	4629      	mov	r1, r5
 80074b2:	4630      	mov	r0, r6
 80074b4:	f7ff ff94 	bl	80073e0 <__sfputs_r>
 80074b8:	3001      	adds	r0, #1
 80074ba:	f000 80aa 	beq.w	8007612 <_vfiprintf_r+0x20e>
 80074be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80074c0:	445a      	add	r2, fp
 80074c2:	9209      	str	r2, [sp, #36]	; 0x24
 80074c4:	f89a 3000 	ldrb.w	r3, [sl]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	f000 80a2 	beq.w	8007612 <_vfiprintf_r+0x20e>
 80074ce:	2300      	movs	r3, #0
 80074d0:	f04f 32ff 	mov.w	r2, #4294967295
 80074d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80074d8:	f10a 0a01 	add.w	sl, sl, #1
 80074dc:	9304      	str	r3, [sp, #16]
 80074de:	9307      	str	r3, [sp, #28]
 80074e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80074e4:	931a      	str	r3, [sp, #104]	; 0x68
 80074e6:	4654      	mov	r4, sl
 80074e8:	2205      	movs	r2, #5
 80074ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074ee:	4858      	ldr	r0, [pc, #352]	; (8007650 <_vfiprintf_r+0x24c>)
 80074f0:	f7ff f8d0 	bl	8006694 <memchr>
 80074f4:	9a04      	ldr	r2, [sp, #16]
 80074f6:	b9d8      	cbnz	r0, 8007530 <_vfiprintf_r+0x12c>
 80074f8:	06d1      	lsls	r1, r2, #27
 80074fa:	bf44      	itt	mi
 80074fc:	2320      	movmi	r3, #32
 80074fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007502:	0713      	lsls	r3, r2, #28
 8007504:	bf44      	itt	mi
 8007506:	232b      	movmi	r3, #43	; 0x2b
 8007508:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800750c:	f89a 3000 	ldrb.w	r3, [sl]
 8007510:	2b2a      	cmp	r3, #42	; 0x2a
 8007512:	d015      	beq.n	8007540 <_vfiprintf_r+0x13c>
 8007514:	4654      	mov	r4, sl
 8007516:	2000      	movs	r0, #0
 8007518:	f04f 0c0a 	mov.w	ip, #10
 800751c:	9a07      	ldr	r2, [sp, #28]
 800751e:	4621      	mov	r1, r4
 8007520:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007524:	3b30      	subs	r3, #48	; 0x30
 8007526:	2b09      	cmp	r3, #9
 8007528:	d94e      	bls.n	80075c8 <_vfiprintf_r+0x1c4>
 800752a:	b1b0      	cbz	r0, 800755a <_vfiprintf_r+0x156>
 800752c:	9207      	str	r2, [sp, #28]
 800752e:	e014      	b.n	800755a <_vfiprintf_r+0x156>
 8007530:	eba0 0308 	sub.w	r3, r0, r8
 8007534:	fa09 f303 	lsl.w	r3, r9, r3
 8007538:	4313      	orrs	r3, r2
 800753a:	46a2      	mov	sl, r4
 800753c:	9304      	str	r3, [sp, #16]
 800753e:	e7d2      	b.n	80074e6 <_vfiprintf_r+0xe2>
 8007540:	9b03      	ldr	r3, [sp, #12]
 8007542:	1d19      	adds	r1, r3, #4
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	9103      	str	r1, [sp, #12]
 8007548:	2b00      	cmp	r3, #0
 800754a:	bfbb      	ittet	lt
 800754c:	425b      	neglt	r3, r3
 800754e:	f042 0202 	orrlt.w	r2, r2, #2
 8007552:	9307      	strge	r3, [sp, #28]
 8007554:	9307      	strlt	r3, [sp, #28]
 8007556:	bfb8      	it	lt
 8007558:	9204      	strlt	r2, [sp, #16]
 800755a:	7823      	ldrb	r3, [r4, #0]
 800755c:	2b2e      	cmp	r3, #46	; 0x2e
 800755e:	d10c      	bne.n	800757a <_vfiprintf_r+0x176>
 8007560:	7863      	ldrb	r3, [r4, #1]
 8007562:	2b2a      	cmp	r3, #42	; 0x2a
 8007564:	d135      	bne.n	80075d2 <_vfiprintf_r+0x1ce>
 8007566:	9b03      	ldr	r3, [sp, #12]
 8007568:	3402      	adds	r4, #2
 800756a:	1d1a      	adds	r2, r3, #4
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	9203      	str	r2, [sp, #12]
 8007570:	2b00      	cmp	r3, #0
 8007572:	bfb8      	it	lt
 8007574:	f04f 33ff 	movlt.w	r3, #4294967295
 8007578:	9305      	str	r3, [sp, #20]
 800757a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8007654 <_vfiprintf_r+0x250>
 800757e:	2203      	movs	r2, #3
 8007580:	4650      	mov	r0, sl
 8007582:	7821      	ldrb	r1, [r4, #0]
 8007584:	f7ff f886 	bl	8006694 <memchr>
 8007588:	b140      	cbz	r0, 800759c <_vfiprintf_r+0x198>
 800758a:	2340      	movs	r3, #64	; 0x40
 800758c:	eba0 000a 	sub.w	r0, r0, sl
 8007590:	fa03 f000 	lsl.w	r0, r3, r0
 8007594:	9b04      	ldr	r3, [sp, #16]
 8007596:	3401      	adds	r4, #1
 8007598:	4303      	orrs	r3, r0
 800759a:	9304      	str	r3, [sp, #16]
 800759c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075a0:	2206      	movs	r2, #6
 80075a2:	482d      	ldr	r0, [pc, #180]	; (8007658 <_vfiprintf_r+0x254>)
 80075a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80075a8:	f7ff f874 	bl	8006694 <memchr>
 80075ac:	2800      	cmp	r0, #0
 80075ae:	d03f      	beq.n	8007630 <_vfiprintf_r+0x22c>
 80075b0:	4b2a      	ldr	r3, [pc, #168]	; (800765c <_vfiprintf_r+0x258>)
 80075b2:	bb1b      	cbnz	r3, 80075fc <_vfiprintf_r+0x1f8>
 80075b4:	9b03      	ldr	r3, [sp, #12]
 80075b6:	3307      	adds	r3, #7
 80075b8:	f023 0307 	bic.w	r3, r3, #7
 80075bc:	3308      	adds	r3, #8
 80075be:	9303      	str	r3, [sp, #12]
 80075c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075c2:	443b      	add	r3, r7
 80075c4:	9309      	str	r3, [sp, #36]	; 0x24
 80075c6:	e767      	b.n	8007498 <_vfiprintf_r+0x94>
 80075c8:	460c      	mov	r4, r1
 80075ca:	2001      	movs	r0, #1
 80075cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80075d0:	e7a5      	b.n	800751e <_vfiprintf_r+0x11a>
 80075d2:	2300      	movs	r3, #0
 80075d4:	f04f 0c0a 	mov.w	ip, #10
 80075d8:	4619      	mov	r1, r3
 80075da:	3401      	adds	r4, #1
 80075dc:	9305      	str	r3, [sp, #20]
 80075de:	4620      	mov	r0, r4
 80075e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80075e4:	3a30      	subs	r2, #48	; 0x30
 80075e6:	2a09      	cmp	r2, #9
 80075e8:	d903      	bls.n	80075f2 <_vfiprintf_r+0x1ee>
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d0c5      	beq.n	800757a <_vfiprintf_r+0x176>
 80075ee:	9105      	str	r1, [sp, #20]
 80075f0:	e7c3      	b.n	800757a <_vfiprintf_r+0x176>
 80075f2:	4604      	mov	r4, r0
 80075f4:	2301      	movs	r3, #1
 80075f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80075fa:	e7f0      	b.n	80075de <_vfiprintf_r+0x1da>
 80075fc:	ab03      	add	r3, sp, #12
 80075fe:	9300      	str	r3, [sp, #0]
 8007600:	462a      	mov	r2, r5
 8007602:	4630      	mov	r0, r6
 8007604:	4b16      	ldr	r3, [pc, #88]	; (8007660 <_vfiprintf_r+0x25c>)
 8007606:	a904      	add	r1, sp, #16
 8007608:	f7fd fddc 	bl	80051c4 <_printf_float>
 800760c:	4607      	mov	r7, r0
 800760e:	1c78      	adds	r0, r7, #1
 8007610:	d1d6      	bne.n	80075c0 <_vfiprintf_r+0x1bc>
 8007612:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007614:	07d9      	lsls	r1, r3, #31
 8007616:	d405      	bmi.n	8007624 <_vfiprintf_r+0x220>
 8007618:	89ab      	ldrh	r3, [r5, #12]
 800761a:	059a      	lsls	r2, r3, #22
 800761c:	d402      	bmi.n	8007624 <_vfiprintf_r+0x220>
 800761e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007620:	f000 faab 	bl	8007b7a <__retarget_lock_release_recursive>
 8007624:	89ab      	ldrh	r3, [r5, #12]
 8007626:	065b      	lsls	r3, r3, #25
 8007628:	f53f af12 	bmi.w	8007450 <_vfiprintf_r+0x4c>
 800762c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800762e:	e711      	b.n	8007454 <_vfiprintf_r+0x50>
 8007630:	ab03      	add	r3, sp, #12
 8007632:	9300      	str	r3, [sp, #0]
 8007634:	462a      	mov	r2, r5
 8007636:	4630      	mov	r0, r6
 8007638:	4b09      	ldr	r3, [pc, #36]	; (8007660 <_vfiprintf_r+0x25c>)
 800763a:	a904      	add	r1, sp, #16
 800763c:	f7fe f85e 	bl	80056fc <_printf_i>
 8007640:	e7e4      	b.n	800760c <_vfiprintf_r+0x208>
 8007642:	bf00      	nop
 8007644:	0800848c 	.word	0x0800848c
 8007648:	080084ac 	.word	0x080084ac
 800764c:	0800846c 	.word	0x0800846c
 8007650:	08008314 	.word	0x08008314
 8007654:	0800831a 	.word	0x0800831a
 8007658:	0800831e 	.word	0x0800831e
 800765c:	080051c5 	.word	0x080051c5
 8007660:	080073e1 	.word	0x080073e1

08007664 <__swbuf_r>:
 8007664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007666:	460e      	mov	r6, r1
 8007668:	4614      	mov	r4, r2
 800766a:	4605      	mov	r5, r0
 800766c:	b118      	cbz	r0, 8007676 <__swbuf_r+0x12>
 800766e:	6983      	ldr	r3, [r0, #24]
 8007670:	b90b      	cbnz	r3, 8007676 <__swbuf_r+0x12>
 8007672:	f000 f9e3 	bl	8007a3c <__sinit>
 8007676:	4b21      	ldr	r3, [pc, #132]	; (80076fc <__swbuf_r+0x98>)
 8007678:	429c      	cmp	r4, r3
 800767a:	d12b      	bne.n	80076d4 <__swbuf_r+0x70>
 800767c:	686c      	ldr	r4, [r5, #4]
 800767e:	69a3      	ldr	r3, [r4, #24]
 8007680:	60a3      	str	r3, [r4, #8]
 8007682:	89a3      	ldrh	r3, [r4, #12]
 8007684:	071a      	lsls	r2, r3, #28
 8007686:	d52f      	bpl.n	80076e8 <__swbuf_r+0x84>
 8007688:	6923      	ldr	r3, [r4, #16]
 800768a:	b36b      	cbz	r3, 80076e8 <__swbuf_r+0x84>
 800768c:	6923      	ldr	r3, [r4, #16]
 800768e:	6820      	ldr	r0, [r4, #0]
 8007690:	b2f6      	uxtb	r6, r6
 8007692:	1ac0      	subs	r0, r0, r3
 8007694:	6963      	ldr	r3, [r4, #20]
 8007696:	4637      	mov	r7, r6
 8007698:	4283      	cmp	r3, r0
 800769a:	dc04      	bgt.n	80076a6 <__swbuf_r+0x42>
 800769c:	4621      	mov	r1, r4
 800769e:	4628      	mov	r0, r5
 80076a0:	f000 f938 	bl	8007914 <_fflush_r>
 80076a4:	bb30      	cbnz	r0, 80076f4 <__swbuf_r+0x90>
 80076a6:	68a3      	ldr	r3, [r4, #8]
 80076a8:	3001      	adds	r0, #1
 80076aa:	3b01      	subs	r3, #1
 80076ac:	60a3      	str	r3, [r4, #8]
 80076ae:	6823      	ldr	r3, [r4, #0]
 80076b0:	1c5a      	adds	r2, r3, #1
 80076b2:	6022      	str	r2, [r4, #0]
 80076b4:	701e      	strb	r6, [r3, #0]
 80076b6:	6963      	ldr	r3, [r4, #20]
 80076b8:	4283      	cmp	r3, r0
 80076ba:	d004      	beq.n	80076c6 <__swbuf_r+0x62>
 80076bc:	89a3      	ldrh	r3, [r4, #12]
 80076be:	07db      	lsls	r3, r3, #31
 80076c0:	d506      	bpl.n	80076d0 <__swbuf_r+0x6c>
 80076c2:	2e0a      	cmp	r6, #10
 80076c4:	d104      	bne.n	80076d0 <__swbuf_r+0x6c>
 80076c6:	4621      	mov	r1, r4
 80076c8:	4628      	mov	r0, r5
 80076ca:	f000 f923 	bl	8007914 <_fflush_r>
 80076ce:	b988      	cbnz	r0, 80076f4 <__swbuf_r+0x90>
 80076d0:	4638      	mov	r0, r7
 80076d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076d4:	4b0a      	ldr	r3, [pc, #40]	; (8007700 <__swbuf_r+0x9c>)
 80076d6:	429c      	cmp	r4, r3
 80076d8:	d101      	bne.n	80076de <__swbuf_r+0x7a>
 80076da:	68ac      	ldr	r4, [r5, #8]
 80076dc:	e7cf      	b.n	800767e <__swbuf_r+0x1a>
 80076de:	4b09      	ldr	r3, [pc, #36]	; (8007704 <__swbuf_r+0xa0>)
 80076e0:	429c      	cmp	r4, r3
 80076e2:	bf08      	it	eq
 80076e4:	68ec      	ldreq	r4, [r5, #12]
 80076e6:	e7ca      	b.n	800767e <__swbuf_r+0x1a>
 80076e8:	4621      	mov	r1, r4
 80076ea:	4628      	mov	r0, r5
 80076ec:	f000 f81a 	bl	8007724 <__swsetup_r>
 80076f0:	2800      	cmp	r0, #0
 80076f2:	d0cb      	beq.n	800768c <__swbuf_r+0x28>
 80076f4:	f04f 37ff 	mov.w	r7, #4294967295
 80076f8:	e7ea      	b.n	80076d0 <__swbuf_r+0x6c>
 80076fa:	bf00      	nop
 80076fc:	0800848c 	.word	0x0800848c
 8007700:	080084ac 	.word	0x080084ac
 8007704:	0800846c 	.word	0x0800846c

08007708 <__ascii_wctomb>:
 8007708:	4603      	mov	r3, r0
 800770a:	4608      	mov	r0, r1
 800770c:	b141      	cbz	r1, 8007720 <__ascii_wctomb+0x18>
 800770e:	2aff      	cmp	r2, #255	; 0xff
 8007710:	d904      	bls.n	800771c <__ascii_wctomb+0x14>
 8007712:	228a      	movs	r2, #138	; 0x8a
 8007714:	f04f 30ff 	mov.w	r0, #4294967295
 8007718:	601a      	str	r2, [r3, #0]
 800771a:	4770      	bx	lr
 800771c:	2001      	movs	r0, #1
 800771e:	700a      	strb	r2, [r1, #0]
 8007720:	4770      	bx	lr
	...

08007724 <__swsetup_r>:
 8007724:	4b32      	ldr	r3, [pc, #200]	; (80077f0 <__swsetup_r+0xcc>)
 8007726:	b570      	push	{r4, r5, r6, lr}
 8007728:	681d      	ldr	r5, [r3, #0]
 800772a:	4606      	mov	r6, r0
 800772c:	460c      	mov	r4, r1
 800772e:	b125      	cbz	r5, 800773a <__swsetup_r+0x16>
 8007730:	69ab      	ldr	r3, [r5, #24]
 8007732:	b913      	cbnz	r3, 800773a <__swsetup_r+0x16>
 8007734:	4628      	mov	r0, r5
 8007736:	f000 f981 	bl	8007a3c <__sinit>
 800773a:	4b2e      	ldr	r3, [pc, #184]	; (80077f4 <__swsetup_r+0xd0>)
 800773c:	429c      	cmp	r4, r3
 800773e:	d10f      	bne.n	8007760 <__swsetup_r+0x3c>
 8007740:	686c      	ldr	r4, [r5, #4]
 8007742:	89a3      	ldrh	r3, [r4, #12]
 8007744:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007748:	0719      	lsls	r1, r3, #28
 800774a:	d42c      	bmi.n	80077a6 <__swsetup_r+0x82>
 800774c:	06dd      	lsls	r5, r3, #27
 800774e:	d411      	bmi.n	8007774 <__swsetup_r+0x50>
 8007750:	2309      	movs	r3, #9
 8007752:	6033      	str	r3, [r6, #0]
 8007754:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007758:	f04f 30ff 	mov.w	r0, #4294967295
 800775c:	81a3      	strh	r3, [r4, #12]
 800775e:	e03e      	b.n	80077de <__swsetup_r+0xba>
 8007760:	4b25      	ldr	r3, [pc, #148]	; (80077f8 <__swsetup_r+0xd4>)
 8007762:	429c      	cmp	r4, r3
 8007764:	d101      	bne.n	800776a <__swsetup_r+0x46>
 8007766:	68ac      	ldr	r4, [r5, #8]
 8007768:	e7eb      	b.n	8007742 <__swsetup_r+0x1e>
 800776a:	4b24      	ldr	r3, [pc, #144]	; (80077fc <__swsetup_r+0xd8>)
 800776c:	429c      	cmp	r4, r3
 800776e:	bf08      	it	eq
 8007770:	68ec      	ldreq	r4, [r5, #12]
 8007772:	e7e6      	b.n	8007742 <__swsetup_r+0x1e>
 8007774:	0758      	lsls	r0, r3, #29
 8007776:	d512      	bpl.n	800779e <__swsetup_r+0x7a>
 8007778:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800777a:	b141      	cbz	r1, 800778e <__swsetup_r+0x6a>
 800777c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007780:	4299      	cmp	r1, r3
 8007782:	d002      	beq.n	800778a <__swsetup_r+0x66>
 8007784:	4630      	mov	r0, r6
 8007786:	f7ff fb37 	bl	8006df8 <_free_r>
 800778a:	2300      	movs	r3, #0
 800778c:	6363      	str	r3, [r4, #52]	; 0x34
 800778e:	89a3      	ldrh	r3, [r4, #12]
 8007790:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007794:	81a3      	strh	r3, [r4, #12]
 8007796:	2300      	movs	r3, #0
 8007798:	6063      	str	r3, [r4, #4]
 800779a:	6923      	ldr	r3, [r4, #16]
 800779c:	6023      	str	r3, [r4, #0]
 800779e:	89a3      	ldrh	r3, [r4, #12]
 80077a0:	f043 0308 	orr.w	r3, r3, #8
 80077a4:	81a3      	strh	r3, [r4, #12]
 80077a6:	6923      	ldr	r3, [r4, #16]
 80077a8:	b94b      	cbnz	r3, 80077be <__swsetup_r+0x9a>
 80077aa:	89a3      	ldrh	r3, [r4, #12]
 80077ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80077b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077b4:	d003      	beq.n	80077be <__swsetup_r+0x9a>
 80077b6:	4621      	mov	r1, r4
 80077b8:	4630      	mov	r0, r6
 80077ba:	f000 fa05 	bl	8007bc8 <__smakebuf_r>
 80077be:	89a0      	ldrh	r0, [r4, #12]
 80077c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80077c4:	f010 0301 	ands.w	r3, r0, #1
 80077c8:	d00a      	beq.n	80077e0 <__swsetup_r+0xbc>
 80077ca:	2300      	movs	r3, #0
 80077cc:	60a3      	str	r3, [r4, #8]
 80077ce:	6963      	ldr	r3, [r4, #20]
 80077d0:	425b      	negs	r3, r3
 80077d2:	61a3      	str	r3, [r4, #24]
 80077d4:	6923      	ldr	r3, [r4, #16]
 80077d6:	b943      	cbnz	r3, 80077ea <__swsetup_r+0xc6>
 80077d8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80077dc:	d1ba      	bne.n	8007754 <__swsetup_r+0x30>
 80077de:	bd70      	pop	{r4, r5, r6, pc}
 80077e0:	0781      	lsls	r1, r0, #30
 80077e2:	bf58      	it	pl
 80077e4:	6963      	ldrpl	r3, [r4, #20]
 80077e6:	60a3      	str	r3, [r4, #8]
 80077e8:	e7f4      	b.n	80077d4 <__swsetup_r+0xb0>
 80077ea:	2000      	movs	r0, #0
 80077ec:	e7f7      	b.n	80077de <__swsetup_r+0xba>
 80077ee:	bf00      	nop
 80077f0:	2000000c 	.word	0x2000000c
 80077f4:	0800848c 	.word	0x0800848c
 80077f8:	080084ac 	.word	0x080084ac
 80077fc:	0800846c 	.word	0x0800846c

08007800 <abort>:
 8007800:	2006      	movs	r0, #6
 8007802:	b508      	push	{r3, lr}
 8007804:	f000 fa50 	bl	8007ca8 <raise>
 8007808:	2001      	movs	r0, #1
 800780a:	f7fa f942 	bl	8001a92 <_exit>
	...

08007810 <__sflush_r>:
 8007810:	898a      	ldrh	r2, [r1, #12]
 8007812:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007814:	4605      	mov	r5, r0
 8007816:	0710      	lsls	r0, r2, #28
 8007818:	460c      	mov	r4, r1
 800781a:	d457      	bmi.n	80078cc <__sflush_r+0xbc>
 800781c:	684b      	ldr	r3, [r1, #4]
 800781e:	2b00      	cmp	r3, #0
 8007820:	dc04      	bgt.n	800782c <__sflush_r+0x1c>
 8007822:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007824:	2b00      	cmp	r3, #0
 8007826:	dc01      	bgt.n	800782c <__sflush_r+0x1c>
 8007828:	2000      	movs	r0, #0
 800782a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800782c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800782e:	2e00      	cmp	r6, #0
 8007830:	d0fa      	beq.n	8007828 <__sflush_r+0x18>
 8007832:	2300      	movs	r3, #0
 8007834:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007838:	682f      	ldr	r7, [r5, #0]
 800783a:	602b      	str	r3, [r5, #0]
 800783c:	d032      	beq.n	80078a4 <__sflush_r+0x94>
 800783e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007840:	89a3      	ldrh	r3, [r4, #12]
 8007842:	075a      	lsls	r2, r3, #29
 8007844:	d505      	bpl.n	8007852 <__sflush_r+0x42>
 8007846:	6863      	ldr	r3, [r4, #4]
 8007848:	1ac0      	subs	r0, r0, r3
 800784a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800784c:	b10b      	cbz	r3, 8007852 <__sflush_r+0x42>
 800784e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007850:	1ac0      	subs	r0, r0, r3
 8007852:	2300      	movs	r3, #0
 8007854:	4602      	mov	r2, r0
 8007856:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007858:	4628      	mov	r0, r5
 800785a:	6a21      	ldr	r1, [r4, #32]
 800785c:	47b0      	blx	r6
 800785e:	1c43      	adds	r3, r0, #1
 8007860:	89a3      	ldrh	r3, [r4, #12]
 8007862:	d106      	bne.n	8007872 <__sflush_r+0x62>
 8007864:	6829      	ldr	r1, [r5, #0]
 8007866:	291d      	cmp	r1, #29
 8007868:	d82c      	bhi.n	80078c4 <__sflush_r+0xb4>
 800786a:	4a29      	ldr	r2, [pc, #164]	; (8007910 <__sflush_r+0x100>)
 800786c:	40ca      	lsrs	r2, r1
 800786e:	07d6      	lsls	r6, r2, #31
 8007870:	d528      	bpl.n	80078c4 <__sflush_r+0xb4>
 8007872:	2200      	movs	r2, #0
 8007874:	6062      	str	r2, [r4, #4]
 8007876:	6922      	ldr	r2, [r4, #16]
 8007878:	04d9      	lsls	r1, r3, #19
 800787a:	6022      	str	r2, [r4, #0]
 800787c:	d504      	bpl.n	8007888 <__sflush_r+0x78>
 800787e:	1c42      	adds	r2, r0, #1
 8007880:	d101      	bne.n	8007886 <__sflush_r+0x76>
 8007882:	682b      	ldr	r3, [r5, #0]
 8007884:	b903      	cbnz	r3, 8007888 <__sflush_r+0x78>
 8007886:	6560      	str	r0, [r4, #84]	; 0x54
 8007888:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800788a:	602f      	str	r7, [r5, #0]
 800788c:	2900      	cmp	r1, #0
 800788e:	d0cb      	beq.n	8007828 <__sflush_r+0x18>
 8007890:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007894:	4299      	cmp	r1, r3
 8007896:	d002      	beq.n	800789e <__sflush_r+0x8e>
 8007898:	4628      	mov	r0, r5
 800789a:	f7ff faad 	bl	8006df8 <_free_r>
 800789e:	2000      	movs	r0, #0
 80078a0:	6360      	str	r0, [r4, #52]	; 0x34
 80078a2:	e7c2      	b.n	800782a <__sflush_r+0x1a>
 80078a4:	6a21      	ldr	r1, [r4, #32]
 80078a6:	2301      	movs	r3, #1
 80078a8:	4628      	mov	r0, r5
 80078aa:	47b0      	blx	r6
 80078ac:	1c41      	adds	r1, r0, #1
 80078ae:	d1c7      	bne.n	8007840 <__sflush_r+0x30>
 80078b0:	682b      	ldr	r3, [r5, #0]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d0c4      	beq.n	8007840 <__sflush_r+0x30>
 80078b6:	2b1d      	cmp	r3, #29
 80078b8:	d001      	beq.n	80078be <__sflush_r+0xae>
 80078ba:	2b16      	cmp	r3, #22
 80078bc:	d101      	bne.n	80078c2 <__sflush_r+0xb2>
 80078be:	602f      	str	r7, [r5, #0]
 80078c0:	e7b2      	b.n	8007828 <__sflush_r+0x18>
 80078c2:	89a3      	ldrh	r3, [r4, #12]
 80078c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078c8:	81a3      	strh	r3, [r4, #12]
 80078ca:	e7ae      	b.n	800782a <__sflush_r+0x1a>
 80078cc:	690f      	ldr	r7, [r1, #16]
 80078ce:	2f00      	cmp	r7, #0
 80078d0:	d0aa      	beq.n	8007828 <__sflush_r+0x18>
 80078d2:	0793      	lsls	r3, r2, #30
 80078d4:	bf18      	it	ne
 80078d6:	2300      	movne	r3, #0
 80078d8:	680e      	ldr	r6, [r1, #0]
 80078da:	bf08      	it	eq
 80078dc:	694b      	ldreq	r3, [r1, #20]
 80078de:	1bf6      	subs	r6, r6, r7
 80078e0:	600f      	str	r7, [r1, #0]
 80078e2:	608b      	str	r3, [r1, #8]
 80078e4:	2e00      	cmp	r6, #0
 80078e6:	dd9f      	ble.n	8007828 <__sflush_r+0x18>
 80078e8:	4633      	mov	r3, r6
 80078ea:	463a      	mov	r2, r7
 80078ec:	4628      	mov	r0, r5
 80078ee:	6a21      	ldr	r1, [r4, #32]
 80078f0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80078f4:	47e0      	blx	ip
 80078f6:	2800      	cmp	r0, #0
 80078f8:	dc06      	bgt.n	8007908 <__sflush_r+0xf8>
 80078fa:	89a3      	ldrh	r3, [r4, #12]
 80078fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007900:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007904:	81a3      	strh	r3, [r4, #12]
 8007906:	e790      	b.n	800782a <__sflush_r+0x1a>
 8007908:	4407      	add	r7, r0
 800790a:	1a36      	subs	r6, r6, r0
 800790c:	e7ea      	b.n	80078e4 <__sflush_r+0xd4>
 800790e:	bf00      	nop
 8007910:	20400001 	.word	0x20400001

08007914 <_fflush_r>:
 8007914:	b538      	push	{r3, r4, r5, lr}
 8007916:	690b      	ldr	r3, [r1, #16]
 8007918:	4605      	mov	r5, r0
 800791a:	460c      	mov	r4, r1
 800791c:	b913      	cbnz	r3, 8007924 <_fflush_r+0x10>
 800791e:	2500      	movs	r5, #0
 8007920:	4628      	mov	r0, r5
 8007922:	bd38      	pop	{r3, r4, r5, pc}
 8007924:	b118      	cbz	r0, 800792e <_fflush_r+0x1a>
 8007926:	6983      	ldr	r3, [r0, #24]
 8007928:	b90b      	cbnz	r3, 800792e <_fflush_r+0x1a>
 800792a:	f000 f887 	bl	8007a3c <__sinit>
 800792e:	4b14      	ldr	r3, [pc, #80]	; (8007980 <_fflush_r+0x6c>)
 8007930:	429c      	cmp	r4, r3
 8007932:	d11b      	bne.n	800796c <_fflush_r+0x58>
 8007934:	686c      	ldr	r4, [r5, #4]
 8007936:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d0ef      	beq.n	800791e <_fflush_r+0xa>
 800793e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007940:	07d0      	lsls	r0, r2, #31
 8007942:	d404      	bmi.n	800794e <_fflush_r+0x3a>
 8007944:	0599      	lsls	r1, r3, #22
 8007946:	d402      	bmi.n	800794e <_fflush_r+0x3a>
 8007948:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800794a:	f000 f915 	bl	8007b78 <__retarget_lock_acquire_recursive>
 800794e:	4628      	mov	r0, r5
 8007950:	4621      	mov	r1, r4
 8007952:	f7ff ff5d 	bl	8007810 <__sflush_r>
 8007956:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007958:	4605      	mov	r5, r0
 800795a:	07da      	lsls	r2, r3, #31
 800795c:	d4e0      	bmi.n	8007920 <_fflush_r+0xc>
 800795e:	89a3      	ldrh	r3, [r4, #12]
 8007960:	059b      	lsls	r3, r3, #22
 8007962:	d4dd      	bmi.n	8007920 <_fflush_r+0xc>
 8007964:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007966:	f000 f908 	bl	8007b7a <__retarget_lock_release_recursive>
 800796a:	e7d9      	b.n	8007920 <_fflush_r+0xc>
 800796c:	4b05      	ldr	r3, [pc, #20]	; (8007984 <_fflush_r+0x70>)
 800796e:	429c      	cmp	r4, r3
 8007970:	d101      	bne.n	8007976 <_fflush_r+0x62>
 8007972:	68ac      	ldr	r4, [r5, #8]
 8007974:	e7df      	b.n	8007936 <_fflush_r+0x22>
 8007976:	4b04      	ldr	r3, [pc, #16]	; (8007988 <_fflush_r+0x74>)
 8007978:	429c      	cmp	r4, r3
 800797a:	bf08      	it	eq
 800797c:	68ec      	ldreq	r4, [r5, #12]
 800797e:	e7da      	b.n	8007936 <_fflush_r+0x22>
 8007980:	0800848c 	.word	0x0800848c
 8007984:	080084ac 	.word	0x080084ac
 8007988:	0800846c 	.word	0x0800846c

0800798c <std>:
 800798c:	2300      	movs	r3, #0
 800798e:	b510      	push	{r4, lr}
 8007990:	4604      	mov	r4, r0
 8007992:	e9c0 3300 	strd	r3, r3, [r0]
 8007996:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800799a:	6083      	str	r3, [r0, #8]
 800799c:	8181      	strh	r1, [r0, #12]
 800799e:	6643      	str	r3, [r0, #100]	; 0x64
 80079a0:	81c2      	strh	r2, [r0, #14]
 80079a2:	6183      	str	r3, [r0, #24]
 80079a4:	4619      	mov	r1, r3
 80079a6:	2208      	movs	r2, #8
 80079a8:	305c      	adds	r0, #92	; 0x5c
 80079aa:	f7fd fb65 	bl	8005078 <memset>
 80079ae:	4b05      	ldr	r3, [pc, #20]	; (80079c4 <std+0x38>)
 80079b0:	6224      	str	r4, [r4, #32]
 80079b2:	6263      	str	r3, [r4, #36]	; 0x24
 80079b4:	4b04      	ldr	r3, [pc, #16]	; (80079c8 <std+0x3c>)
 80079b6:	62a3      	str	r3, [r4, #40]	; 0x28
 80079b8:	4b04      	ldr	r3, [pc, #16]	; (80079cc <std+0x40>)
 80079ba:	62e3      	str	r3, [r4, #44]	; 0x2c
 80079bc:	4b04      	ldr	r3, [pc, #16]	; (80079d0 <std+0x44>)
 80079be:	6323      	str	r3, [r4, #48]	; 0x30
 80079c0:	bd10      	pop	{r4, pc}
 80079c2:	bf00      	nop
 80079c4:	08007ce1 	.word	0x08007ce1
 80079c8:	08007d03 	.word	0x08007d03
 80079cc:	08007d3b 	.word	0x08007d3b
 80079d0:	08007d5f 	.word	0x08007d5f

080079d4 <_cleanup_r>:
 80079d4:	4901      	ldr	r1, [pc, #4]	; (80079dc <_cleanup_r+0x8>)
 80079d6:	f000 b8af 	b.w	8007b38 <_fwalk_reent>
 80079da:	bf00      	nop
 80079dc:	08007915 	.word	0x08007915

080079e0 <__sfmoreglue>:
 80079e0:	2268      	movs	r2, #104	; 0x68
 80079e2:	b570      	push	{r4, r5, r6, lr}
 80079e4:	1e4d      	subs	r5, r1, #1
 80079e6:	4355      	muls	r5, r2
 80079e8:	460e      	mov	r6, r1
 80079ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80079ee:	f7ff fa6b 	bl	8006ec8 <_malloc_r>
 80079f2:	4604      	mov	r4, r0
 80079f4:	b140      	cbz	r0, 8007a08 <__sfmoreglue+0x28>
 80079f6:	2100      	movs	r1, #0
 80079f8:	e9c0 1600 	strd	r1, r6, [r0]
 80079fc:	300c      	adds	r0, #12
 80079fe:	60a0      	str	r0, [r4, #8]
 8007a00:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007a04:	f7fd fb38 	bl	8005078 <memset>
 8007a08:	4620      	mov	r0, r4
 8007a0a:	bd70      	pop	{r4, r5, r6, pc}

08007a0c <__sfp_lock_acquire>:
 8007a0c:	4801      	ldr	r0, [pc, #4]	; (8007a14 <__sfp_lock_acquire+0x8>)
 8007a0e:	f000 b8b3 	b.w	8007b78 <__retarget_lock_acquire_recursive>
 8007a12:	bf00      	nop
 8007a14:	20000385 	.word	0x20000385

08007a18 <__sfp_lock_release>:
 8007a18:	4801      	ldr	r0, [pc, #4]	; (8007a20 <__sfp_lock_release+0x8>)
 8007a1a:	f000 b8ae 	b.w	8007b7a <__retarget_lock_release_recursive>
 8007a1e:	bf00      	nop
 8007a20:	20000385 	.word	0x20000385

08007a24 <__sinit_lock_acquire>:
 8007a24:	4801      	ldr	r0, [pc, #4]	; (8007a2c <__sinit_lock_acquire+0x8>)
 8007a26:	f000 b8a7 	b.w	8007b78 <__retarget_lock_acquire_recursive>
 8007a2a:	bf00      	nop
 8007a2c:	20000386 	.word	0x20000386

08007a30 <__sinit_lock_release>:
 8007a30:	4801      	ldr	r0, [pc, #4]	; (8007a38 <__sinit_lock_release+0x8>)
 8007a32:	f000 b8a2 	b.w	8007b7a <__retarget_lock_release_recursive>
 8007a36:	bf00      	nop
 8007a38:	20000386 	.word	0x20000386

08007a3c <__sinit>:
 8007a3c:	b510      	push	{r4, lr}
 8007a3e:	4604      	mov	r4, r0
 8007a40:	f7ff fff0 	bl	8007a24 <__sinit_lock_acquire>
 8007a44:	69a3      	ldr	r3, [r4, #24]
 8007a46:	b11b      	cbz	r3, 8007a50 <__sinit+0x14>
 8007a48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a4c:	f7ff bff0 	b.w	8007a30 <__sinit_lock_release>
 8007a50:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007a54:	6523      	str	r3, [r4, #80]	; 0x50
 8007a56:	4b13      	ldr	r3, [pc, #76]	; (8007aa4 <__sinit+0x68>)
 8007a58:	4a13      	ldr	r2, [pc, #76]	; (8007aa8 <__sinit+0x6c>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	62a2      	str	r2, [r4, #40]	; 0x28
 8007a5e:	42a3      	cmp	r3, r4
 8007a60:	bf08      	it	eq
 8007a62:	2301      	moveq	r3, #1
 8007a64:	4620      	mov	r0, r4
 8007a66:	bf08      	it	eq
 8007a68:	61a3      	streq	r3, [r4, #24]
 8007a6a:	f000 f81f 	bl	8007aac <__sfp>
 8007a6e:	6060      	str	r0, [r4, #4]
 8007a70:	4620      	mov	r0, r4
 8007a72:	f000 f81b 	bl	8007aac <__sfp>
 8007a76:	60a0      	str	r0, [r4, #8]
 8007a78:	4620      	mov	r0, r4
 8007a7a:	f000 f817 	bl	8007aac <__sfp>
 8007a7e:	2200      	movs	r2, #0
 8007a80:	2104      	movs	r1, #4
 8007a82:	60e0      	str	r0, [r4, #12]
 8007a84:	6860      	ldr	r0, [r4, #4]
 8007a86:	f7ff ff81 	bl	800798c <std>
 8007a8a:	2201      	movs	r2, #1
 8007a8c:	2109      	movs	r1, #9
 8007a8e:	68a0      	ldr	r0, [r4, #8]
 8007a90:	f7ff ff7c 	bl	800798c <std>
 8007a94:	2202      	movs	r2, #2
 8007a96:	2112      	movs	r1, #18
 8007a98:	68e0      	ldr	r0, [r4, #12]
 8007a9a:	f7ff ff77 	bl	800798c <std>
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	61a3      	str	r3, [r4, #24]
 8007aa2:	e7d1      	b.n	8007a48 <__sinit+0xc>
 8007aa4:	080080f4 	.word	0x080080f4
 8007aa8:	080079d5 	.word	0x080079d5

08007aac <__sfp>:
 8007aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aae:	4607      	mov	r7, r0
 8007ab0:	f7ff ffac 	bl	8007a0c <__sfp_lock_acquire>
 8007ab4:	4b1e      	ldr	r3, [pc, #120]	; (8007b30 <__sfp+0x84>)
 8007ab6:	681e      	ldr	r6, [r3, #0]
 8007ab8:	69b3      	ldr	r3, [r6, #24]
 8007aba:	b913      	cbnz	r3, 8007ac2 <__sfp+0x16>
 8007abc:	4630      	mov	r0, r6
 8007abe:	f7ff ffbd 	bl	8007a3c <__sinit>
 8007ac2:	3648      	adds	r6, #72	; 0x48
 8007ac4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007ac8:	3b01      	subs	r3, #1
 8007aca:	d503      	bpl.n	8007ad4 <__sfp+0x28>
 8007acc:	6833      	ldr	r3, [r6, #0]
 8007ace:	b30b      	cbz	r3, 8007b14 <__sfp+0x68>
 8007ad0:	6836      	ldr	r6, [r6, #0]
 8007ad2:	e7f7      	b.n	8007ac4 <__sfp+0x18>
 8007ad4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007ad8:	b9d5      	cbnz	r5, 8007b10 <__sfp+0x64>
 8007ada:	4b16      	ldr	r3, [pc, #88]	; (8007b34 <__sfp+0x88>)
 8007adc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007ae0:	60e3      	str	r3, [r4, #12]
 8007ae2:	6665      	str	r5, [r4, #100]	; 0x64
 8007ae4:	f000 f847 	bl	8007b76 <__retarget_lock_init_recursive>
 8007ae8:	f7ff ff96 	bl	8007a18 <__sfp_lock_release>
 8007aec:	2208      	movs	r2, #8
 8007aee:	4629      	mov	r1, r5
 8007af0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007af4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007af8:	6025      	str	r5, [r4, #0]
 8007afa:	61a5      	str	r5, [r4, #24]
 8007afc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007b00:	f7fd faba 	bl	8005078 <memset>
 8007b04:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007b08:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007b0c:	4620      	mov	r0, r4
 8007b0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b10:	3468      	adds	r4, #104	; 0x68
 8007b12:	e7d9      	b.n	8007ac8 <__sfp+0x1c>
 8007b14:	2104      	movs	r1, #4
 8007b16:	4638      	mov	r0, r7
 8007b18:	f7ff ff62 	bl	80079e0 <__sfmoreglue>
 8007b1c:	4604      	mov	r4, r0
 8007b1e:	6030      	str	r0, [r6, #0]
 8007b20:	2800      	cmp	r0, #0
 8007b22:	d1d5      	bne.n	8007ad0 <__sfp+0x24>
 8007b24:	f7ff ff78 	bl	8007a18 <__sfp_lock_release>
 8007b28:	230c      	movs	r3, #12
 8007b2a:	603b      	str	r3, [r7, #0]
 8007b2c:	e7ee      	b.n	8007b0c <__sfp+0x60>
 8007b2e:	bf00      	nop
 8007b30:	080080f4 	.word	0x080080f4
 8007b34:	ffff0001 	.word	0xffff0001

08007b38 <_fwalk_reent>:
 8007b38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b3c:	4606      	mov	r6, r0
 8007b3e:	4688      	mov	r8, r1
 8007b40:	2700      	movs	r7, #0
 8007b42:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007b46:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007b4a:	f1b9 0901 	subs.w	r9, r9, #1
 8007b4e:	d505      	bpl.n	8007b5c <_fwalk_reent+0x24>
 8007b50:	6824      	ldr	r4, [r4, #0]
 8007b52:	2c00      	cmp	r4, #0
 8007b54:	d1f7      	bne.n	8007b46 <_fwalk_reent+0xe>
 8007b56:	4638      	mov	r0, r7
 8007b58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b5c:	89ab      	ldrh	r3, [r5, #12]
 8007b5e:	2b01      	cmp	r3, #1
 8007b60:	d907      	bls.n	8007b72 <_fwalk_reent+0x3a>
 8007b62:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007b66:	3301      	adds	r3, #1
 8007b68:	d003      	beq.n	8007b72 <_fwalk_reent+0x3a>
 8007b6a:	4629      	mov	r1, r5
 8007b6c:	4630      	mov	r0, r6
 8007b6e:	47c0      	blx	r8
 8007b70:	4307      	orrs	r7, r0
 8007b72:	3568      	adds	r5, #104	; 0x68
 8007b74:	e7e9      	b.n	8007b4a <_fwalk_reent+0x12>

08007b76 <__retarget_lock_init_recursive>:
 8007b76:	4770      	bx	lr

08007b78 <__retarget_lock_acquire_recursive>:
 8007b78:	4770      	bx	lr

08007b7a <__retarget_lock_release_recursive>:
 8007b7a:	4770      	bx	lr

08007b7c <__swhatbuf_r>:
 8007b7c:	b570      	push	{r4, r5, r6, lr}
 8007b7e:	460e      	mov	r6, r1
 8007b80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b84:	4614      	mov	r4, r2
 8007b86:	2900      	cmp	r1, #0
 8007b88:	461d      	mov	r5, r3
 8007b8a:	b096      	sub	sp, #88	; 0x58
 8007b8c:	da08      	bge.n	8007ba0 <__swhatbuf_r+0x24>
 8007b8e:	2200      	movs	r2, #0
 8007b90:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007b94:	602a      	str	r2, [r5, #0]
 8007b96:	061a      	lsls	r2, r3, #24
 8007b98:	d410      	bmi.n	8007bbc <__swhatbuf_r+0x40>
 8007b9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b9e:	e00e      	b.n	8007bbe <__swhatbuf_r+0x42>
 8007ba0:	466a      	mov	r2, sp
 8007ba2:	f000 f903 	bl	8007dac <_fstat_r>
 8007ba6:	2800      	cmp	r0, #0
 8007ba8:	dbf1      	blt.n	8007b8e <__swhatbuf_r+0x12>
 8007baa:	9a01      	ldr	r2, [sp, #4]
 8007bac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007bb0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007bb4:	425a      	negs	r2, r3
 8007bb6:	415a      	adcs	r2, r3
 8007bb8:	602a      	str	r2, [r5, #0]
 8007bba:	e7ee      	b.n	8007b9a <__swhatbuf_r+0x1e>
 8007bbc:	2340      	movs	r3, #64	; 0x40
 8007bbe:	2000      	movs	r0, #0
 8007bc0:	6023      	str	r3, [r4, #0]
 8007bc2:	b016      	add	sp, #88	; 0x58
 8007bc4:	bd70      	pop	{r4, r5, r6, pc}
	...

08007bc8 <__smakebuf_r>:
 8007bc8:	898b      	ldrh	r3, [r1, #12]
 8007bca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007bcc:	079d      	lsls	r5, r3, #30
 8007bce:	4606      	mov	r6, r0
 8007bd0:	460c      	mov	r4, r1
 8007bd2:	d507      	bpl.n	8007be4 <__smakebuf_r+0x1c>
 8007bd4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007bd8:	6023      	str	r3, [r4, #0]
 8007bda:	6123      	str	r3, [r4, #16]
 8007bdc:	2301      	movs	r3, #1
 8007bde:	6163      	str	r3, [r4, #20]
 8007be0:	b002      	add	sp, #8
 8007be2:	bd70      	pop	{r4, r5, r6, pc}
 8007be4:	466a      	mov	r2, sp
 8007be6:	ab01      	add	r3, sp, #4
 8007be8:	f7ff ffc8 	bl	8007b7c <__swhatbuf_r>
 8007bec:	9900      	ldr	r1, [sp, #0]
 8007bee:	4605      	mov	r5, r0
 8007bf0:	4630      	mov	r0, r6
 8007bf2:	f7ff f969 	bl	8006ec8 <_malloc_r>
 8007bf6:	b948      	cbnz	r0, 8007c0c <__smakebuf_r+0x44>
 8007bf8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007bfc:	059a      	lsls	r2, r3, #22
 8007bfe:	d4ef      	bmi.n	8007be0 <__smakebuf_r+0x18>
 8007c00:	f023 0303 	bic.w	r3, r3, #3
 8007c04:	f043 0302 	orr.w	r3, r3, #2
 8007c08:	81a3      	strh	r3, [r4, #12]
 8007c0a:	e7e3      	b.n	8007bd4 <__smakebuf_r+0xc>
 8007c0c:	4b0d      	ldr	r3, [pc, #52]	; (8007c44 <__smakebuf_r+0x7c>)
 8007c0e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007c10:	89a3      	ldrh	r3, [r4, #12]
 8007c12:	6020      	str	r0, [r4, #0]
 8007c14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c18:	81a3      	strh	r3, [r4, #12]
 8007c1a:	9b00      	ldr	r3, [sp, #0]
 8007c1c:	6120      	str	r0, [r4, #16]
 8007c1e:	6163      	str	r3, [r4, #20]
 8007c20:	9b01      	ldr	r3, [sp, #4]
 8007c22:	b15b      	cbz	r3, 8007c3c <__smakebuf_r+0x74>
 8007c24:	4630      	mov	r0, r6
 8007c26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c2a:	f000 f8d1 	bl	8007dd0 <_isatty_r>
 8007c2e:	b128      	cbz	r0, 8007c3c <__smakebuf_r+0x74>
 8007c30:	89a3      	ldrh	r3, [r4, #12]
 8007c32:	f023 0303 	bic.w	r3, r3, #3
 8007c36:	f043 0301 	orr.w	r3, r3, #1
 8007c3a:	81a3      	strh	r3, [r4, #12]
 8007c3c:	89a0      	ldrh	r0, [r4, #12]
 8007c3e:	4305      	orrs	r5, r0
 8007c40:	81a5      	strh	r5, [r4, #12]
 8007c42:	e7cd      	b.n	8007be0 <__smakebuf_r+0x18>
 8007c44:	080079d5 	.word	0x080079d5

08007c48 <_malloc_usable_size_r>:
 8007c48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c4c:	1f18      	subs	r0, r3, #4
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	bfbc      	itt	lt
 8007c52:	580b      	ldrlt	r3, [r1, r0]
 8007c54:	18c0      	addlt	r0, r0, r3
 8007c56:	4770      	bx	lr

08007c58 <_raise_r>:
 8007c58:	291f      	cmp	r1, #31
 8007c5a:	b538      	push	{r3, r4, r5, lr}
 8007c5c:	4604      	mov	r4, r0
 8007c5e:	460d      	mov	r5, r1
 8007c60:	d904      	bls.n	8007c6c <_raise_r+0x14>
 8007c62:	2316      	movs	r3, #22
 8007c64:	6003      	str	r3, [r0, #0]
 8007c66:	f04f 30ff 	mov.w	r0, #4294967295
 8007c6a:	bd38      	pop	{r3, r4, r5, pc}
 8007c6c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007c6e:	b112      	cbz	r2, 8007c76 <_raise_r+0x1e>
 8007c70:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007c74:	b94b      	cbnz	r3, 8007c8a <_raise_r+0x32>
 8007c76:	4620      	mov	r0, r4
 8007c78:	f000 f830 	bl	8007cdc <_getpid_r>
 8007c7c:	462a      	mov	r2, r5
 8007c7e:	4601      	mov	r1, r0
 8007c80:	4620      	mov	r0, r4
 8007c82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c86:	f000 b817 	b.w	8007cb8 <_kill_r>
 8007c8a:	2b01      	cmp	r3, #1
 8007c8c:	d00a      	beq.n	8007ca4 <_raise_r+0x4c>
 8007c8e:	1c59      	adds	r1, r3, #1
 8007c90:	d103      	bne.n	8007c9a <_raise_r+0x42>
 8007c92:	2316      	movs	r3, #22
 8007c94:	6003      	str	r3, [r0, #0]
 8007c96:	2001      	movs	r0, #1
 8007c98:	e7e7      	b.n	8007c6a <_raise_r+0x12>
 8007c9a:	2400      	movs	r4, #0
 8007c9c:	4628      	mov	r0, r5
 8007c9e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007ca2:	4798      	blx	r3
 8007ca4:	2000      	movs	r0, #0
 8007ca6:	e7e0      	b.n	8007c6a <_raise_r+0x12>

08007ca8 <raise>:
 8007ca8:	4b02      	ldr	r3, [pc, #8]	; (8007cb4 <raise+0xc>)
 8007caa:	4601      	mov	r1, r0
 8007cac:	6818      	ldr	r0, [r3, #0]
 8007cae:	f7ff bfd3 	b.w	8007c58 <_raise_r>
 8007cb2:	bf00      	nop
 8007cb4:	2000000c 	.word	0x2000000c

08007cb8 <_kill_r>:
 8007cb8:	b538      	push	{r3, r4, r5, lr}
 8007cba:	2300      	movs	r3, #0
 8007cbc:	4d06      	ldr	r5, [pc, #24]	; (8007cd8 <_kill_r+0x20>)
 8007cbe:	4604      	mov	r4, r0
 8007cc0:	4608      	mov	r0, r1
 8007cc2:	4611      	mov	r1, r2
 8007cc4:	602b      	str	r3, [r5, #0]
 8007cc6:	f7f9 fed4 	bl	8001a72 <_kill>
 8007cca:	1c43      	adds	r3, r0, #1
 8007ccc:	d102      	bne.n	8007cd4 <_kill_r+0x1c>
 8007cce:	682b      	ldr	r3, [r5, #0]
 8007cd0:	b103      	cbz	r3, 8007cd4 <_kill_r+0x1c>
 8007cd2:	6023      	str	r3, [r4, #0]
 8007cd4:	bd38      	pop	{r3, r4, r5, pc}
 8007cd6:	bf00      	nop
 8007cd8:	20000380 	.word	0x20000380

08007cdc <_getpid_r>:
 8007cdc:	f7f9 bec2 	b.w	8001a64 <_getpid>

08007ce0 <__sread>:
 8007ce0:	b510      	push	{r4, lr}
 8007ce2:	460c      	mov	r4, r1
 8007ce4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ce8:	f000 f894 	bl	8007e14 <_read_r>
 8007cec:	2800      	cmp	r0, #0
 8007cee:	bfab      	itete	ge
 8007cf0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007cf2:	89a3      	ldrhlt	r3, [r4, #12]
 8007cf4:	181b      	addge	r3, r3, r0
 8007cf6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007cfa:	bfac      	ite	ge
 8007cfc:	6563      	strge	r3, [r4, #84]	; 0x54
 8007cfe:	81a3      	strhlt	r3, [r4, #12]
 8007d00:	bd10      	pop	{r4, pc}

08007d02 <__swrite>:
 8007d02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d06:	461f      	mov	r7, r3
 8007d08:	898b      	ldrh	r3, [r1, #12]
 8007d0a:	4605      	mov	r5, r0
 8007d0c:	05db      	lsls	r3, r3, #23
 8007d0e:	460c      	mov	r4, r1
 8007d10:	4616      	mov	r6, r2
 8007d12:	d505      	bpl.n	8007d20 <__swrite+0x1e>
 8007d14:	2302      	movs	r3, #2
 8007d16:	2200      	movs	r2, #0
 8007d18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d1c:	f000 f868 	bl	8007df0 <_lseek_r>
 8007d20:	89a3      	ldrh	r3, [r4, #12]
 8007d22:	4632      	mov	r2, r6
 8007d24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007d28:	81a3      	strh	r3, [r4, #12]
 8007d2a:	4628      	mov	r0, r5
 8007d2c:	463b      	mov	r3, r7
 8007d2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d36:	f000 b817 	b.w	8007d68 <_write_r>

08007d3a <__sseek>:
 8007d3a:	b510      	push	{r4, lr}
 8007d3c:	460c      	mov	r4, r1
 8007d3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d42:	f000 f855 	bl	8007df0 <_lseek_r>
 8007d46:	1c43      	adds	r3, r0, #1
 8007d48:	89a3      	ldrh	r3, [r4, #12]
 8007d4a:	bf15      	itete	ne
 8007d4c:	6560      	strne	r0, [r4, #84]	; 0x54
 8007d4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007d52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007d56:	81a3      	strheq	r3, [r4, #12]
 8007d58:	bf18      	it	ne
 8007d5a:	81a3      	strhne	r3, [r4, #12]
 8007d5c:	bd10      	pop	{r4, pc}

08007d5e <__sclose>:
 8007d5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d62:	f000 b813 	b.w	8007d8c <_close_r>
	...

08007d68 <_write_r>:
 8007d68:	b538      	push	{r3, r4, r5, lr}
 8007d6a:	4604      	mov	r4, r0
 8007d6c:	4608      	mov	r0, r1
 8007d6e:	4611      	mov	r1, r2
 8007d70:	2200      	movs	r2, #0
 8007d72:	4d05      	ldr	r5, [pc, #20]	; (8007d88 <_write_r+0x20>)
 8007d74:	602a      	str	r2, [r5, #0]
 8007d76:	461a      	mov	r2, r3
 8007d78:	f7f9 feb2 	bl	8001ae0 <_write>
 8007d7c:	1c43      	adds	r3, r0, #1
 8007d7e:	d102      	bne.n	8007d86 <_write_r+0x1e>
 8007d80:	682b      	ldr	r3, [r5, #0]
 8007d82:	b103      	cbz	r3, 8007d86 <_write_r+0x1e>
 8007d84:	6023      	str	r3, [r4, #0]
 8007d86:	bd38      	pop	{r3, r4, r5, pc}
 8007d88:	20000380 	.word	0x20000380

08007d8c <_close_r>:
 8007d8c:	b538      	push	{r3, r4, r5, lr}
 8007d8e:	2300      	movs	r3, #0
 8007d90:	4d05      	ldr	r5, [pc, #20]	; (8007da8 <_close_r+0x1c>)
 8007d92:	4604      	mov	r4, r0
 8007d94:	4608      	mov	r0, r1
 8007d96:	602b      	str	r3, [r5, #0]
 8007d98:	f7f9 febe 	bl	8001b18 <_close>
 8007d9c:	1c43      	adds	r3, r0, #1
 8007d9e:	d102      	bne.n	8007da6 <_close_r+0x1a>
 8007da0:	682b      	ldr	r3, [r5, #0]
 8007da2:	b103      	cbz	r3, 8007da6 <_close_r+0x1a>
 8007da4:	6023      	str	r3, [r4, #0]
 8007da6:	bd38      	pop	{r3, r4, r5, pc}
 8007da8:	20000380 	.word	0x20000380

08007dac <_fstat_r>:
 8007dac:	b538      	push	{r3, r4, r5, lr}
 8007dae:	2300      	movs	r3, #0
 8007db0:	4d06      	ldr	r5, [pc, #24]	; (8007dcc <_fstat_r+0x20>)
 8007db2:	4604      	mov	r4, r0
 8007db4:	4608      	mov	r0, r1
 8007db6:	4611      	mov	r1, r2
 8007db8:	602b      	str	r3, [r5, #0]
 8007dba:	f7f9 feb8 	bl	8001b2e <_fstat>
 8007dbe:	1c43      	adds	r3, r0, #1
 8007dc0:	d102      	bne.n	8007dc8 <_fstat_r+0x1c>
 8007dc2:	682b      	ldr	r3, [r5, #0]
 8007dc4:	b103      	cbz	r3, 8007dc8 <_fstat_r+0x1c>
 8007dc6:	6023      	str	r3, [r4, #0]
 8007dc8:	bd38      	pop	{r3, r4, r5, pc}
 8007dca:	bf00      	nop
 8007dcc:	20000380 	.word	0x20000380

08007dd0 <_isatty_r>:
 8007dd0:	b538      	push	{r3, r4, r5, lr}
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	4d05      	ldr	r5, [pc, #20]	; (8007dec <_isatty_r+0x1c>)
 8007dd6:	4604      	mov	r4, r0
 8007dd8:	4608      	mov	r0, r1
 8007dda:	602b      	str	r3, [r5, #0]
 8007ddc:	f7f9 feb6 	bl	8001b4c <_isatty>
 8007de0:	1c43      	adds	r3, r0, #1
 8007de2:	d102      	bne.n	8007dea <_isatty_r+0x1a>
 8007de4:	682b      	ldr	r3, [r5, #0]
 8007de6:	b103      	cbz	r3, 8007dea <_isatty_r+0x1a>
 8007de8:	6023      	str	r3, [r4, #0]
 8007dea:	bd38      	pop	{r3, r4, r5, pc}
 8007dec:	20000380 	.word	0x20000380

08007df0 <_lseek_r>:
 8007df0:	b538      	push	{r3, r4, r5, lr}
 8007df2:	4604      	mov	r4, r0
 8007df4:	4608      	mov	r0, r1
 8007df6:	4611      	mov	r1, r2
 8007df8:	2200      	movs	r2, #0
 8007dfa:	4d05      	ldr	r5, [pc, #20]	; (8007e10 <_lseek_r+0x20>)
 8007dfc:	602a      	str	r2, [r5, #0]
 8007dfe:	461a      	mov	r2, r3
 8007e00:	f7f9 feae 	bl	8001b60 <_lseek>
 8007e04:	1c43      	adds	r3, r0, #1
 8007e06:	d102      	bne.n	8007e0e <_lseek_r+0x1e>
 8007e08:	682b      	ldr	r3, [r5, #0]
 8007e0a:	b103      	cbz	r3, 8007e0e <_lseek_r+0x1e>
 8007e0c:	6023      	str	r3, [r4, #0]
 8007e0e:	bd38      	pop	{r3, r4, r5, pc}
 8007e10:	20000380 	.word	0x20000380

08007e14 <_read_r>:
 8007e14:	b538      	push	{r3, r4, r5, lr}
 8007e16:	4604      	mov	r4, r0
 8007e18:	4608      	mov	r0, r1
 8007e1a:	4611      	mov	r1, r2
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	4d05      	ldr	r5, [pc, #20]	; (8007e34 <_read_r+0x20>)
 8007e20:	602a      	str	r2, [r5, #0]
 8007e22:	461a      	mov	r2, r3
 8007e24:	f7f9 fe3f 	bl	8001aa6 <_read>
 8007e28:	1c43      	adds	r3, r0, #1
 8007e2a:	d102      	bne.n	8007e32 <_read_r+0x1e>
 8007e2c:	682b      	ldr	r3, [r5, #0]
 8007e2e:	b103      	cbz	r3, 8007e32 <_read_r+0x1e>
 8007e30:	6023      	str	r3, [r4, #0]
 8007e32:	bd38      	pop	{r3, r4, r5, pc}
 8007e34:	20000380 	.word	0x20000380

08007e38 <_init>:
 8007e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e3a:	bf00      	nop
 8007e3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e3e:	bc08      	pop	{r3}
 8007e40:	469e      	mov	lr, r3
 8007e42:	4770      	bx	lr

08007e44 <_fini>:
 8007e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e46:	bf00      	nop
 8007e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e4a:	bc08      	pop	{r3}
 8007e4c:	469e      	mov	lr, r3
 8007e4e:	4770      	bx	lr
